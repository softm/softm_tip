클러스터(cluster)
디스크의 동일한 영역에 밀접한 그리고 곧잘 결합되는 체이블들을 함께 저장 하는 기법이다.
예를 들면, 디스크이  어떤 부분에 있는 worker 테이블과 어딘가 다른 곳에 있는 workerskill 테이블 대신에 
이들의 행을 클러스터라고 불리는 하나의영역에 함께 저장할수있다.
클러스터 키는 조회에서 일반적으로 결합되는 테이블들의 열혹은 열들입니다.(예를 들면 , worker와 workerskill의 name)
테이블의 소유주여야 합니다. 
다음은 create cluster workerandskill ( judy char(25));
이것은 내부에 아무것도 없는 클러스터를 만듭니다. 클러스터 키로서  judy의 사용은 부벅절합니다. 
다시는 사용하면 안됩니다. 다음에는 테이블을 작성하여 일 클러스터에 포함시킬수있습니다. 
create table worker( 
name varchar2 (25) not null,
age number, lodging number,
lodging varchar2(15)
)
cluster workerandskill (name)
여기에서 cluster 절의 존재가 tablespace혹은 storage절의 사용을  배제하는 것을 상기하싶시요.

오라클의 오랫동안 숙제였던 특별한 테이블을 만들거나 수정 및 어커런스에 대한 처리 없이도 고객 ID같은 고유한 숫자를 배정하는 문제를
해결하였습니다. 이것은 다음과 같은 create sequence명령을 사용하여 처리할수 있습니다.


SQL> create sequence Customerid increment by 1 start with 1000
SQL> select Customerid.nextval,worker.* from worker;

  NEXTVAL NAME                            AGE LODGING
--------- ------------------------- --------- ---------------
     1075 BART SARJEANT                    22 CRANMER
     1076 ELBERT TALBOT                    43 WEITBROCHT
     1077 DONALD ROLLO                     16 MATTS
     1078 JED HOPKINS                      33 MATTS
     1079 WILLIAM SWING                    15 CRANMER
     1080 JOHN PEARSON                     27 ROSE HILL


set pagesize 30000
set linesize 200
set timing off
set time off
set feedback off
set heading off
ttitle off
btitle off
DROP VIEW USER_TABLE;
spool slave.sql
--PROMPT
select decode(rownum,1,'create view user_table as ','union ')||
'select '||''''||table_name ||''''||'  name, COUNT(*) ROWCOUNT from '|| table_name from user_tables;
PROMPT/
--create or replace view user_table_size as 
--select decode(rownum,1,null,'union ')||
--'select '||''''||table_name||''''||'   name '|| 
--',count(*) row_count from'||' '|| table_name from user_tables;
spool off
@slave.sql

SELECT * FROM USER_TABLE;
PROMPT/

위의 예제를 구성하면서 잘 이해 안가는 부분이있었으나 노가다로 하니까 되기는 되는군요
PROMPT는 SQL> 이런 프롬프트에서 실행이 되어지는 효과를 발생시킴니다.
PROMPT/이거는 SQL> / 요거하고 같은의미입니다.. 
슬래시를 치면 버퍼의 내용이 실행이 됩니다. 그런 효과를 가져옵니다. 
신기하던데요 
SQL확장명을 가진 화일이나 어떤화일에 SQL문,환경설정에 사용되는 문장들을 
석어서 쓰다보면 PROMPT명령어의 필요성을 느끼실겁니다.. 
그럼이만..

변수의 로딩
set pagesize 32000
set linesize 200
start off
column foldit newline
spool slave.sql

prompt $cls
prompt spool table.lst
prompt prompt Beginning table Reports
prompt prompt
select  'define Table  = '||''''||table_name||'''' foldit,
'prompt working on '||''''||table_name||'''' foldit,
'prompt                               ' foldit, 'start sizing.sql' foldit from user_tables;
prompt prompt table reports completed
prompt spool off
prompt $print tables.lst

spool off
start slave

describe &tables;
select 'this table contains '||count(*)||' rows.' from &Tables;
prompt
prompt
prompt
 
호스트 프로세스 사용

이 리포트를 산출하기 우해 두개의 호스트 프로세스가 사용되었습니다.
하나는 화면을 지우는것이었고 다른 하나는 처리가 끝났을 리포트를 프린트하는 것이엇습니다.
근본적으로더욱 복잡한 호스트 처리 또한 사용될수있습니다. 
예를 들면 조회의 결과를 재 포맷하거나 만들어진 임시 파일을 삭제하는것등이 있습니다. 
sqlplus를 사용하여 지정된 편집기가 사용할 매크로를 작성하고 나서 편집기를 부른다음  그 매크로를 실행하고 sqlpllus로 제어를 
넘기는 것도 가능합니다. 
여기서 이들 각각은 사용자와 대화를 가능하게 하기 위해 반복적으로 코드를 기롯하고 다른 쪽을 호출합니다.


원격 데이테 액세스는 어떤 사용자가 .  어떤 데이터베이스에 대해서 접속을 하여 데이터를 조회하고 수정 삭제할수잇는 것을 말합니다.
그런 권한이 설정이 되어있어야겟지요..  링크를 작성하려면 create database link 권한을 , 원격 데이터 베이스에 접속을 하려면 create session 권한을 가져야합니다.
링크를 작성하면..  그 사용자의 어떤 데이터베이스[테이블이 아닐까요?] 에 select 권한을 가집니다. 
여기에서 
원격 데이터 액세스
     데이타베이스의 크기와 수가 늘어감에 따라 이들 간에 데이터를 고유해야 할 필요성을 느끼게 될것입니다.
데이터를 고유하는 것은 데이터를 배치하고 액세스하는 기법을 필요로 합니다. 
오라클에서느 조회나 수정 같은 원격 데이터로의 액세스가 데이터베이스 링크를 사용하여 이루어집니다. 
이 장에서 기술하는것과 같이 데이터베이스 링크는 사용자들로 하여금 일단의 
분산된 데이터베이스를 마치 이들이 하나의 통합된 데이터ㅔ이스인 것처럼 취급할수잇게 해줍니다.
데이터베이스의 링크는 오라클에 데이터베이스에서 다른 데이터베이스에 액세스하는 방법을 알려줍니다.
 액세스 경로를 틀별한 방법으로 지정할수오 잇습니ㄷ. 
원격 데이터 베이스에 대해 동일한 형태로 자주 접속해야 한다면 데이터 베이스링크를 사용하는것이 좋습니다. 
데이터베이스 링크는 원격 데이터베이스 액세스 에 관련되 각 기계(호스트)에 sql/net이 작동중이어야합니ㄷ...	
데이터베스의 원격 데이터 액세스는  아래와 같이 테이블명@서버이름... 
이렇게 써주면 그것에 접속하여 원격적으로 데이타에 접속을 할수있다.
SQL> select * from worker@ilban;
NAME                            AGE LODGING
------------------------- --------- ---------------
BART SARJEANT                    22 CRANMER
ELBERT TALBOT                    43 WEITBROCHT
DONALD ROLLO                     16 MATTS
JED HOPKINS                      33 MATTS
WILLIAM SWING                    15 CRANMER
JOHN PEARSON                     27 ROSE HILL
GEORGE OSCAR                     41 ROSE HILL
KAY AND PALMER WALLBOM              ROSE HILL
PAT LAVAY                        21 ROSE HILL
RICHARD KOCH AND BROTHERS           WEITBROCHT
DICK JONES                       18 ROSE HILL
ADAH TALBOT                      23 PAAP KING
ROLAND BRANDT                    35 MATTS
PETER LAWSON                     25 CRANMER
VICTORIA LYNN                    32 MULLERS

갱신을 할때는 아래와 같이 합니다 물론 수정, 삭제도 마찬가지겠지요..
SQL> update worker@ilban set lodging = 'CRANMER'
  2  where lodging = 'ROSE HILL';
5 행이 갱신되었습니다.
다음 쿼리를 살펴보도록 하겟습니다.
ilban의 worker테이블을 갱신하는데 
 현재 로컬에 위치한 lodging테이블의 manager필드의 값이 KEN MULLER인 사람을 
선택하여... 이행의 lodging 값을 선택합니다.   
이 lodging값을  worker@ilban의 lodging 값에 할당합니다.
단 조건은 lodging 이 'ROSE HILL'인 값을 할당하는 것입니다.
여기에서는 이것이 중요한것이 아니고 local과 remote를 이해하는것이 중요합니다.

SQL> update worker@ilban set lodging = 
  2  (select lodging from lodging where manager ='KEN MULLER')
  3  where lodging = 'ROSE HILL';

0 행이 갱신되었습니다.

데이터 베이스이 링크의 구문
형식 : 		create [public] database link remote_connect
		connect to username  identified by passwd
		using 'connect string'

데이터베이스 링크를 작성할때 사용할수잇는 특정 구문은 다음과 같은 세가지 영역으로 나눌수잇다.
데이터베이스 링크의 공용 혹은 개인용인지의 상태
원격 데이터 베이스에 대한 디폴트 혹은 명시적 로그인의 사용
현재 사용중인 sql/net의 버전

데이터베이스 링크를 작성하려면 반드시 create database link구문을 사용한다.
링크를 작성하려면 Create database link를 가져야하고 
원격 데이터베이스로 접속하려는 어카운트는 반드시 Create session특권을 가져야한다.

공용 대 개인 데이터 베이스 링크
공용 데이터베이스 링크는 데이터 베이스 내의 모든 사용자가 이용할수잇습니다..  반면
개인용 데이터베이스 링크는 이것을 작성한 사람만이 사용할수 있습니다. 
한 사용자가 개인용 데이터베이스 링트에 대한 액세스 권한을  다른 사용자에게 부여하는것은 허용되지 않습니다.


데이터베이스 링크를 공용 데이터베이스 링크로 지정하려면 다음과 같이 
create public database link remote_connect 
connect to username identified by  psassword 
using  'connect string'

공용데이터 베이스를 작성 하려면 create public database link 시스템 특권을 가져야 합니다.
이 시스템 특권은 오라클의 DBA롤에 포함되어 잇습니다.
공용설정은 아무나 사용할수있는것이 아닙니다... 대단한능력인가 보죠...  하하하 오라클은 살아있다..

디폴트 대 명시적 로그인

SQL*Net V2에서는  => connect to ... indentified by .... 절을 지정하지 않아도  됩니다. 지정하진 않으면 
해당 링크가 사용될 때는 로컬 데이터베이스 어카운트와 동일한 사용자 명과 함호를 가진 원격 데이터 베이스에 있는 세션을 열려고 시도 합니ㅏㄷ. 
이것을 디폴트 로그인이라고 합니다.   

어떤식이든지..  링크를 생성하게 되면  그 계정에 대해서 어떤 사용자든 select 권한을 가지고게 됩니다.
 퍼블릭을 로 설정을 하면요..
프리베이트는 특정 사용자만이 링크가 가능하게 하는거구요..


트리거의 설계에는 상당히 큰 유연성이 있습니다.
bdfore와 after 키워드는 트리거의 실행 시점이 트리거 트랜잭션의 시작 전인지.
후인지를 표시합니다. delete,insert그리고 update키워드는 이벤트를 구성하는 데이터처리 유형을 지정합니다.

for each row절이 사용되면 이트리거는 행 수준 트리거이며 그렇지 않다면 
문수준 트리서 입니다. 
트리거가 실행될 때 추가적인 제약 상항을 위해서 when 절이 사용됩니다.
when 절에서 실시되는 제약 사항은 기존 데이터와 새로운 데이터를 포함할 수있습니다.
예를 등러 10%보다 큰 Amount의 조정 내역을 살펴보기를 원한다고 가정해 봅시다. 
10%이상 클 때에만 실행됩니다. 또한 이 예제는 New키워드의 용도도 보여주고 잇습니다. 
이것은 해당 열의 새로운 값을 참조하며 old키워드는 해당 열의 기존값을 참조합니다.
/
트리거의 조건의 범위를 더욱 넓혀 줍니다.  트리거 이벤트는 반드시 ledger 테이블의 수정을 위한것일 뿐만이 아니라.
Amount 열의 값에 있는  10% 증가분도 반영해야합니다. 

insert into ledger_audit
values (:old.action_Date, :old.Action, :old.item,
:old.Quantity, :old.Quantitytype,:old.Rate,
:old.Amount, :old.Person)
end;


creat trigger ledger_bef_upd_row
:>	트리거를 생성합니다.
before update on ledger
:>	트리거 이베트에는 Before와 After두가지가있습니다. 
	ledger테이블의 트랜잭션 처리가 이루어지기 전에 트리거가 발생할지 여부를 결정합니다.
for each row 
:>	이렇게하면 행수준의 트리거가 발생합니다. 
	트리거 방식에는 두가지가있다고 들었다. 이것은
	행수준 방식과 .. 문 수준방식을 들수있다..  
	행수준 트리거는 각 행에 대해 한번만 처리되는 가장 보편적인 트리거입니다.
	이들은 데이터 감사 애플리케이션에서 
	곧잘 사용되며  행 수준 트리거는 분산된 데이터를 일치시키는 데에도 유용하게 사용할수있다.
	문수준 트리거는 는  각 트랜재겻ㄴ 에 대해 한번만 처리됩니다. 
	예를 들어 하나의 트랜잭션이 500개의 행을 ledger 테이블에 입력했다고 하면
	이 테이블에 대한 문수준의 트리거는 한번만 실행됩니다. 따라서 문수준 트리거는 데이터 관련 처리에는 별로 자주 사용되지
	않습니다. 이것은 대개 어떤 테이블에 대해 실생되는 트랜잭션의 유형을 측정하는 추가적인 보안을 실시하기 위해 사용됩니다.
when (new.Amount/old.Amount >1.1)
트리거가 발생할 조거절이 명시됩니다.. 
begin 
:>PL/SQL의 시작입니다.
insert into ledger_audit
values (:old.action_Date, :old.Action, :old.item,
:old.Quantity, :old.Quantitytype,:old.Rate,
:old.Amount, :old.Person)
end;
:>	PL/SQL의 끝입니다.

우리 확실히 하고 넘어갑시다. 
트리거 어떤 트리거 LEDGER테이블의 UPDATE트리거가 발생하기 전에(BEFORE니까! 전에!)
조건을 WHEN에서 첵크를합니다. 조건을 말이지요.. 글구 BEGIN이하의 PL/SQL을 실행합니다.
너무 쉬운데요.. 잘 할수있어요 어제의 답답함을 오늘에서야 조금은 씻은듯이 계속 걷습니다.
계속 계속............끝이 보이지 않는 터널속으로 자꾸 자꾸 나의모습은 사라집니다.
나의 눈은 내 존재는 더욱더 그 빛을 더해갈겁니다.. 
나는 최고가 될꺼니까요........ 할수있습니다. 
마음을 굳게 먹을 겁니다. 어머니 아버지,  우리 가족들을 위해서 
나는 죽어도 후회는 없습니다.. 그렇다면 나는 지금의 나는 작고 초라하지만 
가능한만큼 빨리 그 길에 다다라야 합니다.............................
나를 위하여.....

위의 뭉탱이는 PL/SQL 코드는 트리거 본체에 해당됩니다. 여기서 볼수 있는 명령들은 when 조건을 통과흔 LEDGER 테이블의 모든 update를 위해 실행됩니다. 
이것을 성공 시키기 위해서는 LEDGER_AUDIT  테이블이 반드시 존재해야 하며 트리거의 소유주가  반드시 해당 테이블에 대한  특권을 부여받은  상태라 합니다. 
그리고 트리거의 소유주가 반드시 해당 테이블에 대한 특권을  부여 받은 상태라야합니다.

PL/SQL블록에서 NEW와 OLD키워드를 참도할때에는 이들 앞에 콜론(:)을 사용한다. 
이것은 감사 트랜잭션의 전형적인 예입니다. 감사 활동은 LEDGER 테이블의 UPDATE를 실행하는 사용자에게는 보이지 않습니ㅏㄷ. 
한테이블에 대한 여러개의 INSERT,UPDATE 그리고 DELETE 명령을 위한 트리거를 선언할수있습니다. 

보죠!
CREATE TRIGGER LEDGER_BEF_UPD_INS_ROW
	:>이부분은 LEDGER_BEF_UPD_INS_ROW라는 트리거 이벤트를 설정합니다
BEFORE INSERT OR UPDATE OF Amount on LEDGER
	:> 이 이벤트는 insert나 Amount열의 update가 발생할때에 이루어지며.. 
for each row
	:> 아까도 봤죠 이것은 행수준의 트리거를 발생시킵니다.
begin :>시작이고요!
	IF INSERTING THEN then
	:>조건이 나옵니다. inserting이 발생을 하면 실행합니다
	여기 이조건을 통해서 유추할수있는것이있습니다..
	그것은 update 될때 updating, delete될때 deleting이렇게 하지 않을까요.. 맞아요 맞아........
		insert into ledger_audit
		values(:new.Action_date, :new.Action,:new.Item,
		:new.quantity,:new.QuantityType, :new.Rate,
		:new.Amount, :new.person);
	Else --- if not inseting, then we are updating Amount
	:>엘스.. 그밖의 일이 일어날경우에는 이상한 생각하지 말고요
		그럼 뭘까요..  update of Amount가 있었지요 Amount열에 갱신이 이루어질경우죠!
	inset into LEDGER_AuDIt
		Values( :old.Action_date, :old.Action, :old.Item,
		:old.Amoont, :old.Person);
end;
이렇게 되는것랍니다. 쉽지요!

입력값의 지정 
	insert 와 update 동안에 사용할 열의 값을 지정하기 위해 트리거를 사용할수 있습니다.
	
	create trigger ledger_bef_upd_ins_row
	before insert or update of person on ledger
	for each row
	begin 
		:new.upperperson :=  upper(:new.person)
	end;
이 예제에서 트리거 본체는  Person 열에 upper함수를 사용하여 UpperPerson을 위한 값을 결정합니다.
 이 트리거는 어떤 ledger테이블의 person행에 어떤 값이 갱신되거나..
 ledger테이블에 입력이 이루어지기 전에 발생하는 트리거가 이루어집니다.

분산처리 옵션을 가진 데이터 베이스에서는 불필한 중복을 초래합니다.
새로운것을 알았어요 스냅샷을 이용하면  테이블을 통째로 복사하고 삭제할수있는것 같아요


트리거를 실행을 시키면 잘 들어가있는다.. 그대로 말야.. 
형식을 되새겨보자..       음............
create trigger 트리거 이름
before  insert,update,delete   on 테이블명
for each row
after
begin
		sql문장 
end;

오류조건 설정

create trigge worker_bef_del
	:> 트리거이름을 worker_bef_del
before delete on worker
	:> worker테이블에 delete가 발생이 되기 이전에 트리거가 발생이된다.
declare :>  다음부분은 이트리거에 정의된 두가지 예외 사항의 명칭을 선언합니다.
	weekend_error exception;
	not_finance_user exception;
	:> 예외적인 사항의 명칭을 선언합니다.
begin 
if TO_CHAR(SYSDATE,'DY') = '목' or TO_CHAR(SYSDATE,'DY') = '금' then
raise weekend_error;
END IF;
IF substr(user,1,3) <> 'YHM' THEN
raise not_finance_user;
END IF;

EXCEPTIONS
WHEN weekend_error THEN
RAISE_APPLICATION_ERROR(-20001,'Deletions not allowed on weekends');

WHEN not_finance_user THEN
RAISE_APPLICATION_ERROR(-20002,'Deletions only allowed by Finance users');
end;
RAISE_APPLICATION_ERROR 프로시저는 두개의 입력 파라메터를 가진다. 하나는 
	오류번호이고 하나는 표시될 에러 메시지입니다. 

트리거의 명칭 지정은 반드시 적용될 테이블 기동하는  DML명령,전(before),후(after)상태 그리고 
이것이 행수준 트리거인지.. 문 수준 트리거인지를 명확하게  표시하도록 지정하여야 합니다. 
not NULL 이나 Primary key같은 선언적 무결성 제약 조건과는 달리 트리거는 테이블에 있는 모든 행에 영향을 주지는 않으며 명시된 유형의 트랜잭션에게만 영향을 줍니다.
그리고 트리거가 활성화  상태일 때에만 영향을 줍니다. 

트리거의 활성화 방법 1.
SQL> alter trigger worker_after_ins_row enable;

트리거가 변경되었습니다.

트리거의 활성화 방법 2.
SQL> alter table worker enable all triggers;

테이블이 변경되었습니다.

위의 두가지 방법을 살펴 보았아.. 
1. alter 변경해라 trigger를  어떤것을  enable로 disable로
2. alter 테이블을 변경해라,.  뭐로  all trigger 로

트리거 교체하기
 트리거의 본체는 변경할수 없습니다.  트리거의상태가 변경가능한 유일한 부분입니다. 
본체를 변경하려면 트리거를 재 작성하거나 다르것으로 교체하여야 합니다. 
트리거를 교체하려면 create ro replace trigger 명령을 사용합니다. 
or replace옵션을 사용하면 앞에잇던 모든 권한 관련 사항이 그대로 유지됩니다. 이것의 대안은 트리거를 삭제하고 다시 작성하는것입ㄴ디ㅏ. 
이 경우에는 해당 트리거에 부여된 모든 권한이 삭제 됩니다. 

트리거 교체하기 
drop trigger 명령을 통해 삭제할수있습니다. 트리거를 삭제하려면 반드시 트리거의 소유주이거나.
drop any trigger 시스템 특권을 가지고있어야 합니다.

프로시주얼 오브젝트를 작성하려면 반드시 Create procedure 시스템 특권을 가져야합니다.
프로시주얼 오브젝트가 다른 사용자의 스키마에 속해있다면 반드시 create any procedure  시스템 특권을 가져야합니다.

프로시주얼 오브젝트가 작성되면 실행이 가능합니다.
프로시주얼 오브젝트가 실행되면 이것은 실행하는  사용자가 아니라 소유자의 테이블 특권에 영향을 받습니다.
프로시저를 실행하는 사용자은 프로시저가 액세스하는 테이블에 대한 액세스 권한을 반드시 부여받아야 할 필요는 없습니다. 
다른 사용자에게 프로시주얼 오브젝트를 실행할수잇게 해주려면 다음과 같이 해당 오브젝트에 대한 Executer특권을 부여해 주어야합니다.
grant execute on MY_PROCEDURE to Talbot;
다른 사용자들에게 EXECUTE 특권을 부여해 주지 않는다면  
해당 프로시저를 실행하기 위해서 그들은 반드시 EXECUTE ANY PROCEDURE 특권을 가져야합니다.

대분의 프로시저는 인수를 갖습니다.
 아래는 NEW_WORKER라는 프로시저를 ADH TALBOT인수를 넘겨 실행합니다. 
	EXECUTE NEW_WORKER('ADH TALBOT');
다른 프로시저 함수 패키지 혹은 트리거 내에서는 프로시저가 Execute 명령 없이도 호출 될수있습니다. 
 new_worker 프로시저가 ledger 테이블에있는 트리거에서 호출 되었다면 
기냥 new_worker(:new.person);이런식으로도 호출이 가능합니다. 

execute George.NEW_WORKER('ADAH TALBOT');
	:> George소유위 NEW_WORKER프로시저를 실행합니다.
create synonym NEW_WORKER for George.NEW_WORKER; :>동의어의 생성
이 동의어의 소유쥬는 프로시저를 실행하기 위해서 더이상 프로시저 소요주의 이름을 참조할 필요가 없습니다. 

execute NEW_WORKER@REMOTE_CONNECT('ADAH TALBOT');
REMOTE_CONNECT라는 데이터베이스 링크를 사용하여 원격 데이터베이스에있는
NEW_WORKER라는  프로시저을 액세스하는것입니다. 프로시저가 잇는곳을 사용자에게 보이지 않게 하려면 다음과 같이 원격 프로시저에 대한 동의어를 작성하여 사용할수있습니다.

프로시저혹은 패키지,함수에대한 특권은  롤에의해서 부여되어질수없습니다.
이것은 이것을 작성한 사용자에게 특권을 부여받아야 사용이 가능해집니다.


프로시저 대 함수 
프로시저와는 달리 함수는 호출한곳에 대해서 리턴값을 줄수있습니다. 
이 값은 함수내에 RETURN이라는 키워드를 사용하여 리턴됩니다.
 함수는 IN OUT 혹은 OUT 인수(Argument)를 사용하지 않습니다. 
이들은 프로시저를 위한 것들입니다. 

프로시저 대 패키지
패키지느 프로시저, 함수, 변수 그리고 sql문들이 하나의 단위로 그룹화된 것이비낟. 
패키지 내에서 프로시저를 실행하려면 다음과 같이 반드시 패키지 명을 먼저 표시해야 합니다.
execute LEDEGER_PACKAGE.NEW_WORKER('ADAH TALBOT')
앞의 예제에서는 LEDGER 패키지에 있는 NEW_WORKER 프로시저가 실행되었습니다.
패키지는 동일한 변수와 커서를 사용하는 복수개의 프로시저를 허용합니다. 

CREATE PROCEDURE 구문

CREATE [ OR REPLACE ]  PROCEDURE [USER.]PROCEDURE 
[(ARGUMENT [IN|OUT|IN OUT] DATATYPE
[,ARGUMENT [IN|OUT|IN OUT] DATATYPE]...)]
{IS|AS} BLOCK;
프로시저의 머리부분과 본체 모두 이 명령에 의해 만들어집니다. NEW_WORKER프로시저는 
다음과 같은 명령으로 만들어 졌습니다.

CREATE PROCEDURE NEW_WORKER (PERSON_NAME IN VARCHAR2)
AS 
BEGIN 
INSERT INTO WORKER
(NAME,AGE,LODGING) VALUES(PERSON_NAME,NULL,NULL);
END;
프로시저를 생성합니다. PERSON_NAME 이라는 인자에 대해서 VARCHAR2라는 데이터형으로 입력에 대한 인수를 만듭니다.
AS 프로시저의시작 BEGIN 을 선언하고 SQL 문장을 작성합니다. 여기에서는
INSERT INTO 문을 사용하여 자료를 삽입하는데 좀전에 입력을 받은 PERSON_NAME이라는 값이 할당되어있느것을 볼수있습니다.
END; :> 이문장을 끝으로 프로시저가 끝이 납니다. 
	쉽지요~!!!

CREATE FUNCTION 문
CREAET [OR REPLACE] FUNCTION [USER.] FUNCTION 
[(ARGUMENT IN DATATYPE
 [,ARGUMENT UB DATATYPE]...)]
{IS|AS} BLOCK;
함수의 머리 부분과 본체는 이 명령에 의해 만들어 집니다.  함수를 위해 유일하게 유효한 인수 한정자는 IN 뿐입니다.
IN이 한정자의 디폴트 유형이르모 CREATE FUNCTION 명령에서는 생략할수있습니다.

DROP FUNCTION BALANCE_CHECK;
CREATE FUNCTION BALANCE_CHECK(PERSON_NAME IN VARCHAR2)
RETURN NUMBER
IS
BALANCE NUMBER(10,2);
BEGIN
SELECT SUM(AGE)
into BALANCE
 FROM WORKER
WHERE NAME = PERSON_NAME;
RETURN(BALANCE);
END

함수를 선언하고 위와 같이 함수를 구성하였습니다.. 
근데 왜 안돼는것일까요... 답답..
프로시저의 디버깅에을위해서는 user_errors라는 테이블을 참조해오느데 ..
여기에는 여러개의필드가 있으니 잘 참고 하세요.. 
조금 힘이 나는것 같은데요,. 왠지 모를 힘이 솟아라... 얍...
변강뭐는 아니구요..  하하ㅏ하하ㅏ하하 웃음으로 난처한 상황을 빠져 나오는 지후니.
SELECT  LINE,POSITION,TEXT FROM USER_ERRORS
WHERE NAME ='BALANCE_CHECK'
AND TYPE = 'FUNCTION'
ORDER BY SEQUENCE
타입이 function인 것중에 에러를 발생 시킨것을 읽어옵니다.
	user_errors를 잊지 마세요,,,,,
type에 해당되어질수있는 값은 PROCEDURE ,PACKAGE, FUNCTION, PACKAGE BODY입니다.
두 개의 딕셔널리 뷰, ALL_ERROR와 DBA_ERRORS 또하 프로시저의 오브젝트와 관련된 오류를 검색하는데 사용할수있습니다.

DBMS_OUTPUT 패키지의 사용
 SHOW ERRORS 명령에 의해 제공되는 디버깅 정보에 추가하여 DBMS_OUTPUT 패키지도 사용할수 있습니다.
DBMS_OUTPUT은 데이터 베이스에 있는 프로시주얼 옵션이 설치  될 때 만들어 집니다.
DBMS_OUTPUT을 사용하려면 반드시 SQLDBA, 혹은  SQLPLUS를 사용하여야 합니다.
