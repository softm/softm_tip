SQL> SELECT DISTINCT NAME,BALANCE_CHECK(NAME)
  2  FROM WORKER;
신기한 일이 벌어졌습어요.. SQL문장에 함수를 첨가해서 실행을 시키니까..
잘 돌아가는군요... 그럼 함수는 SQL문과 함께 사용한다,, 이렇게 이해하도록하느것이 ..
단순한 논리로 받아들인다고요 제가 좀 단순하거든요. 죄송 헤 헤!!!
그렇게 하면 되겠네요.. 그럼 되는거죠..........그렇지요..우화화
NAME                      BALANCE_CHECK(NAME)
------------------------- -------------------
ADAH TALBOT                                23
ANDREW DYE                                 87
BART SARJEANT                              22
DICK JONES                                 18
DONALD ROLLO                               16
ELBERT TALBOT                              43
GEORGE OSCAR                               41
GERHARDT KENTGEN                           15
HELEN BRANDT                               15
JED HOPKINS                                33
JOHN PEARSON                               27
KAY AND PALMER WALLBOM
PAT LAVAY                                  21
PETER LAWSON                               25
RICHARD KOCH AND BROTHERS
ROLAND BRANDT                              35
VICTORIA LYNN                              32
WILFRED LOWELL                             67
WILLIAM SWING                              15

이것도 역시 함수를 정의 하는것입니다.
CREATE  FUNCTION BALANCE_CHECK(PERSON_NAME IN VARCHAR2)
:> 입력값을 VARCHAR2형으로 선언합니다.
RETURN NUMBER
IS BALANCE NUMBER(10,2);
:> 리턴될 값의 형가 이름을 정의합니다.
BEGIN :> 쿼리의 시작입니다.
SELECT SUM(AGE) INTO BALANCE
FROM WORKER 
WHERE NAME = PERSON_NAME;
RETURN(BALANCE); :> 값을 리턴 합니다.

EXCEPTION :> 예외상황을 정의합니다...
WHEN NO_DATA_FOUND THEN
	RAISE_APPLICATION_ERROR(-20100,'자료가 없잖아요');
END;
    :> 직접 작성한 예외사항은 DECLARE절을 사용합니다. 이것은 BEGIN 절보다 선행되어야 합니다.
이상한걸요 자료가 없을경우를 만족하는 경우가 없나 본데요......
넘어가야지요..

프로시저와 함수는 이들이 처리하는 비즈니스 기능과 이들이 실시하는 비즈니스 규칙을 따라서 명칭이 부여되어야 합니다.
이들의 용도에 대해 애매 모호한 점이 있어서는 안됩니다. 
NEW_WORKER 프로시저는 명칭이 변경되어야 합니다.  NEW_WORKER는 레코드를
WORKER에 입력하는 비즈니스 기능을 처리합니다. 따라서 이것의 명칭은 이러한 기능을 반영하여야 합니다.
왜냐하면 이것에 대한 더 나은 명칭은 ADD_NEW_WORKER같은 것이 될수있을 것입니다. 
이것이 처리하는 기능을 동사로 반드시 기술하여야 하기 때문입니다.
테이블이 적절하게 명명되었다면 테이블 명은 동사가 작용하기 때문입니다.

drop package worker_package;
create package worker_package
begin
function balance_check(person_name varchar2);
procedure new_worker(person_name in varchar2);
end;
위의 내용은 팩키쥐를 worker_package라는 이름으로 생성합니다. 
근데 잘 않되서 짱나네요
아래의 요 녀석도 팩키쥐를 만들어서 그것의 몸통을 구성하는것 같은데 
이녀석도 잘 않되는데요.. 바보야.. 
create package body worker_package
as 
user_name varchar2;
entry_date date;
function balance_check(person_name in varchar2)
retrun number
is 
balance number(10,2);
begin 
select sum(age) into balance from worker
where name = person_name;
return(balance);
exception
when no_data_found then
raise_application_error (-20100,'자료가 없어요');
end balance_check;
procedure new_worker(person_name in varchar2);
as
begin
insert into worker
(name,age,lodging) values (person_name,null,null);
end new_worker;
begin 
	select user,sysdate into user_name,entry_date
	from dual;
end worker_package;

팩키쥐는 묶음입니다.. 함수도 들어가고 프로시저두들어가서 하나의 묶음이 됩니다..
그러면 들고 다니기 편하겠지요.. 그렇지요.. 그래요. 그럼요.. 
아무렴 그렇고 말고,, 노래가 나오네요.. 오늘 아르바이트 이력서 내야 하는데 끝도 없이 프린트를 하니 
죽겠네요.. 그렇지요.. 내일은 졸업식이구 .. 이런일이 우째 ... 바쁘게 살아야합니다. 무엇이든 열심히 해야 합니다.
그럼요......... 삶음 짧은것이니까요..

소스를 보고 싶으시다고요.. 
그러면 이렇게 한번 해보세요.. 
select text from user_source; :> 사용자가 소유한 프로시주얼 오브젝트.
select text from all_source;  :> 사용자가 소유한 프로시주얼 오브젝트 혹은 사용자가 액세스 권한을 부여받은 프로시주얼 오브젝트.
select text from DBA_source;  :> 데이터베이스 내의 모든 프로시주얼 오브젝트.

SQL> alter procedure new_worker compile;
 :> 프로시저를 재 컴파일할때 사용합니다.alter procedure 절에 사용될수있는 옵션은 단지 compile뿐입니다.
프로시져가 변경되었습니다.
이 명령을 사용하려면 반드시  alter  any procedure 시스템 특권을 가지고 있어야 합니다.
팩키지 내부의 함수나 프로시저는 이 명령으로 재 컴파일 할수없다.

스냅샷(Snapshots)
분산된 데이터를 사용하는 애플리케이션의 퍼포먼스를 향상시키기 위해 원격 테이블의 로컬 사본을 만들수있다.
Oracle7은 원격 테이블의 로컬 사본을 관리하는 수단으로 스냅샷을 제공합니다.
스냅샷은  단일 테이블의 전체 혹은 일부를 복사하거나. 복수의 테이블에 
대한 조회의 결과를 복사하는 데  사용될수도 있습니다.  복사된 데이터의 갱신은 지정된 시간 간격에 
맞춰 데이터베이스에  의해 자동으로 처리 될수있습니다. 

바탕이 되는 필요한 특권 
Create Snapshot,Create Table,Create View,Create Index(단순 스냅샷인 경우에만)
추가적으로 반드시 Unlimited TableSpace 시스템 특권 혹은 로컬 테이블 스페이스에 명시된 공간 할당량을 가지고있어야 합니다. 

바탕이 되는 오브젝트들은 사용자의 어카우트(스키마라고도함 )내에 저장됩니다.
스냅샷이 다른 사용자의 스키마에  만들어진다면 반드시 Create Any Table,
Create Any View,Create Any Index, Create Any Snapshot 시스템 특권도 가지고 잇어야 합니다.
UnLimited Tablespace시스템 특권 혹은 로컬 테이블 스페이스에 명시된 공간 할당량을 충분히 가지고 있어야합니다.

SQL> create table local_ledger
  2  as select * from worker;

테이블이 생성되었습니다.

SQL> select * from local_ledger;

NAME                            AGE LODGING
------------------------- --------- ---------------
BART SARJEANT                    22 CRANMER
ELBERT TALBOT                    43 WEITBROCHT
DONALD ROLLO                     16 MATTS
JED HOPKINS                      33 MATTS
WILLIAM SWING                    15 CRANMER
JOHN PEARSON                     27 CRANMER
GEORGE OSCAR                     41 CRANMER
KAY AND PALMER WALLBOM              CRANMER
PAT LAVAY                        21 CRANMER
RICHARD KOCH AND BROTHERS           WEITBROCHT
DICK JONES                       18 CRANMER
ADAH TALBOT                      23 PAAP KING
ROLAND BRANDT                    35 MATTS
PETER LAWSON                     25 CRANMER
VICTORIA LYNN                    32 MULLERS
WILFRED LOWELL                   67
HELEN BRANDT                     15
GERHARDT KENTGEN                 15
ANDREW DYE                       29 ROES HILL
ANDREW DYE                       29 ROES HILL
ANDREW DYE                       29 ROES HILL

21 개의 행이 선택되었습니다.

SQL> desc local_ledger;
 이름                            Null?    유형
 ------------------------------- -------- ----
 NAME                            NOT NULL VARCHAR2(25)
 AGE                                      NUMBER
 LODGING                                  VARCHAR2(15)

로컬데이터베이스 내에서는 사용자 소유의 스냅샷에 대한 Select 특권을 다른 사용자에게 수여할 수 있습니다. 
 대부분의 스냅샷이 읽기만 허용되므로 더 이상 추가적인 grant는 필요없습니다. 
하지만 수정가능한 스냅샷을 작성하고 싶다면 로컬 테이블에 대한 Update 특권을 수여하여야 합니다. 

스냅샷에는 단순스냅샷과 복합 스냅샷이 있습니다. 
단순  :>  하나의 테이블에서 행들을 가져오느냐 .. 
	  결합, 서브쿼리,Group By 혹은 Connect by 같은  집합 연산을 하지 않습니다. 
복합  :>  하나 이상의 테이블을 사용하여 말그대로 복합적으로 하는것이지요.

단순 조회의 결과 집합은 마스터 테이블에 있는 단일 레코드에 대해 매핑하는 각각의 레코드들을 포함 합니다.
단순 스냅샷은 마스터 테이블에서 나온 모든 레코드를 포함할 필요는 없습니다. 
복합 스냅샷은 단순 스냅샷을 위해 명시된 규칙들을 위반하는 조회입니다. 
따라서 서브쿼리 를 포함하거느 group by 절을 포함한다면  정의에 의해 복합 조회가 됩니다.


Create SnapShot [user.] snapshot
{ [ pctfree integer|
    pctused integer|
    initrans integer|
    maxtrans integer|
    tablespace tablespace|
    storage storage |
    [cluster cluster (column[,column]...]}
refresh [fast |  complete | force]
   [start with date] [next date]]
as query;
 

Create snapshot 명령에는 네가지 구분된 부분이 있다.
 첫번째는 머리부분인데 여기에는 시냅샷의 명칭이 들어 있습니다.
 만약 머리부분에 다른 사용자명이 들어있지 않다면 현재 사용자의 
 어카운트에 스냅샷이 저장됩니다. 

 두번째 부분에서는 스냅샷을  위한 영역 파라미터가 지정됩니다. 
 영역 파라미터는 복사된 데이터를 저장하기 위해서 로컬 데이터 베이스에 만들어지는 테이블에 적용됩니다. 
 
 세번째 부분에서는 Refresh 옵션이 지정됩니다. 
 FAST, COMPLETE,FORCE :>
 FAST는 단순 스냅샷에서만 사용할 수 있습니다. 
 마스터 로그에서 스냅샷으로 특정 행들을 전송하기 위해 스냅샷 로그(SNAPSHOT LOG)라 불리는 
테이블을 사용합니다.   만약 단순 스냅샷을  작성하였지만 완전 갱신을 원하는경우에는 CREATE SNAPSHOT 명령에 REFRESH COMPLETE를 명시 하십시오

 네번째 부분은 조회를 작성하는것입니다. 
 SQL> create snapshot local_ledger
  2  storage(initial 100k next 100k pctincrease 0)
  3  tablespace snaps
  4  refresh fast
  5  start with sysdate next sysdate+7
  6  as
  7  select * from worker@ilban;
  권한 이 없다는 메시지가 나오는데요 며칠 안봤더니 
  전에 한것들이 생각이 나질 않는데 뭐 또 봐야죠 그치요 헤헤..
  보니까.. 음 refresh를 거 뭐냐.. fast로 할 경우하고 ..complete로 할때에
  단순 스냅샷과 복합 스냅샷으로 되어지는것 같네요/.
  
  Very Important 
  스냅샷은 로컬 사용자가 항상 자신들의 조회를 지원하기 위해 사용된다는 사실

데이터 딕셔널리의 활용 
오라클의 데이터 딕셔너리른 데이터베이스에 있는 오브젝트들을 관리하는데 사용되는 정보를 저장합니다.
비록 그것이 주로 데이터베이스 관리자(DBA) 들의 영역에 속하지만 데이터 딕셔널리는 개발자와 사용자 모두에게 가치있는 정보 공급원이라 하겠다.
좋은놈이지요.
이녀석은 기능별로 그룹화 되어있습니다. 
현재 사용하고있는 오라클의 구성 옵션에 따라 몇몇 그룹은 현재의 데이터베이스에 적용되지 안을수도 있습니다. 
가장 널리 사용되는 뷰들이 먼저 나열 됩니다. ... 잘 보라구요.. 
오늘 오수희 씨가 인수인계를 해준다고 했는데 .  

1순위 :> 로드맵 DICTIONARY 및 DICT_COLUMNS
2순위 :> 테이블 및 열 ,뷰, 동의어 및 스퀀스
3순위 :> 제약 조건 과 주석
4순위 :> 인덱스와 클러스터
5순위 :> 데이터베이스 링크 및 스냅샷
6순위 :> 트리거,프로시저, 함수,그리고 패키지
7순위 :> 영역할당 및 사용법
8순위 :> 사용자 및 특권
9순위 :> 롤
10순위:> 감사(Auditing)
11순위:> 감시(Modntoring)
12순위:> 기타(오라클 V6 및 V5 뷰, CHINED_ROWS,PLAN_TABLE 상호 의존성, DBA전용 뷰, Trusted Oracle뷰 ,
	 SQL*loader 직접 로드 옵션 뷰, 그리고 자국어 지원(National Language Support(NLS) 뷰
명명법에 대한 주
몇몇 예외와 함께 Oracle7 데이터 딕셔너리에 있는  오브젝트들의 명칭은 "USER","ALL"혹은"DBA"의 세가지 중 하나로 시작합니다.
USER 사용자 소유의 정보를 가진다.
ALL  뷰에 있는 레코드는  USER레코드와 자신에 대한 특권이 Public혹은 사용자에게 수여된 오브젝트들을 보여줍니다.
DBA  소유자와 관계없이 데이터 베이스 내의모든 오브젝트들을 보여줍니다.

로드맵 :  디셔너리(DICT)와 DICT_COLUMNS
	  오라클7을 구성하는 오브젝트들에 대한 설명은 DICTIONARY라는 뷰를 통해서 액세스가 가능하\
SQL> column Comments format a50
이것는 커럼의 포맷을 지정하여 좀더 예쁜 화면을 구성하기 위한것이죠.. 

SQL> select Table_name,table_column, Comments from dict
  2  where upper(Table_name) like '%TABLES%';

TABLE_NAME                     COMMENTS
------------------------------ -------------------------------------------------
ALL_TABLES                     Description of tables accessible to the user
USER_TABLES                    Description of the user's own tables
USER_TABLESPACES               Description of accessible tablespaces    

Dict에 포함 되어진 colums을 검색할때는 Dict_columns을 사용합니다. 	
딕셔널리 뷰의 열들은 DICT_COLUMNS 뷰를 통해 조회할 수 있습니다. 
DICTIONARY 뷰와 마찬가지로 DICT_COLUMNS는  그 데이터 딕셔너리 뷰로 입력된 설명을 표시 해줍니다. 

이것을 조회하는것은 어떤 데이터 딕셔너리 뷰가 현재 가장 유용한 것인지를 결정할 수 있도록 해 줍니다. 
예를 들어 사용 중인 데이터 베이스 오브젝트에 대한영역 할당량과 사용량 정보를 보고 싶지만  어떤 데이터 딕셔너리 뷰가 그런 정보를 
가지고 있는지 확실치 않을 때에는  DICT_COLUMNS를 조회할 수 있습니다. 
여기에서 볼 수이쓴 조회는 Blocks라는 명칭을  가진 열을 소유한 모든 데이터 딕셔너리 테이블을 검색합니다. 

select Table_name,Column_Name,Comments from dict_columns
  where upper(column_name) like '%BLOCKS%'
이렇게 하면 column_name이 BLOCKS인것들의 열에 대한 설명을 볼수있습니다.

내장되어진 뷰를 통하여 .. 정보를 얻을수있습니다. 

* 카탈로그 : User_catalog(cat)
이 녀석은 사용자가 소유하고있는 모든 테이블,뷰,동의어, 그리고 스퀀스를 보여줍니다. 
카탈로그죠.. 
지금 조회 되어진 결과는 user_catalog테이블의 존재하는 열을 찾아본것인데 
두개의 열이 존재하는군요.. 한번 조회 해 볼까요. 
SQL> select table_name,column_name
  2         from dict_columns  
  3         where upper(table_name) like 'USER_CATALOG';

		TABLE_NAME COLUMN_NAM
		---------- ----------
		USER_CATAL TABLE_NAME
		OG

		USER_CATAL TABLE_TYPE
		OG
아래의 녀석은 카탈로그 테이블을 조회한것인데 테이블의이름으로 조건을 주어 검색을 해보았습니다.
USER_CATALOG라는 테이블이라는것을 명심하십시요..  CAT두 되요.
사용자의 목록들을 말하는것입니다. 머리속에좀 붙어 있어라.. 널러 가지 말고 
가슴이 찡하게 무엇인가가 스미는 느낌입니다.. 화이팅!!
SQL> select table_name,table_type from user_catalog
  2  where table_name like 'W%' or table_name like'T%';
TABLE_NAME                     TABLE_TYPE
------------------------------ -----------
TROUBLE                        TABLE
WORKER                         TABLE
WORKERSKILL                    TABLE
WORKER_01                      TABLE

User_catalof는 단지 특정 유형의 정보만을 보여줍니다. 
모든 오브젝트에 대한 정보를 검색하려면 USER_OBJECTS라는 검색을 하십시요
한번 해볼까요... 
SQL> select object_name,object_type from user_objects
  2  where object_name like 'W%' or object_name like'T%';

OBJECT_NAME   OBJECT_TYPE
------------- -------------
TROUBLE       TABLE
WORKER        TABLE
WORKERSKILL   TABLE
WORKER_01     TABLE
WORKER_PACKAG PACKAGE
E

WORKER_PACKAG PACKAGE BODY
E
쉽네요..!
이 테이블에는 Object_name
              Object_id(해당 오브젝트에 대해 유일한 오라클에의해 배정된 id)
              Object_Type(오브젝트의 유형을 나타냅니다.)
	      Created(오브젝트의 작성 시간 기록(DATE열))
	      Last_DDL_Time(해당 오브젝트에 사용된 최종 DDL 명령, Alter,Grant,및 Revoke등이 포함됨
	      Timestamp (오브젝트의 작성 시간 기록 Create와 동일하지만 문자열에 저장됨)
	      Status(오브젝트의 상태('Valid혹은 Inbalid)

select table_name from user_tables where table_name like 'W%'
select object_name,object_type, object_id,created,
       last_ddl_time,timestamp,status 
from user_objects

select table_name,tablespace_name,nvl(cluster_name,'없시요'),
		  pct_free,pct_used,ini_trans,initial_extent,next_extent,
		  min_extents,max_extents
from user_tables 

select * from user_constraints where table_name like '%T%'
select * from seq[USER_SEQUENCES]
사용자의 시퀀스를  출력합니다. 
[ALL_SEQUENCES]와 동일한 열 정의를 가지고 있습니다.

Select * from user_constraints
제약 사항에 대해 나타냅니다. 이 테이블에 있는 열중에 아래 잘 봐요.. owner라느 열이있는데
이 열은 테이블의 소유주를 말하는것이 아니라.. 제약 조건의 소유주를 지칭합니다.
 select owner,constraint_name,constraint_type,table_name,
     search_condition,R_owner,r_constraint_name,
     delete_Rule,status
 from user_constraints where table_name like '%T%' 
이 위의 쿼리를 잘 보면 constraint_type이라는 열이있고 search_condition이라는 열 두가지를 주목하라,
이 열은 Constraint_type에는 C,P,U라는 값이 입력되어지는데 이것은 P는 Primary Key, C Constraint,U Unique라는
값을 의미한다. C는 강제 적으로 NOT NULL을 지정한 경우를 말합니다.
search_condition은  상태를 자세하게 보여준다. 위의 그냥 값으로만 지정이 되어진것을 
NAME IS NOT NULL,ID IS NOT NULLNAME IS NOT NULL,JUSO IS NOT NULL,NAME IS NOT NULL이런식으로 
보여준다.. 근데 C에 대한 설명은 아무것도 없시요..

USER_CONS_COLUMNS이라는 테이블을 살펴보자.
오늘 정은이가 소개 시켜준 동생과 통화를 했다.. 성격이 밝아 보이는  아이인데 ..
조금 어색한 나의 태도에 그 아이 까지  어색해지는 느낌 
음.. 그래 편안한 동생으로 그렇게 만나면 되는것지 .. 동생으로 말야.. 
내가 어색해 하면 더  어려운 사이 밖에 되지 않잔항.. 그런것이 뭐 좋은거지 그럼/.
내 모습이 어떻게 비췄기에 그들에게는 그런 생각을 일깨웠을까.. 
나의 싫수이다. 좀더 힘있게 너를 감추는것이 최선은 아니니까. 
요즘은 밤의 어두움과 함께하는것이 힘겨워집니다. 차분함이 좋기도 하지만 
이제 좀 활기 차면서 편안할수있는 사람이 되었으면 합니다.. 
내 얼굴 보면 짜증이 막 날것 같습니다. 휴우우우우 한숨만 나오는 이유는 무얼까요.. 
아름다운 목소리 행동 눈빛 미소 모든것이 영혼을 아름답게 만듭니다. 
그런 모습으로 사는것입니다. 나의 모습을 아름답게 영혼이 환한 미소를 지울수있는 모습으로.. 
노래가 흐를때면 마음이 편한 합니다.. 조용한 선율,,, 
언젠가는 미친듯이 영혼의 창을 흔들고 싶을때 가있었습니다. 
그 순간의 미소는  나의 마음을 아프게 했습니다. 지금의 
내 모습 정말이 싫습니다.  다시 내가 이런 생각에 잠길때는 나를 보았을 때 
내 모습이 사랑스러웠으면 합니다. 
SELECT  TABLE_NAME, COLUMN_NAME FROM USER_CONS_COLUMNS
USER_CONS_COLUMNS는 테이블에 지정되어있는 제약사항이 주어진 열을 조회하여 보여줍니다. 

SELECT TABLE_NAME,TABLE_TYPE,COMMENTS FROM USER_TAB_COMMENTS
테이블을 작성하고 그테이블에 대한 설명을 붙일수있습니다.

아래와 같이 하면 주석이 생성 됩니다... 
COMMENT ON TABLE LOCAL_WORKER IS '미친세상속의 노래'

아래는 테이블에대한 열의 주석을 보고싶을 때 사용하는것입니다. USER_COL_COMMENTS라는 뷰로요..
SELECT TABLE_NAME,COLUMN_NAME,COMMENTS FROM USER_COL_COMMENTS

주석을 달려면 아래와 같이 합니다. 위에서는 테이블의 주석을 달으니까.. TABLE이구요
COMMENT ON COLUMN LOCAL_WORKER IS '사랑은 아름다움의 결정입니다/'
이렇게 하면  주석이 열에 대한 주석이 작성되어집니다. 
USER_INDEXES라는 뷰를 이용하여 인덱스를 조회합니다. 
	SELECT * FROM IND
책을 보다 보니까.. 값자기 UNIQUE하고 인덱스의 차이점이 궁금해 지는군요... 
이게 멀까요.. 음.. 음.. 음.. 유니크는 그 항목이 유일하게 끔 만들어 줍니다. 
그럼으로 해서 유일한 항목이니까.. 검색에나 조회시 조건으로 사용되어질 가능성이 많아진다. 
이렇경우를 예상해서 오라클에서 내 부적으로 인덱스를 생성한것이 아닐까요..
그렇게 생각하고 넘어 가야지요. 헤이.. 

USER_CLUSTERS라는 뷰는 클러스터를 조회합니다.
SELECT * FROM CLU
클러스터는 마니 결합이 이루어지는 테이블들의 열들을 역어놓는것입니다. 
어떤 조건식에 이 두 값을 비교하는 상황이 발생한다면 .. 클러스터로 연결이 되어있다면 ..굉장히 
빨리 이 조건을 검색할 수 있겟지요.. 제가 이해를 한거라 확실한지는 모르겠는데요.. 헤헤 요번에도 그냥..

USER_DB_LINKS라는 뷰는 데이터 링크가이루어진것들을 조회합니다. 
데이터 링크라는것을 만들어 놓으려면.. 거뭐더라 어떤 권한이 있어야 하는데 ... 기억이 .. 
CREATE DATABASE LINK라는 권한입니다. 

USER_SNAPSHOTS라는 권한은 스냅샷을 구성한것에 대한것을 보여줍니다. 
SELECT * FROM USER_SNAPSHOTS
스냅샷은 어떤 테이블들의 결합으로 만들어진 새로운 테이블입니다. 
CREATE TABLE 명령을 이용하여..
CREATE TABLE AS SELECT * FROM WORKER 이런것이 간단한 스냅샷으 예라고 할수있겟고.. 
CREATE SNAPSHOT 명령을 이용하여.. 좀더 복잡하고 자주 사용하는 쿼리에 대한  SNAPSHOT을 생성시킬수있습니다. 

USER_SNAPSHOT_LOGS
스냅샷 로그는 마스터 테이블에 있는 레코드중 어떤 것이 해당 테이블의 원격 스냅샷에서 갱신되어야 하는지
결정하기 우해 단순 스냅샷에 의해 사용됩니다..

USER_TRIGGERS
사용자가 소유한 트리거에 대한 정보가 조회되어집니다.
SELECT * FROM USER_TRIGGERS

USER_SOURCE
사용자가 가지고 있는 트리거, 함수, 팩키쥐, 들의 소스를 보여줍니다. 
SELECT * FROM USER_SOURCE

USER_ERRORS
최근의 컴파일 시도와 연관돈 오류를 찾기 위해  USER_ERRORS를 직접 조회할 수도 있다. 
SELECT * FROM USER_ERRORS
show errors라는 명령어를 입력할수도있습니다. 
이것은 오류를 보여주지 않을수있습니다.  그럼 위의 것을 기냥 쓰십시요. 

USER_OBJECT_SIZE
프로시주얼 오브젝트를 위해 사용된 SYSTEM테이블스페이스의양은 이것을 이용하여 조회합니다.
SELECT * FROM USER_OBJECT_SIZE

SELECT NAME ,SOURCE_SIZE+CODE_SIZE+ ERROR_SIZE FROM USER_OBJECT_SIZE

	 NAME      SOURCE_SIZE+PARSED_SIZE+CODE_SIZE+ERROR_SIZE     
	NEW_WORKER			436
	BALANCE_CHECK			848
	WORKER_PACKAGE			382
	WORKER_PACKAGE			697

USER_SEGMENTS
 세그먼트 단위로 오브젝트(테이블,클러스터,그리고 인덱스 등과 같은)에  할당 되어집니다.
세그먼튼는 데이터 베이스에 작성된 논리적인 오브젝트의 물리적 상대 개념입니다. 
사용자의 세그먼트에 영향을 주는 현재 영역 사용량과 영역  사용량과 영역 파라미터를 
보려면 USER_SEGMENTS를 조회하면 됩니다.
USER_SEGMENTS 는 영역 제한량 중 한 가지라도 넘어설 위험에 처했으 때 매우 유용하게 활용할 수 있습니다.
세그먼트는 익스텐트라 불리는 연속된 부분으로 구성되어 있습니다. 
세그먼트를 구성하는 익스텐트는 USER_EXTENTS에 기술 되어 있습니다.
여기서 세그먼트 내에 있는 각 익스텐트의 실제 크기를 볼 수 있습니다. 
이것은 NEXT와 PCTINCREASE 지정에 대한 변경의 영향을 추적하는데 매우 유용하게 사용할 수 있습니다. 
SEGMENT_NAME,SEGMENT_TYPE그리고 TABLESPACE_NAME 열에 추가하여 USER_EXTENTS는 세개의 새로운 열, EXTENT_ID(세그먼트 내의 익스텐트를 표시)
BYTES(익스텐트의 바이트 단위 크기) 그리고, BLOCKS(ORACLE블록 단위의 익스텐트 크기)를 가집니다.

세그먼트 명 , 세그먼트유형, 세그먼트가 저장된 테이블 스페이스면, 세그먼트에 할당된 바이트 수,INITIAL익스텐트 크기, 세그먼트에대한 NEXT 파라미터 값, 세그 먼트 내에 존재할 수 있는 익스텐트의 최소 갯수
세그먼트에 대한 MAXEXTENTS파라미터 값,세그먼트에 대한 MINEXTENTS파라미터 값,
세그먼트에 할당된 프로세스 여유 리스트의 개수 세그먼트가 복수 개의여유 리스트를 갖는다면 동시 INSERT 작업으로 인한  경합 이 완화될 것 입니다.
세그먼트에 할당된 여유 리스트 그룹

테이블 스페이스 내에 세그먼트를 소유하고 있는 모든 사용자를 나열하려면
DBA_SEGMENTS에 있는 TABLESPACE_NAME 열을 기초로 조회하면 됩니다. 
그러면 테이블 스페이스 내의 세그먼트 소유쥬 전부를 나열할 수 있습니다. 

USER_FREE_SPACE
사용된 영역을 보는 것에 추가로 현재 "여유상태"로 표시된 영역이 얼마나 있는지를 알아보기 우해 데이터 딕셔너리를 조회할 수 있습니다.
USER_FREE_SPACE는 사용자가 액세스할 수 있는 모든 테이블 스페이스에 있는 여유 익스텐트를 나열해 줍니다. 이것은 TABLESPACE_NAME 별로 여유 익스텐트의 FILE_ID와 시작 지점의 
BLOCK_ID를 보여줍니다. 여유 익스텐트의 크기는 BYTES와 BLOCKS단위 모두로 표시됩니다. 
DBA_FREE_SPACE는 가용한 여유 공간과 단편화 정도를 감시 하기 위해  DBA에 의해 빈번하게 사용됩니다. 

USER_RESOURCE_LIMITS
오라클 사용자에게 가용한 데이터베이스 및 시스템 자원 할당량의 제한을 위해 프로파일(Profile)을 사용할 수 있습니다. 
데이터베이스 내에 작성된 프로파일이 없다면  모든 사용자에 대해 자원을 무제한으로 사용할 수 있도록  지정한 디폴트 프로 파일이 사용됩니다. 
제한할 수 있는 자원은 알파벳순 참조서의 CREATE PROFILES 엔트리에 기술되어 있습니다.
사용자의 현재 세션에 지정되어 있는 제한 사항을 보려면 USER_RESOURCE_LIMITS를 조회하면 됩니다. 이것의열들은 다음과 같습니다. 
RESOURCE_NAME 자원 명(예를 들면, SESSIONS_PER_USER).
LIMIT 이 자원에 부과된 제한치.
이 뷰에 재한 ALL혹은 DBA버전은 존재 하지 않습니다. 

USER_TAB_PRIVS
이것은 사용자의 현재 세션에 대해 엄격하게 제한 됩니다. 
사용자가 특권을 부여받은 입장에서 부여자와 해당 오브젝트의 소유주를 찾아보려면 USER_TAB_PRIVS를 조회하십시요.
이 녀석은 사용자가 권한을 가지고있는 오브젝트 들(테이블....)에 대해 권한을 부여한 사용자와 권한을 부여받은 사용자. 
SELECT * FROM  USER_TAB_PRIVS

USER_COL_PRIVS
열수준의 권한 부여 정보를 조회하고자 할경우에 사용합니다. 

USER_SYS_PRIVS
사용자에게 부여된 시스템 특권을 나열합니다. 이것의 열들에는 USERNAME,PRIVILEGE 그리고 ADMIN_OPTION이 있습니다. 
SELECT * FROM USER_SYS_PRIVS
SELECT * FROM DBA_SYS_PRIVS 

USER_ROLE_PRIVS
사용자에게 지접 부여된 특권에 추가하여 여러 특권의 집합을 롤으로 그룹화 할 수있습니다. 
롤은 사용자에게 혹은 다른 롤에게 부여할 수 있습니다. 그리고, 오브젝트와 시스템 특권 모두를 사용하여 구성할 수 있습니다.
SELECT * FROM USER_ROLE_PRIVS
자신에게 부여된 롤을 보려면 이것을 사용 합니다. PUBLIC에게 부여된 모든 롤들 또한 여기에서 나열됩니다. 

테이블/열 특권 부여 ROLE_TAB_PRIVS, GRANTEE 열 대신  ROLE 열을 가진것 만을  제외하고는 USER_TAB_PRIVS 및 USER_COL_PRIVS와 유사함

시스템 특권         ROLE_SYS_PRIVS ,USERNAME 열대신 ROLE 열을 가진것만 제외하면 USER_SYS_PRIVS 및 USER_COL_PRIVS와 유사함
롤 부여             ROLE_ROLE_PRIVS 다른 롤에게 부여한 모든 롤

Analyze WORKER list chained rows into  chained_rows;

SQL문을 튜닝할 때 옵티마이저가 조회를 실행하는 단계를 지정하여야 할 경우가 있을 것입니다.
조회 과정을 보려면 반드시 PLAN_TABLE이라는 테이블을 사용자의 스키마에 먼저 지정해야 합니다. 

현재 데이터베이스에서 유효한 자국어 지원 파라미터에 대한 정보를 표시해 주는 뷰가 세개 있습니다. 
NLS 파라미터에 대한 비표준 값들은 데이터베이스의 INI.ORA 파일을 통하거나 혹은 ALTER SESSION 
명령을 통해 지정할 수 있습니다. NLS지정에 대한 자세한 매뇽은 책을 보라네요.. 

NLS_DATABASE_PARAMETERS 를 각각 조회해야 합니다.
동생들아 너무 힘들게 생각 하지 말자.. 
그것이 최선이라면 따르면 되는것이지.. 
어제 저녘에는 그 아이와 통화를 했다.
오빠 동생 하면서.. 얘기를 했는데 좀 어색한듯 바보 같은 말 만 한것 같아서..
조금은 ...................... 뭐라고 해야할까.. 
지금 내가 잘 하고 있는 지도 모를일이다. 
한번 이런것들을 경험해 보고 싶은 생각에서.. 시작을 하긴했지만.. 
너무 힘들다. 지금 이 순간에 나는 무슨 생각을 만들어야 하는가.. 
순수함도 사라지고 .. 나의 영혼은 나쁜 생각으로만 가득한것 같다. 
그런 이유에서.. 지금 내 모습이 이렇듯 초라한것일까.. 
음 미칠 노릇이다. 무슨이유로 나는 이렇게 살고 있는가.. 
처음 시작은 모든것이 그렇듯이 어려운것이다.
삶의 고뇌라고 했던가. 삶은 고통이요. 아픔 뿐이라면,,
이런 말을한 사람은 죽음을 택하는 편이 낳지 않을까.. 
그런것 일까.. 
오늘을 살기 위해 참고 견딘다. 그렇다면 무엇이 참고 견딜 이유가 되는가
돈을 벌기위해 궁극적으로는 시간을 만들것인가 무엇때문이가.. 
지금은 나를 삶의 귀퉁이로 몰고 가고있다.. 
아직 젊음이 이렇게 한없이 약해지는 이유는 무엇때문일까..
극단적인 생각 밖에는 나의 머리속에 존재하지 않는다.. 
무엇이 나를 이렇게 만들었단 말인가. 
기분이 뛸듯이 좋다가도.. 움추려들고 만다. 
나를 누르고 있는 나를 발견했을때 나는 거부하지도 못하고.. 
나의 육체는 지금 내가 있는 그자리에 주저 앉는다.. 



















거짓이 없다. 존재하지 않는다.. 
내가 무엇을 잘 할 수 있으랴 이런생각 뿐 ..
지친다. 왜냐구. 나의생각 모든것이 엉망이다. 




















--SELECT * FROM USER_SEGMENTS
--select * from user_tables
--select * from user_extents
--select * from user_free_space
--Select * from user_users
--select * from user_users
--select * from USER_RESOURCE_LIMITS
--SELECT * FROM  ALL_TAB_PRIVS WHERE GRANTABLE = 'YES'
--SELECT * FROM RSKTEM1TT
--SELECT * FROM USER_TAB_PRIVS
--SELECT * FROM USER_COL_PRIVS
--SELECT * FROM USER_SYS_PRIVS
--SELECT * FROM DBA_SYS_PRIVS
--SELECT * FROM USER_ROLE_PRIVS
--SELECT * FROM USER_ROLE_PRIVS

--SELECT * FROM SESSION_PRIVS 
--SELECT * FROM SESSION_ROLES
--SELECT * FROM USER_AUDIT_TRAIL
--Analyze troble list chained rows into chained_rows
--select  * from chained_rows
--SELECT * FROM PLAN_TABLE
--SELECT * FROM USER_DEPENDENCIES
--SELECT * FROM USER_SOURCE
