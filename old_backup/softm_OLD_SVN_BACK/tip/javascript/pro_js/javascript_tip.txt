소스 : http://oreilly.com/catalog.9780596806750

# 자바스크립트 문법 검사  : http://jslint.com/
var zero = 0;
if ( zero === false ) {
    // zero는 0이고 false는 아니기때문에 이 블럭을 실행하지 않는다.
}

// 안티
var zero = 0;
if (zero === false) {
    // 이 블럭은 실행된다.
    alert("");
}
var month = "06",
    year = "09";
month = parseInt(month,10);
year = parseInt(year,10);
//▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼//
Number("08");//8

# api 문서작성 - jsdoc
    http:///code.google.com/p/jsdoc-toolkit/

    /**
     * @tag 관련값
     */

    /**
     * 문자열을 반환한다.
     * 
     * @tag 관련값
     * @param {String} 반전시킬 입력 문자열
     * @return {String} 반전된 문자열
     */
    var reverse = function (input) {
        // ...
        return output;
    }

    /**
     * @tag 관련값
     */


/**
 * 수학 계산 유틸리티.
 * @namespace MYAPP
 * @class math_stuff
 */
MYAPP.math_stuff = {
	/**
	 * 수학 계산 유틸리티.
	 * @method sum
	 * @param {Number} a 첫 번째 숫자
	 * @param {Number} b 두 번째 숫자
	 * @return {Number} 두 숫자를 더한 값
	 */		
	sum:function(a,b) {
		return a + b;
	}
	/**
	 * 수학 계산 유틸리티.
	 * @method sum
	 * @param {Number} a 첫 번째 숫자
	 * @param {Number} b 두 번째 숫자
	 * @return {Number} 두 숫자를 더한 값
	 */		
	multi:function (a,b) {
		return a * b;
	}
};

/**
 * Person 객체를 생성한다.
 * @class Person
 * @constructor
 * @namespace MYapp
 * @param {String} first 이름
 * @param {String} last 성
 */
MYAPP.Person = function(first, last){
	/**
	 * 사람의 이름
	 * @property first_name
	 * @type String
	 */
	this.first_name = first;
	/**
	 * @property last_name
	 * @type String
	 */
	this.last_name = last;
	
	/**
	 * person 객체의 성명을 반환한다.
	 * @method getName
	 * @return {String} 사람의 성명
	 */
	MYAPP.Person.prototype.getName = function() {
		return this.first_name + ' ' + this.last_name;
	};
};

# 출시단계의 압축
    - 야후 : YUI컴프레서(YUICompressoor)
    - 구글 : 크로저 컴파일러(Closure Compiler)

# JSLint
    JSLint가 잡아내는 위반사례
        - 실행되지 않는 코드
        - 변수를 정의하기 전에 사용한 경우
        - 불안전한 UTF문자
        - void, with, eval을 사용한 경우
        - 졍규식 내부에 부적절하게 이스케이프한 문자

    # WSH( Window Scripting Host), JSC(JavascriptCore, 맥 OS X에 포함된 자바스크립트 엔진)
      라이노(모질라에서 개발한 자바스크립트 인터프리터) 등을 사용하면
      JSLint를 로컬 개발환경에서 실행시킬 수 있다.

# 메서다같이 재사용되는 멤버는 프로토타입으로 추가하자.
    Person.prototype.say = function() {
        return "I am " + this.name;
    }
    
# 스스로를 호출하는 생성자.
	function Waffle() {
		if ( !(this instatnceof Waffle)) {
			return new Waffle();
		}
		//same ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼
		if ( !(this instatnceof arguments.callee)) {
			return new arguments.callee();
		}
		this.tastes = "yummy";
	}    
	
	Waffle.prototype.wantAnother = true;
	
	var first = new Waffle(),
	    second = Waffle();

	console.log(first.tastes);
	console.log(second.tastes);
	
	console.log(first.wantAnother);	
	console.log(second.wantAnother);	
	
# 배열 리터럴.
	var a = new Array("1","2","3");
	
	var b = ["1","2","3"];
	
	console.log(typeof a); // object
	console.log(a.constructor === Array); // true
	
# 배열 리터럴 문법

# 배열 생성자의 특이성
	Array.isArray([]); // true
	Array.isArray({
		length:l,
		"0":1
		slice:function() {}
	}); // false
	Object.prototype.toString(); // [object Array]
	if ( typeof Array.isArray === "undefined" ) {
		Array.isArray = function(arg) {
			return Object.prototype.toString.call(arg) === "[object Array]";
		}
	}

# JSON (JavaScript Object Notaition)
	{ "key" : "value","some key":[1,2,3] }

	
# 정규 표현식 리터럴    
    var re = /\\/gm;
    var re = new RegExp("\\\\","gm");
    g : 전역매칭
    m : 여러줄 매칭
    i : 대소문자 구분없이 매칭

# 원시 데이터 타입 래퍼
     Number(), String(), Boolean()
    
    var  n = 100;
    console.info(typeof n);

    // 숫자 객체
    var nobj = new Number(100);
    console.info(typeof nobj); // "object"

    var s = "hello";
    console.info(s.toUpperCase()); // "HELLO"

    // 값 자체만으로도 객체처럼 동작할 수 있다.
    "monkey".slice(3,6); // "key"

    // 숫자도 마찬가지다.
    (22/7).toPrecision(3); // "3.14"

    // 비추천
    var s = new String("my string");
    var n = new Number(101);
    var b = new Boolean(true);

    // 추천안
    var s = "my string";
    var n = 101;
    var b = true;

   var greet = "Hello there";
   greet.split(' ')[0];//"Hello"
   greet.smile = true;
   typeof greet.smile; //"undefined"
    
    typeof Number(1); //"number"
    typeof Number("1"); // "number"
    typeof Numbernew Number()); // "number"
    typeof String(1); // "string"
    typeof Boolean(1) // "boolean"

# 에러 객체
    Error(), SyntaxError(), TypeError()

        name, message로 구성됨.

    객체 리터럴로 에러객체 생성방법.
        try {
            throw {
                name : "MyErrorType", // 임의의 에러 타입
                messag : "oops"
                extra : "This was tather embarrassing"
                remedy: genericErrorHandler // 에러를 처리할 함수
            };
        } catch (e) {
            // 사용자에게 공지한다.
            alert(e.message); // "oops"
            //훌륭하게 에러를 처리한다.
            e.emedy(); // genericErrorHandler() 호출
        }
    
# 함수
    // 안티패턴.
    var add = new Function('a, b', 'return a+b');
    add(1,2);

    - 기명함수 표현식.
        var add = function add(a, b){
            return a + b;
        };

    - 무명함수(unnamed function expression), 익명 함수 (anonymous function) 표현식.
        var add = function (a,b) {
            return a + b;
        };

    - 함수 선언문 과 한수 표현식의 차이.
        ::> 세미콘론이 붙는지 여부가 다르다.
        - 함수 선언문
            function foo() {
                // 함수 본문.
            }
    
# 함수의 name 프로퍼티
    function foo() {}
    var bar = function () {};
    var baz = function baz (){};

    foo.name; // "foo"
    bar.name; // ""
    baz.name; // "baz"
    ※ ie에서는 제대로 구현되어 있지 않음.

# 함수 호이스팅
    모든 변수는 함수 본문 어느 부분에 선언되더라도 내부적으로 함수의 맨 윗부분으로 끌어올려(host)진다.

    function foo(){
        alert('global bar');
    }

    function bar() {
        alert('global bar');
    }

    function hostingMe() {
        console.log(typeof foo); // "function"
        console.log(typeof bar); // "undefined"
      
        foo(); // "local foo"
        alert( bar );

        bar(); // TypeError: bar is not a function

        //
        function foo() {
            alert('local foo');
        }

        var bar = function () {
            alert('local bar');
        };

    }

    hostingMe();

    ★ 호이스팅
        function aaa() {
            
        }
        &&&&&&&&&&&&&&&&
        var aa = "aa값의 할당"; // <-- 두가지의 의미를 갖는다.
                                // 1. aa라는 변수의 선언
                                // 2. aa값의 할당

        ◆ 함수선언, 변수선언은 호이스팅 된다. 
           --> 함수의 맨위 부분으로 끌어올려진다.(hoist)
        ◆ ;으로 작성된 구문들은 표현식으로 런타임에 유효한것이다.

# 콜백 패턴.
    함수를 다른 함수의 인자로 전달할 수 있다.

        function writeCode(callback) {
            callback();
        }

        function introduceBugs() {
            
        }
        writeCode(introduceBugs);

# 타임아웃
    var thePlotThickens =  function() {
        console.log('500ms later...');
    }

    setTimeout(thePlotThickens, 500);

# 함수 반환하기
    var setup = function() {
        alert(1);
        return function() {
            alert(2);
        };
    };

    var my = setup();
    my();

# 자기 자신을 정의하는 함수.
    var scareMe =  function() {
        alert("Boo!");
        scareMe = function() {
            alert("Double boo!");
        };
    };
    // 이 패턴을 게으른 함수(lazy function definition)이라 부른다.
        --> 최초 사용 시점 전까지 함수를 완전히 정의하지 않고 있다가.
            호출된 이후에 더 게을러져서 더 적게 일하기 때문이다.


# 즉시 실행 함수
    (function() {
        alert('watch out!');
    }());


    (function() {
        alert('watch out!');
    })();
    
    (function(){
        var days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
            today = new Date(),
            msg = 'Today is ' + days[today.getDay()]
                + ', ' + today.getDate();
        alert(msg);
    }());

    모든 코드들이 지역변수로 초기화된다.