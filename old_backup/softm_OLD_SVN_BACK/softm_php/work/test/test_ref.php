# 변수 유효영역 : http://php.net/manual/kr/language.variables.scope.php

<DIV id="layout_2" sizcache="2" sizset="0"><DIV class="manual/kr" id="content" sizcache="2" sizset="0"> <DIV class="sect1" id="language.variables.scope" sizcache="0" sizset="0"><H2 class="title">변수 유효영역</H2><P class="simpara">변수의 유효영역은 변수가 정의된 환경을 말한다. 대부분의 경우 모든 PHP 변수는 한군데의 유효영역만을 갖는다. 이 한군데의 유효영역은 include되거나 require된 파일로도 확장된다. 예를 들면: </P><DIV class="informalexample"><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR />$a&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">1</SPAN><SPAN style="COLOR: #007700">;<BR />include&nbsp;</SPAN><SPAN style="COLOR: #dd0000">'b.inc'</SPAN><SPAN style="COLOR: #007700">;<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P class="simpara">위 예제코드에서는 include된 <VAR class="filename">b.inc</VAR> 스크립트안에서도 <VAR class="varname">$a</VAR> 변수가 사용가능하다. 하지만, 사용자-선언 함수에서는 로컬 함수 유효영역이 적용된다. 함수내에서 사용되는 모든 변수는 기본값으로 로컬 변수 유효영역 안으로 제한된다. 예를 들면: </P><DIV class="informalexample"><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR />$a&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">1</SPAN><SPAN style="COLOR: #007700">;&nbsp;</SPAN><SPAN style="COLOR: #ff8000">/*&nbsp;global&nbsp;scope&nbsp;*/&nbsp;<BR /><BR /></SPAN><SPAN style="COLOR: #007700">function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">test</SPAN><SPAN style="COLOR: #007700">()<BR />{&nbsp;<BR />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$a</SPAN><SPAN style="COLOR: #007700">;&nbsp;</SPAN><SPAN style="COLOR: #ff8000">/*&nbsp;reference&nbsp;to&nbsp;local&nbsp;scope&nbsp;variable&nbsp;*/&nbsp;<BR /></SPAN><SPAN style="COLOR: #007700">}&nbsp;<BR /><BR /></SPAN><SPAN style="COLOR: #0000bb">test</SPAN><SPAN style="COLOR: #007700">();<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P class="simpara">위 스크립트에서 echo문이 <VAR class="varname">$a</VAR>의 로컬 버전을 참조하고, 이 영역 안에서 값을 지정되지 않았기 때문에 아무것도 출력되지 않는다. C에서 전역변수는 특별히 로컬 선언으로 덮어쓰지 않는이상은 자동적으로 함수안에서 사용가능하다는 점에서 C 언어와 약간 차이가 있다는 것에 주의해야 할것이다. 이런 생각으로 부주의하게 전역변수를 변경하려한다면 문제가 될것이다. PHP에서 전역변수가 함수내에서 계속적으로 사용이 된다면 함수안에서 global로 선언해야 합니다. </P><DIV class="sect2" id="language.variables.scope.global" sizcache="0" sizset="0"><H3 class="title">global 키워드</H3><P class="simpara">우선, <I>global</I>의 사용 예제입니다: </P><P class="para"></P><DIV class="example"><P><B>Example #1 global 사용하기</B></P><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR />$a&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">1</SPAN><SPAN style="COLOR: #007700">;<BR /></SPAN><SPAN style="COLOR: #0000bb">$b&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">2</SPAN><SPAN style="COLOR: #007700">;<BR /><BR />function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">Sum</SPAN><SPAN style="COLOR: #007700">()<BR />{<BR />&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$a</SPAN><SPAN style="COLOR: #007700">,&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$b</SPAN><SPAN style="COLOR: #007700">;<BR /><BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$b&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$a&nbsp;</SPAN><SPAN style="COLOR: #007700">+&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$b</SPAN><SPAN style="COLOR: #007700">;<BR />}&nbsp;<BR /><BR /></SPAN><SPAN style="COLOR: #0000bb">Sum</SPAN><SPAN style="COLOR: #007700">();<BR />echo&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$b</SPAN><SPAN style="COLOR: #007700">;<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P></P><P class="simpara">위 스크립느는 "3"를 출력할것이다. <VAR class="varname">$a</VAR>와 <VAR class="varname">$b</VAR>를 함수내에서 global로 선언함으로써, 각 변수에 대한 모든 참조는 전역 버전으로 참조될것이다. 함순에서 조작되는 전역변수의 수는 제한이 없다. </P><P class="simpara">전역 유효영역의 변수에 접근할수 있는 두번째 방법이 특별 PHP-선언 <VAR class="varname"><A class="classname" href="http://www.php.net/manual/kr/reserved.variables.globals.php">$GLOBALS</A></VAR> 배열을 사용하는 것이다. 이전 예제코드는 다음과 같이 다시 작성할 수 있습니다: </P><P class="para"></P><DIV class="example"><P><B>Example #2 global 대신 <VAR class="varname"><A class="classname" href="http://www.php.net/manual/kr/reserved.variables.globals.php">$GLOBALS</A></VAR> 사용하기</B></P><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR />$a&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">1</SPAN><SPAN style="COLOR: #007700">;<BR /></SPAN><SPAN style="COLOR: #0000bb">$b&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">2</SPAN><SPAN style="COLOR: #007700">;<BR /><BR />function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">Sum</SPAN><SPAN style="COLOR: #007700">()<BR />{<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$GLOBALS</SPAN><SPAN style="COLOR: #007700">[</SPAN><SPAN style="COLOR: #dd0000">'b'</SPAN><SPAN style="COLOR: #007700">]&nbsp;=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$GLOBALS</SPAN><SPAN style="COLOR: #007700">[</SPAN><SPAN style="COLOR: #dd0000">'a'</SPAN><SPAN style="COLOR: #007700">]&nbsp;+&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$GLOBALS</SPAN><SPAN style="COLOR: #007700">[</SPAN><SPAN style="COLOR: #dd0000">'b'</SPAN><SPAN style="COLOR: #007700">];<BR />}&nbsp;<BR /><BR /></SPAN><SPAN style="COLOR: #0000bb">Sum</SPAN><SPAN style="COLOR: #007700">();<BR />echo&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$b</SPAN><SPAN style="COLOR: #007700">;<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P></P><P class="simpara"><VAR class="varname"><A class="classname" href="http://www.php.net/manual/kr/reserved.variables.globals.php">$GLOBALS</A></VAR> 배열은 전역변수명이 key가 되는 연관배열이고 배열의 원소 값이 그 변수의 내용이 된다. <VAR class="varname"><A class="classname" href="http://www.php.net/manual/kr/reserved.variables.globals.php">$GLOBALS</A></VAR>이 어떻게 모든 유효영역에서 존재하는지 주의하라. 이유는 $GLOBALS이 <A class="link" href="http://www.php.net/manual/kr/language.variables.superglobals.php">슈퍼전역변수</A>이기 때문이다. 아래에 슈퍼전역변수의 파워를 설명하는 예제코드를 보였다: </P><P class="para"></P><DIV class="example"><P><B>Example #3 자동 전역과 영역을 보여주는 예제</B></P><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR /></SPAN><SPAN style="COLOR: #007700">function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">test_global</SPAN><SPAN style="COLOR: #007700">()<BR />{<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #ff8000">//&nbsp;대부분의&nbsp;예약&nbsp;변수는&nbsp;"자동&nbsp;전역"이&nbsp;아니기에,<BR />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;함수&nbsp;내부&nbsp;영역에서&nbsp;사용하려면&nbsp;'global'이&nbsp;필요합니다.<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #007700">global&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$HTTP_POST_VARS</SPAN><SPAN style="COLOR: #007700">;<BR /><BR />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$HTTP_POST_VARS</SPAN><SPAN style="COLOR: #007700">[</SPAN><SPAN style="COLOR: #dd0000">'name'</SPAN><SPAN style="COLOR: #007700">];<BR />&nbsp;&nbsp;&nbsp;&nbsp;<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #ff8000">//&nbsp;자동&nbsp;전역은&nbsp;어떠한&nbsp;영역에서도&nbsp;사용할&nbsp;수&nbsp;있고,<BR />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;'global'이&nbsp;필요하지&nbsp;않습니다.&nbsp;자동&nbsp;전역은<BR />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;PHP&nbsp;4.1.0부터&nbsp;사용할&nbsp;수&nbsp;있고,&nbsp;HTTP_POST_VARS는<BR />&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;배제되었습니다.<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #007700">echo&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$_POST</SPAN><SPAN style="COLOR: #007700">[</SPAN><SPAN style="COLOR: #dd0000">'name'</SPAN><SPAN style="COLOR: #007700">];<BR />}<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P></P></DIV><DIV class="sect2" id="language.variables.scope.static" sizcache="0" sizset="1"><H3 class="title">정적 변수 사용하기</H3><P class="simpara">변수 유효영역의 또 다른 중요한 기능이 <EM class="emphasis">static</EM> 변수이다. 정적(static) 변수는 로컬 함수 영역에서만 존재한다. 그러나 프로그램이 그 영역을 떠나지 않으면 그 값을 잃지 않는다. 다음 예제를 생각해 봅시다: </P><P class="para"></P><DIV class="example"><P><B>Example #4 정적 변수의 필요성을 보여주는 예제</B></P><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR /></SPAN><SPAN style="COLOR: #007700">function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">test</SPAN><SPAN style="COLOR: #007700">()<BR />{<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$a&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">0</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$a</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$a</SPAN><SPAN style="COLOR: #007700">++;<BR />}<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P></P><P class="simpara">이 함수는 매번 호출될때마다 <VAR class="varname">$a</VAR>를 <I>0</I>으로 설정하고 "0"를 출력한다. <VAR class="varname">$a</VAR>++ 는 변수를 증가시키지만 함수에서 빠져나가면 <VAR class="varname">$a</VAR> 변수는 사라지게되므로 아무 가치가 없다. 현재 카운트 값을 잃지 않는 유용한 카운트 함수를 만들려면, <VAR class="varname">$a</VAR> 변수를 static으로 선언한다. </P><P class="para"></P><DIV class="example"><P><B>Example #5 정적 변수의 사용 예제</B></P><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR /></SPAN><SPAN style="COLOR: #007700">function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">test</SPAN><SPAN style="COLOR: #007700">()<BR />{<BR />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$a&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">0</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$a</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$a</SPAN><SPAN style="COLOR: #007700">++;<BR />}<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P></P><P class="simpara">처음 함수를 호출할 때만 <VAR class="varname">$a</VAR>가 초기화 되고, test() 함수가 호출될때마다 <VAR class="varname">$a</VAR> 값을 출력하고 그 값이 증가합니다. </P><P class="simpara">정적 변수는 또한 재귀함수를 다루는 한 방법을 제공한다. 재귀함수는 자기 자신을 호출하는 함수를 말한다. 재귀함수는 무한히 실행될수 있기 때문에 재귀함수를 작성할때는 주의가 필요하다. 재귀를 벗어나는 방법을 반드시 갖고 있어야 한다. 다음과 같은 단순 재귀함수는 10까지 카운트한다. 정적 변수 <VAR class="varname">$count</VAR>는 멈춰야 할 때는 안다. </P><P class="para"></P><DIV class="example"><P><B>Example #6 재귀 함수에서 정적 변수</B></P><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR /></SPAN><SPAN style="COLOR: #007700">function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">test</SPAN><SPAN style="COLOR: #007700">()<BR />{<BR />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$count&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">0</SPAN><SPAN style="COLOR: #007700">;<BR /><BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$count</SPAN><SPAN style="COLOR: #007700">++;<BR />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$count</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(</SPAN><SPAN style="COLOR: #0000bb">$count&nbsp;</SPAN><SPAN style="COLOR: #007700">&lt;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">10</SPAN><SPAN style="COLOR: #007700">)&nbsp;{<BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">test</SPAN><SPAN style="COLOR: #007700">();<BR />&nbsp;&nbsp;&nbsp;&nbsp;}<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$count</SPAN><SPAN style="COLOR: #007700">--;<BR />}<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P></P><BLOCKQUOTE><P><B class="note">Note</B>: 정적 변수는 위 예제처럼 선언해야 합니다. 이 변수에 표현식의 결과를 할당하려 할 경우는 해석 오류를 발생합니다. <BR /></P><DIV class="example"><P><B>Example #7 정적 변수 선언하기</B></P><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR /></SPAN><SPAN style="COLOR: #007700">function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">foo</SPAN><SPAN style="COLOR: #007700">()&nbsp;{<BR />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$int&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">0</SPAN><SPAN style="COLOR: #007700">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #ff8000">//&nbsp;적합<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #007700">static&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$int&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">1</SPAN><SPAN style="COLOR: #007700">+</SPAN><SPAN style="COLOR: #0000bb">2</SPAN><SPAN style="COLOR: #007700">;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #ff8000">//&nbsp;오류&nbsp;(표현식이기에)<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #007700">static&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$int&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">sqrt</SPAN><SPAN style="COLOR: #007700">(</SPAN><SPAN style="COLOR: #0000bb">121</SPAN><SPAN style="COLOR: #007700">);&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #ff8000">//&nbsp;오류&nbsp;(역시&nbsp;표현식이기에)<BR /><BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$int</SPAN><SPAN style="COLOR: #007700">++;<BR />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$int</SPAN><SPAN style="COLOR: #007700">;<BR />}<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P><BR /></P></BLOCKQUOTE></DIV><DIV class="sect2" id="language.variables.scope.references" sizcache="0" sizset="2"><H3 class="title">전역 변수와 정적 변수의 참조</H3><P class="simpara">PHP 4를 작동하는 Zend Engine 1은 <A class="link" href="http://www.php.net/manual/kr/language.variables.scope.php#language.variables.scope.static">static</A>과 <A class="link" href="http://www.php.net/manual/kr/language.variables.scope.php#language.variables.scope.global">global</A>을 <A class="link" href="http://www.php.net/manual/kr/language.references.php"><FONT id="altools-findtxt" style="FONT-WEIGHT: bold; FONT-SIZE: 120%; COLOR: #000000; BACKGROUND-COLOR: #ffff00">참조</FONT></A>를 통한 변수 변경자로 구현합니다. 예를 들어, 실제 전역 변수를 <I>global</I> 키워드를 사용하여 함수 영역 내부로 가져올 경우, 그 전역 변수의 참조를 생성합니다. 이로 인해 다음 예제에서 처럼 원하지 않은 동작을 할 수 있습니다: </P><DIV class="informalexample"><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR /></SPAN><SPAN style="COLOR: #007700">function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">test_global_ref</SPAN><SPAN style="COLOR: #007700">()&nbsp;{<BR />&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;&amp;new&nbsp;</SPAN><SPAN style="COLOR: #0000bb">stdclass</SPAN><SPAN style="COLOR: #007700">;<BR />}<BR /><BR />function&nbsp;</SPAN><SPAN style="COLOR: #0000bb">test_global_noref</SPAN><SPAN style="COLOR: #007700">()&nbsp;{<BR />&nbsp;&nbsp;&nbsp;&nbsp;global&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;new&nbsp;</SPAN><SPAN style="COLOR: #0000bb">stdclass</SPAN><SPAN style="COLOR: #007700">;<BR />}<BR /><BR /></SPAN><SPAN style="COLOR: #0000bb">test_global_ref</SPAN><SPAN style="COLOR: #007700">();<BR /></SPAN><SPAN style="COLOR: #0000bb">var_dump</SPAN><SPAN style="COLOR: #007700">(</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">);<BR /></SPAN><SPAN style="COLOR: #0000bb">test_global_noref</SPAN><SPAN style="COLOR: #007700">();<BR /></SPAN><SPAN style="COLOR: #0000bb">var_dump</SPAN><SPAN style="COLOR: #007700">(</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">);<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P class="simpara">위 예제코드를 실행하면 다음과 같은 결과가 유도된다. </P><DIV class="example-contents screen"><BR />NULL<BR />object(stdClass)(0) {<BR />}<BR /></DIV><P class="simpara">이와 비슷한 동작이 <I>static</I> 절에서도 발생한다. 참조가 정적으로 저장되지 않는것이다: </P><DIV class="informalexample"><DIV class="example-contents programlisting"><DIV class="phpcode"><CODE><SPAN style="COLOR: #000000"><SPAN style="COLOR: #0000bb">&lt;?php<BR /></SPAN><SPAN style="COLOR: #007700">function&nbsp;&amp;</SPAN><SPAN style="COLOR: #0000bb">get_instance_ref</SPAN><SPAN style="COLOR: #007700">()&nbsp;{<BR />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">;<BR /><BR />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</SPAN><SPAN style="COLOR: #dd0000">'Static&nbsp;object:&nbsp;'</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">var_dump</SPAN><SPAN style="COLOR: #007700">(</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">);<BR />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isset(</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">))&nbsp;{<BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #ff8000">//&nbsp;Assign&nbsp;a&nbsp;reference&nbsp;to&nbsp;the&nbsp;static&nbsp;variable<BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;&amp;new&nbsp;</SPAN><SPAN style="COLOR: #0000bb">stdclass</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;}<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">-&gt;</SPAN><SPAN style="COLOR: #0000bb">property</SPAN><SPAN style="COLOR: #007700">++;<BR />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">;<BR />}<BR /><BR />function&nbsp;&amp;</SPAN><SPAN style="COLOR: #0000bb">get_instance_noref</SPAN><SPAN style="COLOR: #007700">()&nbsp;{<BR />&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">;<BR /><BR />&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;</SPAN><SPAN style="COLOR: #dd0000">'Static&nbsp;object:&nbsp;'</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">var_dump</SPAN><SPAN style="COLOR: #007700">(</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">);<BR />&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isset(</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">))&nbsp;{<BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #ff8000">//&nbsp;Assign&nbsp;the&nbsp;object&nbsp;to&nbsp;the&nbsp;static&nbsp;variable<BR />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;new&nbsp;</SPAN><SPAN style="COLOR: #0000bb">stdclass</SPAN><SPAN style="COLOR: #007700">;<BR />&nbsp;&nbsp;&nbsp;&nbsp;}<BR />&nbsp;&nbsp;&nbsp;&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">-&gt;</SPAN><SPAN style="COLOR: #0000bb">property</SPAN><SPAN style="COLOR: #007700">++;<BR />&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;</SPAN><SPAN style="COLOR: #0000bb">$obj</SPAN><SPAN style="COLOR: #007700">;<BR />}<BR /><BR /></SPAN><SPAN style="COLOR: #0000bb">$obj1&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">get_instance_ref</SPAN><SPAN style="COLOR: #007700">();<BR /></SPAN><SPAN style="COLOR: #0000bb">$still_obj1&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">get_instance_ref</SPAN><SPAN style="COLOR: #007700">();<BR />echo&nbsp;</SPAN><SPAN style="COLOR: #dd0000">"\n"</SPAN><SPAN style="COLOR: #007700">;<BR /></SPAN><SPAN style="COLOR: #0000bb">$obj2&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">get_instance_noref</SPAN><SPAN style="COLOR: #007700">();<BR /></SPAN><SPAN style="COLOR: #0000bb">$still_obj2&nbsp;</SPAN><SPAN style="COLOR: #007700">=&nbsp;</SPAN><SPAN style="COLOR: #0000bb">get_instance_noref</SPAN><SPAN style="COLOR: #007700">();<BR /></SPAN><SPAN style="COLOR: #0000bb">?&gt;</SPAN> </SPAN></CODE></DIV></DIV></DIV><P class="simpara">위 예제코드를 실행하면 다음과 같은 결과가 유도된다. </P><DIV class="example-contents screen"><BR />Static object: NULL<BR />Static object: NULL<BR /><BR />Static object: NULL<BR />Static object: object(stdClass)(1) {<BR />["property"]=&gt;<BR />int(1)<BR />}<BR /></DIV><P class="simpara">위 예제 코드는 정적 변수에 대한 참조를 지정할때, <I>&amp;get_instance_ref()</I>함수가 두번째로 호출되는 때에 <EM class="emphasis">기억</EM>되지 않는다는 것을 보여준다. </P></DIV></DIV> </DIV></DIV>

<?php
function test_global_ref() {
    global $obj;
    $obj = &new stdclass;
}

function test_global_noref() {
    global $obj;
    $obj = new stdclass;
}

//var_dump(stdclass);
test_global_ref();
//$obj['aa'] = 'zz';
var_dump($obj);
echo '<BR>';
test_global_ref();
var_dump($obj);

echo '<BR>';
test_global_noref();
var_dump($obj);
echo '<BR>';
test_global_noref();
var_dump($obj);



?> 