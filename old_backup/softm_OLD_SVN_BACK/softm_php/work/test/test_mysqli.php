<DIV class="post-549 post hentry category-php category-sql category-tutorials tag-mysql tag-php tag-prepared-statements tag-security tag-sql" id="post-549"><DIV class="comm_date"><SPAN class="data"><SPAN class="j">28</SPAN><BR /><SPAN class="my">Jul/09</SPAN></SPAN><SPAN class="nr_comm"><A class="nr_comm_spot" href="http://www.ultramegatech.com/blog/2009/07/using-mysql-prepared-statements-in-php/#comments">7</A></SPAN></DIV><H2 cufid="1"><A title="Using MySQL Prepared Statements in PHP" href="http://www.ultramegatech.com/blog/2009/07/using-mysql-prepared-statements-in-php/" rel="bookmark" cufid="2"><SPAN class="cufon cufon-vml" style="WIDTH: 61px; HEIGHT: 24px" alt="Using "><SPAN class="cufon-vml-canvas" style="LEFT: -1px; TOP: 0px; HEIGHT: 24px"><shape style="WIDTH: 81px; HEIGHT: 24px"></shape><shape style="WIDTH: 81px; HEIGHT: 24px"></shape><shape style="WIDTH: 81px; HEIGHT: 24px"></shape><shape style="WIDTH: 81px; HEIGHT: 24px"></shape><shape style="WIDTH: 81px; HEIGHT: 24px"></shape><shape style="WIDTH: 81px; HEIGHT: 24px"></shape></SPAN><SPAN class="cufon-alt">Using </SPAN></SPAN><SPAN class="cufon cufon-vml" style="WIDTH: 74px; HEIGHT: 24px" alt="MySQL "><SPAN class="cufon-vml-canvas" style="LEFT: -1px; TOP: 0px; HEIGHT: 24px"><shape style="WIDTH: 95px; HEIGHT: 24px"></shape><shape style="WIDTH: 95px; HEIGHT: 24px"></shape><shape style="WIDTH: 95px; HEIGHT: 24px"></shape><shape style="WIDTH: 95px; HEIGHT: 24px"></shape><shape style="WIDTH: 95px; HEIGHT: 24px"></shape><shape style="WIDTH: 95px; HEIGHT: 24px"></shape></SPAN><SPAN class="cufon-alt">MySQL </SPAN></SPAN><SPAN class="cufon cufon-vml" style="WIDTH: 95px; HEIGHT: 24px" alt="Prepared "><SPAN class="cufon-vml-canvas" style="LEFT: -1px; TOP: 0px; HEIGHT: 24px"><shape style="WIDTH: 116px; HEIGHT: 24px"></shape><shape style="WIDTH: 116px; HEIGHT: 24px"></shape><shape style="WIDTH: 116px; HEIGHT: 24px"></shape><shape style="WIDTH: 116px; HEIGHT: 24px"></shape><shape style="WIDTH: 116px; HEIGHT: 24px"></shape><shape style="WIDTH: 116px; HEIGHT: 24px"></shape><shape style="WIDTH: 116px; HEIGHT: 24px"></shape><shape style="WIDTH: 116px; HEIGHT: 24px"></shape><shape style="WIDTH: 116px; HEIGHT: 24px"></shape></SPAN><SPAN class="cufon-alt">Prepared </SPAN></SPAN><SPAN class="cufon cufon-vml" style="WIDTH: 117px; HEIGHT: 24px" alt="Statements "><SPAN class="cufon-vml-canvas" style="LEFT: -1px; TOP: 0px; HEIGHT: 24px"><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape><shape style="WIDTH: 137px; HEIGHT: 24px"></shape></SPAN><SPAN class="cufon-alt">Statements </SPAN></SPAN><SPAN class="cufon cufon-vml" style="WIDTH: 23px; HEIGHT: 24px" alt="in "><SPAN class="cufon-vml-canvas" style="LEFT: -1px; TOP: 0px; HEIGHT: 24px"><shape style="WIDTH: 44px; HEIGHT: 24px"></shape><shape style="WIDTH: 44px; HEIGHT: 24px"></shape><shape style="WIDTH: 44px; HEIGHT: 24px"></shape></SPAN><SPAN class="cufon-alt">in </SPAN></SPAN><SPAN class="cufon cufon-vml" style="WIDTH: 42px; HEIGHT: 24px" alt="PHP"><SPAN class="cufon-vml-canvas" style="LEFT: -1px; TOP: 0px; HEIGHT: 24px"><shape style="WIDTH: 54px; HEIGHT: 24px"></shape><shape style="WIDTH: 54px; HEIGHT: 24px"></shape><shape style="WIDTH: 54px; HEIGHT: 24px"></shape></SPAN><SPAN class="cufon-alt">PHP</SPAN><shape></shape></SPAN></A></H2><P style="TEXT-ALIGN: left"></P><!--S-ButtonZ 1.1.5 Start--><DIV style="PADDING-RIGHT: 10px; FLOAT: left; MARGIN: 0px 10px 0px 0px; WIDTH: 42px"><SCRIPT type="text/javascript">  		<!--		digg_url = "http://www.ultramegatech.com/blog/2009/07/using-mysql-prepared-statements-in-php/";		digg_bgcolor = "#FFFFFF";		digg_skin = "";		digg_window = "";		digg_title = "Using MySQL Prepared Statements in PHP";		digg_media = "news";		digg_topic = "";		digg_bodytext = "Prepared statements in MySQL are an alternative to writing raw SQL code to execute. Instead, you write a statement with placeholders (?) where you want variable to go, then attach variables to those placeholders.A prepared statement is basically a template that can be reused with different variables. There are some benefits and drawbacks to prepared...";		//-->		</SCRIPT><SCRIPT src="http://digg.com/tools/diggthis.js" type="text/javascript"> </SCRIPT><IFRAME src="http://digg.com/tools/diggthis.php?u=http%3A//www.ultramegatech.com/blog/2009/07/using-mysql-prepared-statements-in-php/&s=&t=Using%20MySQL%20Prepared%20Statements%20in%20PHP&w=&b=Prepared%20statements%20in%20MySQL%20are%20an%20alternative%20to%20writing%20raw%20SQL%20code%20to%20execute.%20Instead%2C%20you%20write%20a%20statement%20with%20placeholders%20%28%3F%29%20where%20you%20want%20variable%20to%20go%2C%20then%20attach%20variables%20to%20those%20placeholders.A%20prepared%20statement%20is%20basically%20a%20template%20that%20can%20be%20reused%20with%20different%20variables.%20There%20are%20some%20benefits%20and%20drawbacks%20to%20prepared...&m=news&c=&k=%23FFFFFF" frameBorder="0" width="52" scrolling="no" height="80"></IFRAME></DIV><!--S-ButtonZ 1.1.5 End--><P>Prepared statements in MySQL are an alternative to writing raw SQL code to execute. Instead, you write a statement with placeholders (?) where you want variable to go, then attach variables to those placeholders.</P><P>A prepared statement is basically a template that can be reused with different variables. There are some benefits and drawbacks to prepared statements that should be considered:</P><P><STRONG>Pros</STRONG>: </P><UL><LI>Prevents SQL injection without needing to escape data </LI><LI>Allows you to repeat the same statement without the overhead of parsing the SQL </LI><LI>Allows you to send raw binary data in packets </LI><LI>Creates code that is easier to read by separating SQL logic from data </LI></UL><P><STRONG>Cons</STRONG>: </P><UL><LI>Slower for one time queries since it requires two requests from the MySQL server </LI><LI>Does not work for ALL queries (only data manipulation queries) </LI><LI>Placeholders can only be used for values and not table/column names </LI></UL><P><STRONG>Conclusion</STRONG>: I'd say prepared statements win due to security benefits alone</P><P>PHP supports MySQL prepared statements using the Mysqli (MySQL Improved) extension in PHP 5 via the MySQLi_STMT class. They are fairly easy to use once you get used to the differences from writing raw SQL statements. This tutorial will explain how to use prepared statements.<SPAN id="more-549"></SPAN></P><H3>Inserting Data</H3><P>First, we need a valid database connection...</P><DIV class="wp_syntax" style="PADDING-BOTTOM: 0px"><DIV class="code"><PRE class="php" style="FONT-FAMILY: monospace"><SPAN style="FONT-WEIGHT: bold; COLOR: #000000">&lt;?php</SPAN><SPAN style="COLOR: #666666; FONT-STYLE: italic">// Create Mysqli object</SPAN><SPAN style="COLOR: #000088">$db</SPAN> <SPAN style="COLOR: #339933">=</SPAN> <SPAN style="FONT-WEIGHT: bold; COLOR: #000000">new</SPAN> mysqli<SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #0000ff">'localhost'</SPAN><SPAN style="COLOR: #339933">,</SPAN> <SPAN style="COLOR: #0000ff">'username'</SPAN><SPAN style="COLOR: #339933">,</SPAN> <SPAN style="COLOR: #0000ff">'password'</SPAN><SPAN style="COLOR: #339933">,</SPAN> <SPAN style="COLOR: #0000ff">'database'</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN></PRE></DIV></DIV><P>Now we create a new statement object using the <A href="http://www.php.net/manual/mysqli.stmt-init.php" target="_blank" jQuery1267601428828="2">mysqli:: stmt_init()</A> method.</P><DIV class="wp_syntax" style="PADDING-BOTTOM: 0px"><DIV class="code"><PRE class="php" style="FONT-FAMILY: monospace"><SPAN style="COLOR: #666666; FONT-STYLE: italic">// Create statement object</SPAN><SPAN style="COLOR: #000088">$stmt</SPAN> <SPAN style="COLOR: #339933">=</SPAN> <SPAN style="COLOR: #000088">$db</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">stmt_init</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN></PRE></DIV></DIV><P>We use the <A href="http://www.php.net/manual/mysqli-stmt.prepare.php" target="_blank" jQuery1267601428828="3">mysqli_stmt::prepare()</A> method to prepare a statement. Put a <STRONG>?</STRONG> where values should be placed.</P><DIV class="wp_syntax" style="PADDING-BOTTOM: 15px"><DIV class="code"><PRE class="php" style="FONT-FAMILY: monospace"><SPAN style="COLOR: #666666; FONT-STYLE: italic">// Create a prepared statement</SPAN><SPAN style="COLOR: #b1b100">if</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">prepare</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #0000ff">"INSERT INTO `table` (`name`, `age`, `bio`) VALUES (?, ?, ?)"</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #009900">)</SPAN> <SPAN style="COLOR: #009900">{</SPAN></PRE></DIV></DIV><P>Now this is where we select the variables to put in place of the <STRONG>?</STRONG>'s using the <A href="http://www.php.net/manual/mysqli-stmt.bind-param.php" target="_blank" jQuery1267601428828="4">mysqli_stmt::bind_param()</A> method. The first parameter is a string made up of <STRONG>i</STRONG> (integer), <STRONG>d</STRONG> (double), <STRONG>s</STRONG> (string), and <STRONG>b</STRONG> (binary data). Each character corresponds to the variable in the same position. Any parameters following that are the variables to use. In this case we use "sis" since <CODE>$name</CODE> is a <STRONG>s</STRONG>tring, <CODE>$age</CODE> is an <STRONG>i</STRONG>nteger, and <CODE>$bio</CODE> is a <STRONG>s</STRONG>tring.</P><DIV class="wp_syntax" style="PADDING-BOTTOM: 0px"><DIV class="code"><PRE class="php" style="FONT-FAMILY: monospace">    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Bind your variables to replace the ?s</SPAN>    <SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">bind_param</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #0000ff">'sis'</SPAN><SPAN style="COLOR: #339933">,</SPAN> <SPAN style="COLOR: #000088">$name</SPAN><SPAN style="COLOR: #339933">,</SPAN> <SPAN style="COLOR: #000088">$age</SPAN><SPAN style="COLOR: #339933">,</SPAN> <SPAN style="COLOR: #000088">$bio</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN>&nbsp;    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Set your variables</SPAN>    <SPAN style="COLOR: #000088">$name</SPAN> <SPAN style="COLOR: #339933">=</SPAN> <SPAN style="COLOR: #0000ff">'John Doe'</SPAN><SPAN style="COLOR: #339933">;</SPAN>    <SPAN style="COLOR: #000088">$age</SPAN> <SPAN style="COLOR: #339933">=</SPAN> <SPAN style="COLOR: #cc66cc">32</SPAN><SPAN style="COLOR: #339933">;</SPAN>    <SPAN style="COLOR: #000088">$bio</SPAN> <SPAN style="COLOR: #339933">=</SPAN> <SPAN style="COLOR: #0000ff">'Unknown...'</SPAN><SPAN style="COLOR: #339933">;</SPAN></PRE></DIV></DIV><P>Finally, we execute the statement with the current values of the variables. We can run the <A href="http://www.php.net/manual/mysqli-stmt.execute.php" target="_blank" jQuery1267601428828="5">mysqli_stmt::execute()</A> method in a loop, changing the variables as needed, to run the same statement. When we are done with the statement, use the <A href="http://www.php.net/manual/mysqli-stmt.close.php" target="_blank" jQuery1267601428828="6">mysqli_stmt::close()</A> method to discard it and free resources.</P><DIV class="wp_syntax" style="PADDING-BOTTOM: 0px"><DIV class="code"><PRE class="php" style="FONT-FAMILY: monospace">    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Execute query</SPAN>    <SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">execute</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN>&nbsp;    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Close statement object</SPAN>    <SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">close</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN><SPAN style="COLOR: #009900">}</SPAN></PRE></DIV></DIV><H3>Fetching Data</H3><P>Now we will use a prepared statement to fetch data from the database. Much of the process is the same, so I'll only explain the differences.</P><DIV class="wp_syntax" style="PADDING-BOTTOM: 0px"><DIV class="code"><PRE class="php" style="FONT-FAMILY: monospace"><SPAN style="COLOR: #666666; FONT-STYLE: italic">// Create statement object</SPAN><SPAN style="COLOR: #000088">$stmt</SPAN> <SPAN style="COLOR: #339933">=</SPAN> <SPAN style="COLOR: #000088">$db</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">stmt_init</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN>&nbsp;<SPAN style="COLOR: #666666; FONT-STYLE: italic">// Create a prepared statement</SPAN><SPAN style="COLOR: #b1b100">if</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">prepare</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #0000ff">"SELECT `name`, `bio` FROM `table` WHERE `age` = ?"</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #009900">)</SPAN> <SPAN style="COLOR: #009900">{</SPAN>&nbsp;    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Bind your variable to replace the ?</SPAN>    <SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">bind_param</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #0000ff">'i'</SPAN><SPAN style="COLOR: #339933">,</SPAN> <SPAN style="COLOR: #000088">$age</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN>&nbsp;    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Set your variable	</SPAN>    <SPAN style="COLOR: #000088">$age</SPAN> <SPAN style="COLOR: #339933">=</SPAN> <SPAN style="COLOR: #cc66cc">32</SPAN><SPAN style="COLOR: #339933">;</SPAN>&nbsp;    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Execute query</SPAN>    <SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">execute</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN></PRE></DIV></DIV><P>Once we prepare and execute the statement, we need to receive the data. Here, we use the <A href="http://www.php.net/manual/mysqli-stmt.bind-result.php" target="_blank" jQuery1267601428828="7">mysqli_stmt::bind_result()</A> method to specify variables to store each column's data.</P><DIV class="wp_syntax" style="PADDING-BOTTOM: 0px"><DIV class="code"><PRE class="php" style="FONT-FAMILY: monospace">    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Bind your result columns to variables</SPAN>    <SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">bind_result</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #000088">$name</SPAN><SPAN style="COLOR: #339933">,</SPAN> <SPAN style="COLOR: #000088">$bio</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN></PRE></DIV></DIV><P>Now we fetch each row in a while loop using the <A href="http://www.php.net/manual/mysqli-stmt.fetch.php" target="_blank" jQuery1267601428828="8">mysqli_stmt::fetch()</A> method, which populates the bound variables for one row of result data.</P><DIV class="wp_syntax" style="PADDING-BOTTOM: 0px"><DIV class="code"><PRE class="php" style="FONT-FAMILY: monospace">    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Fetch the result of the query</SPAN>    <SPAN style="COLOR: #b1b100">while</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">fetch</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #009900">)</SPAN> <SPAN style="COLOR: #009900">{</SPAN>        <SPAN style="COLOR: #b1b100">echo</SPAN> <SPAN style="COLOR: #000088">$name</SPAN> <SPAN style="COLOR: #339933">.</SPAN> <SPAN style="COLOR: #0000ff">' - '</SPAN> <SPAN style="COLOR: #339933">.</SPAN> <SPAN style="COLOR: #000088">$bio</SPAN><SPAN style="COLOR: #339933">;</SPAN> <SPAN style="COLOR: #666666; FONT-STYLE: italic">// John Doe - Unknown...</SPAN>    <SPAN style="COLOR: #009900">}</SPAN>&nbsp;    <SPAN style="COLOR: #666666; FONT-STYLE: italic">// Close statement object</SPAN>   <SPAN style="COLOR: #000088">$stmt</SPAN><SPAN style="COLOR: #339933">-&gt;</SPAN><SPAN style="COLOR: #004000">close</SPAN><SPAN style="COLOR: #009900">(</SPAN><SPAN style="COLOR: #009900">)</SPAN><SPAN style="COLOR: #339933">;</SPAN><SPAN style="COLOR: #009900">}</SPAN><SPAN style="FONT-WEIGHT: bold; COLOR: #000000">?&gt;</SPAN></PRE></DIV></DIV><H3>Conclusion</H3><P>This was just a basic overview of prepared statements in PHP. If you have experience with MySQL in PHP, this should give you enough to replace your regular queries with prepared statements.<BR /></P><H3>Similar Posts:</H3><UL class="similar-posts"><LI><A title="August 26, 2009" href="http://www.ultramegatech.com/blog/2009/08/5-basic-php-security-tips/" rel="bookmark">5 Basic PHP Security Tips</A> </LI><LI><A title="June 16, 2009" href="http://www.ultramegatech.com/blog/2009/06/5-tips-for-writing-cleaner-php-code/" rel="bookmark">5 Tips for Writing Cleaner PHP Code</A> </LI><LI><A title="March 27, 2009" href="http://www.ultramegatech.com/blog/2009/03/creating-a-tinyurl-clone/" rel="bookmark">Creating a TinyURL Clone</A> </LI></UL><P><!-- Similar Posts took 7.440 ms --></P><DIV style="CLEAR: both">&nbsp;</DIV><P style="TEXT-ALIGN: center"></P><DIV class="promote clear"><H3>Enjoy this article?</H3><P><A href="http://www.ultramegatech.com/blog/feed/">Consider subscribing to our rss feed!</A></P></DIV><DIV class="about_author clear"><DIV class="alignleft"><IMG class="avatar avatar-28 photo" height="32" alt="" src="http://www.gravatar.com/avatar/daa0f7dbd585e6fc879c3176078db536?s=28&d=http%3A%2F%2Fwww.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D28&r=PG" width="32" /></DIV><DIV class="alignleft" style="WIDTH: 470px"><H4>Author: <A href="http://www.ultramegatech.com/">Steve</A></H4>Steve is the owner of UlraMega Tech. He is a freelance Web designer and developer who specializes in PHP and AJAX development.</DIV><DIV class="clear"></DIV></DIV><DIV class="cat_tags clear"><DIV class="category">Tagged as: <A href="http://www.ultramegatech.com/blog/tag/mysql/" rel="tag">MySQL</A>, <A href="http://www.ultramegatech.com/blog/tag/php/" rel="tag">PHP</A>, <A href="http://www.ultramegatech.com/blog/tag/prepared-statements/" rel="tag">prepared statements</A>, <A href="http://www.ultramegatech.com/blog/tag/security/" rel="tag">security</A>, <A href="http://www.ultramegatech.com/blog/tag/sql/" rel="tag">SQL</A></DIV><DIV class="continue"><A class="nr_comm_spot" href="http://www.ultramegatech.com/blog/2009/07/using-mysql-prepared-statements-in-php/#respond">7 Comments</A></DIV><DIV class="clear"></DIV></DIV><DIV class="cat_tags_close"></DIV></DIV> </DIV></DIV></DIV></