<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" creationComplete="onLoad()">
<mx:Script>
	<![CDATA[
        import mx.controls.Alert;
    	import flash.events.*;
    	import flash.external.ExternalInterface;
    import flash.text.TextField;
    import flash.utils.Timer;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
        import mx.core.UIComponent;    
		private var so:SharedObject;
        private var input:TextField;
        private var output:TextField;
        private var sendBtn:Sprite;
    
		private function onLoad():void {
			
            input = new TextField();
            input.type = TextFieldType.INPUT;
            input.background = true;
            input.border = true;
            input.width = 350;
            input.height = 18;
          	var ref : UIComponent = new UIComponent();
          	addChild( ref );
          	ref.addChild( input );

				
            sendBtn = new Sprite();
            sendBtn.mouseEnabled = true;
            sendBtn.x = input.width + 10;
            sendBtn.graphics.beginFill(0xCCCCCC);
            sendBtn.graphics.drawRoundRect(0, 0, 80, 18, 10, 10);
            sendBtn.graphics.endFill();
            sendBtn.addEventListener(MouseEvent.CLICK, clickHandler);
            ref.addChild(sendBtn);

            output = new TextField();
            output.y = 25;
            output.width = 450;
            output.height = 325;
            output.multiline = true;
            output.wordWrap  = true;
            output.border    = true;
            output.text = "Initializing...\n";
            ref.addChild(output);
            
            ExternalInterface.addCallback("checkLoad", checkLoadFromJavaScript);            
            ExternalInterface.addCallback("installEnd", installEndFromJavaScript);
            try {
                output.appendText("Adding callback...\n");
                ExternalInterface.addCallback("sendToActionScript", receivedFromJavaScript);
                if (checkJavaScriptReady()) {
                    output.appendText("JavaScript is ready.\n");
                } else {
                    output.appendText("JavaScript is not ready, creating timer.\n");
                    var readyTimer:Timer = new Timer(100, 0);
                    readyTimer.addEventListener(TimerEvent.TIMER, timerHandler);
                    readyTimer.start();
                }
            } catch (error:SecurityError) {
                output.appendText("A SecurityError occurred: " + error.message + "\n");
            } catch (error:Error) {
                output.appendText("An Error occurred: " + error.message + "\n");
            }
            
			so = SharedObject.getLocal("mbcSo",null,false);
			if(so.data.installed == undefined) { // 다운로드
                if (ExternalInterface.available) 
                {
                    ExternalInterface.call("fInstall", "");
            		output.appendText("call javascript fInstall...\n");                    
                }
				
			} else {                            // 실행
                if (ExternalInterface.available) 
                {
                    ExternalInterface.call("fExecute", "");
            		output.appendText("call javascript fExecute...\n");                   
                }
			}
			
	         var installEnd:String = Application.application.parameters.installEnd;
			 if ( installEnd == "Y" ) {
				createSo();
            	output.appendText("End install : Create SharedObject install ...\n");				
			 } 
		}
		
        private function checkLoadFromJavaScript(value:String):void{
  		}
  		
        private function installEndFromJavaScript(value:String):void{
			//so = SharedObject.getLocal("mbcSo");
			//so.clear();
			//so = SharedObject.getLocal("mbcSo");
			createSo();
			if(so.data.installed == undefined) {
				//createSo();		
				Alert.show("설치가 완료되어 install변수 저장." + value);
                if (ExternalInterface.available) 
                {
                    ExternalInterface.call("fEndInstall", "");
                }			
			} else {
		
			}        	
            Alert.show("javascript call installEnd");
  		}
  		
        private function receivedFromJavaScript(value:String):void {
            output.appendText("JavaScript says: " + value + "\n");
        }
        private function checkJavaScriptReady():Boolean {
            var isReady:Boolean = ExternalInterface.call("isReady");
            return isReady;
        }
        private function timerHandler(event:TimerEvent):void {
            output.appendText("Checking JavaScript status...\n");
            var isReady:Boolean = checkJavaScriptReady();
            if (isReady) {
                output.appendText("JavaScript is ready.\n");
                Timer(event.target).stop();
            }
        }
        
        private function clickHandler(event:MouseEvent):void {
            if (ExternalInterface.available) {
                ExternalInterface.call("sendToJavaScript", input.text);
            }
        }
          		
		private function createSo():void
		{
			setSo("installed","install");
			so.flush();
		}
		
		private function setSo(key:String, data:*):void
		{
			so.data[key] = data;
		}
	]]>
</mx:Script>
</mx:Application>
