From: <Windows Internet Explorer 8ÀÌ ÀúÀå>
Subject: Jersey 1.4 User Guide
Date: Mon, 13 Dec 2010 16:29:59 +0900
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0000_01CB9AE2.FC53AE20"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.5994

This is a multi-part message in MIME format.

------=_NextPart_000_0000_01CB9AE2.FC53AE20
Content-Type: text/html;
	charset="iso-8859-1"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://jersey.java.net/nonav/documentation/latest/user-guide.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Jersey 1.4 User Guide</TITLE>
<META content=3D"text/html; charset=3DISO-8859-1" =
http-equiv=3DContent-Type><LINK=20
rel=3Dstylesheet type=3Dtext/css=20
href=3D"https://jersey.dev.java.net/documentation.css">
<META name=3DGENERATOR content=3D"MSHTML 8.00.6001.18975">
<SCRIPT type=3Dtext/javascript =
xmlns:fo=3D"http://www.w3.org/1999/XSL/Format">=0A=
=0A=
  var _gaq =3D _gaq || [];=0A=
  _gaq.push(['_setAccount', 'UA-3160303-1']);=0A=
  _gaq.push(['_trackPageview']);=0A=
=0A=
  (function() {=0A=
    var ga =3D document.createElement('script'); ga.type =3D =
'text/javascript'; ga.async =3D true;=0A=
    ga.src =3D ('https:' =3D=3D document.location.protocol ? =
'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';=0A=
    var s =3D document.getElementsByTagName('script')[0]; =
s.parentNode.insertBefore(ga, s);=0A=
  })();=0A=
=0A=
</SCRIPT>
</HEAD>
<BODY aLink=3D#0000ff link=3D#0000ff bgColor=3Dwhite text=3Dblack =
vLink=3D#840084>
<DIV style=3D"FLOAT: right" =
xmlns:fo=3D"http://www.w3.org/1999/XSL/Format"><A=20
href=3D"https://jersey.dev.java.net/"><IMG=20
src=3D"https://jersey.dev.java.net/images/Jersey_yellow.png"></A></DIV><S=
MALL=20
xmlns:fo=3D"http://www.w3.org/1999/XSL/Format">Links: <A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/index.html">Tab=
le of=20
Contents</A> | <A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
">Single=20
HTML</A></SMALL>
<DIV lang=3Den class=3Dbook>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H1 class=3Dtitle><A name=3Dd0e2></A>Jersey 1.4 User =
Guide</H1></DIV></DIV>
<HR>
</DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dpreface><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#preface">Preface</A></SPAN>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#getting-started">1.=20
  Getting Started</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e105">1.1.=20
    Creating a root resource</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e119">1.2.=20
    Deploying the root resource</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e151">1.3.=20
    Testing the root resource</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#getting.started.created">1.4.=20
    Here's one Paul created earlier</A></SPAN></DT></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#jax-rs">2.=20
  Overview of JAX-RS 1.1</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e196">2.1.=20
    Root Resource Classes</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e233">http://jersey.java.net/nonav/documentation/latest/user-guide.htm=
l#d0e233</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e288">2.1.2.=20
      HTTP Methods</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e322">http://jersey.java.net/nonav/documentation/latest/user-guide.htm=
l#d0e322</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e393">http://jersey.java.net/nonav/documentation/latest/user-guide.htm=
l#d0e393</A></SPAN></DT></DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e416">2.2.=20
    Deploying a RESTful Web Service</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e494">2.3.=20
    Extracting Request Parameters</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e660">2.4.=20
    Representations and Java Types</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e737">2.5.=20
    Building Responses</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e770">2.6.=20
    Sub-resources</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e840">2.7.=20
    Building URIs</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e900">2.8.=20
    WebApplicationException and Mapping Exceptions to =
Responses</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e964">2.9.=20
    Conditional GETs and Returning 304 (Not Modified) =
Responses</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1004">2.10.=20
    Life-cycle of Root Resource Classes</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1021">2.11.=20
    Security</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1047">2.12.=20
    Rules of Injection</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1070">http://jersey.java.net/nonav/documentation/latest/user-guide.ht=
ml#d0e1070</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1101">2.14.=20
    Annotations Defined By JAX-RS</A></SPAN></DT></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#client-api">3.=20
  Client API</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1113">3.1.=20
    Introduction</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1137">3.2.=20
    Uniform Interface Constraint</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1182">3.3.=20
    Ease of use and reusing JAX-RS artifacts</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1267">3.4.=20
    Getting started with the Jersey client</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1288">3.5.=20
    Overview of the API</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1299">3.5.1.=20
      Configuring a Client and WebResource</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1355">3.5.2.=20
      Building a request</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1412">3.5.3.=20
      Receiving a response</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1440">3.5.4.=20
      Creating new WebResources from a WebResource</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1454">3.5.5.=20
      Java instances and types for representations</A></SPAN></DT></DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1481">3.6.=20
    Adding support for new representations</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1511">3.7.=20
    Using filters</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1605">3.7.1.=20
      Supported filters</A></SPAN></DT></DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1649">3.8.=20
    Testing services</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1698">3.9.=20
    Security with Http(s)URLConnection</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1701">3.9.1.=20
      With Http(s)URLConnection</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1743">3.9.2.=20
      With Apache HTTP client</A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#xml">4.=20
  XML Support</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1766">4.1.=20
    Low level XML support</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1799">4.2.=20
    Getting started with JAXB</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1866">4.3.=20
    POJOs</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1901">4.4.=20
    Using custom JAXBContext</A></SPAN></DT></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json">5.=20
  JSON Support</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1959">5.1.=20
    POJO support</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1981">5.2.=20
    JAXB Based JSON support</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2014">5.2.1.=20
      Configuration Options</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2055">5.2.2.=20
      JSON Notations</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2463">5.2.3.=20
      Examples</A></SPAN></DT></DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2474">5.3.=20
    Low-Level JSON support</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2503">5.3.1.=20
      Examples</A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#linking">6.=20
  Declarative Hyperlinking</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2522">6.1.=20
    Links in Representations</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2555">6.2.=20
    Binding Template Parameters</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2623">6.3.=20
    Conditional Link Injection</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2644">6.4.=20
    Link Headers</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2678">6.5.=20
    Configuration</A></SPAN></DT></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#test-framework">7.=20
  Jersey Test Framework</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2728">7.1.=20
    What is different in Jersey 1.2</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2766">7.2.=20
    Using test framework</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2837">7.3.=20
    Creating tests</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2854">7.4.=20
    Creating own module</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2882">7.5.=20
    Running tests outside Maven</A></SPAN></DT></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#osgi">8.=20
  OSGi</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2968">8.1.=20
    Feature Overview</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3018">8.2.=20
    WAB Example</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3046">8.3.=20
    Http Service Example</A></SPAN></DT></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#jrebel">9.=20
  JRebel support</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3079">9.1.=20
    How to use JRebel with Jersey</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3090">9.2.=20
    Using JRebel with the hello world sample</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3127">9.3.=20
    Limitations</A></SPAN></DT></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#experimental">10.=20
  Experimental Features</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#hypermedia">10.1.=20
    Hypermedia Actions</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3147">10.1.1.=20
      Introduction</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3191">10.1.2.=20
      Hypermedia by Example</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3255">10.1.3.=20
      Server API</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3356">10.1.4.=20
      Client API</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3494">10.1.5.=20
      Server Evolution</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3519">10.1.6.=20
      Configuring Hypermedia in Jersey</A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#chapter_deps">11.=20
  Dependencies</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#core_server">11.1.=20
    Core server</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#core_client">11.2.=20
    Core client</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3722">11.3.=20
    Container</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3725">11.3.1.=20
      Grizzly HTTP Web server</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3737">11.3.2.=20
      Simple HTTP Web server</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3745">11.3.3.=20
      Light weight HTTP server</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3750">11.3.4.=20
      Servlet</A></SPAN></DT></DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3777">11.4.=20
    Entity</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3780">11.4.1.=20
      JAXB</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3873">11.4.2.=20
      Atom</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3919">11.4.3.=20
      JSON</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3947">11.4.4.=20
      Mail and MIME multipart</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3987">11.4.5.=20
      Activation</A></SPAN></DT></DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3995">11.5.=20
    Tools</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4002">11.6.=20
    Spring</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4017">11.7.=20
    Guice</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4055">11.8.=20
    Jersey Test Framework</A></SPAN></DT></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#glassfish">12.=20
  Jersey with GlassFish</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4142">12.1.=20
    Overriding Jersey with war files</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4157">12.2.=20
    Upgrading Jersey in GlassFish</A></SPAN>
    <DD>
    <DL>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4160">12.2.1.=20
      GlassFish v3.0 and 3.0.1</A></SPAN>
      <DT><SPAN class=3Dsection><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4204">12.2.2.=20
      GlassFish v3.1</A></SPAN></DT></DL></DD></DL>
  <DT><SPAN class=3Dchapter><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#how-to-build">13.=20
  Building and testing Jersey</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4266">13.1.=20
    Checking out the source</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4302">13.2.=20
    Building using Maven</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4331">13.3.=20
    Testing</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4344">13.4.=20
    Continuous building and testing with Hudson</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4352">13.5.=20
    Using NetBeans</A></SPAN></DT></DL></DD></DL></DIV>
<DIV class=3Dlist-of-tables>
<P><B>List of Tables</B></P>
<DL>
  <DT>7.1. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2740">Property=20
  name changes</A></DT></DL></DIV>
<DIV class=3Dlist-of-examples>
<P><B>List of Examples</B></P>
<DL>
  <DT>2.1. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e227">Simple=20
  hello world root resource class</A>
  <DT>2.2. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e267">Specifying=20
  URI path parameter</A>
  <DT>2.3. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e313">PUT=20
  method</A>
  <DT>2.4. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e335">Specifying=20
  output MIME type</A>
  <DT>2.5. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e379">Using=20
  multiple output MIME types</A>
  <DT>2.6. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e402">Specifying=20
  input MIME type</A>
  <DT>2.7. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e425">Deployment=20
  agnostic application model</A>
  <DT>2.8. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e435">Reusing=20
  Jersey implementation in your custom application model</A>
  <DT>2.9. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e452">Deployment=20
  of your application using <CODE class=3Dliteral>web.xml</CODE> with =
Servlet=20
  3.0</A>
  <DT>2.10. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e466">Deployment=20
  of your application using Jersey specific servlet</A>
  <DT>2.11. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e473">Using=20
  Jersey specific servlet without an application model instance</A>
  <DT>2.12. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e509">Query=20
  parameters</A>
  <DT>2.13. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e522">Custom=20
  Java type for consuming request parameters</A>
  <DT>2.14. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e628">Processing=20
  POSTed HTML form</A>
  <DT>2.15. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e636">Obtaining=20
  general map of URI path and/or query parameters</A>
  <DT>2.16. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e644">Obtaining=20
  general map of header parameters</A>
  <DT>2.17. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e655">Obtaining=20
  general map of form parameters</A>
  <DT>2.18. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e705">Using=20
  <CODE class=3Dcode>File</CODE> with a specific MIME type to produce a=20
  response</A>
  <DT>2.19. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e727">The=20
  most acceptable MIME type is used when multiple output MIME types =
allowed</A>
  <DT>2.20. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e752">Returning=20
  201 status code and adding <CODE class=3Dliteral>Location</CODE> =
header in=20
  response to POST request</A>
  <DT>2.21. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e763">Adding=20
  an entity body to a custom response</A>
  <DT>2.22. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e789">Sub-resource=20
  methods</A>
  <DT>2.23. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e820">Sub-resource=20
  locators</A>
  <DT>2.24. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e866">URI=20
  building</A>
  <DT>2.25. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e895">Building=20
  URIs using query parameters</A>
  <DT>2.26. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e911">Throwing=20
  Jersey specific exceptions to control response</A>
  <DT>2.27. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e922">Jersey=20
  specific exception implementation</A>
  <DT>2.28. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e942">Mapping=20
  generic exceptions to responses</A>
  <DT>2.29. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e977">Conditional=20
  GET support</A>
  <DT>2.30. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1040">Accessing=20
  <CODE class=3Dcode>SecurityContext</CODE></A>
  <DT>2.31. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1055">Injection</A>
  <DT>3.1. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1235">POST=20
  request with form parameters</A>
  <DT>4.1. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1783">Low=20
  level XML test - methods added to HelloWorldResource.java</A>
  <DT>4.2. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1812">Planet=20
  class</A>
  <DT>4.3. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1817">Resource=20
  class</A>
  <DT>4.4. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1849">Method=20
  for consuming Planet</A>
  <DT>4.5. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1880">Resource=20
  class - JAXBElement</A>
  <DT>4.6. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1896">Client=20
  side - JAXBElement</A>
  <DT>4.7. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1912">PlanetJAXBContextProvider</A>
  <DT>4.8. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1925">Using=20
  Provider with Jersey client</A>
  <DT>5.1. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1975">POJO=20
  JSON support web.xml configuration</A>
  <DT>5.2. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1990">Simple=20
  JAXB bean implementation</A>
  <DT>5.3. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1996">JAXB=20
  bean used to generate JSON representation</A>
  <DT>5.4. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2022">Tweaking=20
  JSON format using JAXB</A>
  <DT>5.5. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.context.resolver.example">An=20
  example of a JAXBContext resolver implementation</A>
  <DT>5.6. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2076">JAXB=20
  beans for JSON supported notations description, simple address =
bean</A>
  <DT>5.7. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2082">JAXB=20
  beans for JSON supported notations description, contact bean</A>
  <DT>5.8. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.bean.init.example">JAXB=20
  beans for JSON supported notations description, initialization</A>
  <DT>5.9. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2133">JSON=20
  expression produced using <CODE class=3Dliteral>mapped</CODE> =
notation</A>
  <DT>5.10. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2168">Force=20
  arrays in <CODE class=3Dliteral>mapped</CODE> JSON notation</A>
  <DT>5.11. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2197">Force=20
  non-string values in <CODE class=3Dliteral>mapped</CODE> JSON =
notation</A>
  <DT>5.12. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2232">XML=20
  attributes as XML elements in <CODE class=3Dliteral>mapped</CODE> JSON =

  notation</A>
  <DT>5.13. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.mapped.root.unwrapping">Keep=20
  XML root tag equivalent in JSON <CODE class=3Dliteral>mapped</CODE> =
JSON=20
  notation</A>
  <DT>5.14. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2261">XML=20
  root tag equivalent kept in JSON using <CODE =
class=3Dliteral>mapped</CODE>=20
  notation</A>
  <DT>5.15. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2285">XML=20
  namespace to JSON mapping configuration for <CODE =
class=3Dliteral>mapped</CODE>=20
  notation</A>
  <DT>5.16. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2339">JSON=20
  expression produced using <CODE class=3Dliteral>natural</CODE> =
notation</A>
  <DT>5.17. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.natural.root.unwrapping">Keep=20
  XML root tag equivalent in JSON <CODE class=3Dliteral>natural</CODE> =
JSON=20
  notation</A>
  <DT>5.18. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2395">JSON=20
  expression produced using Jettison based <CODE =
class=3Dliteral>mapped</CODE>=20
  notation</A>
  <DT>5.19. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.jettison.mapped.ns.def">XML=20
  namespace to JSON mapping configuration for Jettison based <CODE=20
  class=3Dliteral>mapped</CODE> notation</A>
  <DT>5.20. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2424">JSON=20
  expression with XML namespaces mapped into JSON</A>
  <DT>5.21. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2454">JSON=20
  expression produced using <CODE class=3Dliteral>badgerfish</CODE> =
notation</A>
  <DT>5.22. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2486">JAXB=20
  bean creation</A>
  <DT>5.23. <A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2497">Constructing=20
  a JSONObject</A></DT></DL></DIV>
<DIV lang=3Den class=3Dpreface>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A name=3Dpreface></A>Preface</H2></DIV></DIV></DIV>
<P>The user guide is not complete (see the JavaDoc API for all details) =
and will=20
be added to on a continual basis. If you want to contribute to the guide =
please=20
email <A href=3D"mailto:users@jersey.dev.java.net" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">users@jersey.dev.java.net</A=
>.=20
</P></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A =
name=3Dgetting-started></A>Chapter&nbsp;1.&nbsp;Getting=20
Started</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e105">1.1.=20
  Creating a root resource</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e119">1.2.=20
  Deploying the root resource</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e151">1.3.=20
  Testing the root resource</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#getting.started.created">1.4.=20
  Here's one Paul created earlier</A></SPAN></DT></DL></DIV>
<P>This chapter will present how to get started with Jersey using the =
embedded=20
Grizzly server. The last section of this chapter presents a reference to =

equivalent functionality for getting started with a Web application.</P>
<P>First, it is necessary to depend on the correct Jersey artifacts as =
described=20
in <A title=3DChapter&nbsp;11.&nbsp;Dependencies=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#chapter_deps">Chapter&nbsp;11,=20
<I xmlns:xlink=3D"http://www.w3.org/1999/xlink">Dependencies</I></A> =
</P>
<P>Maven developers require a dependency on </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>the <A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-server/1.4=
/jersey-server-1.4.pom"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-server</A>=20
  module,=20
  <LI>the <A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-servlet-=
webserver/1.9.18-i/grizzly-servlet-webserver-1.9.18-i.pom"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-servlet-webserver</A=
>=20
  module=20
  <LI>and optionally for WADL support if using Java SE 5 the <A=20
  =
href=3D"http://download.java.net/maven/1/com.sun.xml.bind/poms/jaxb-impl-=
2.1.12.pom"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jaxb-impl</A>=20
  module</LI></UL></DIV>
<P></P>
<P>The following dependencies need to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-server&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.grizzly&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;grizzly-servlet-webserver&lt;<S=
PAN class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.9.18-i&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>And the following repositories need to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>repository</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>id</SPAN>&gt;maven2-repository.dev.java.net&lt;<SPAN=
 class=3DReservedWord>/id</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>name</SPAN>&gt;Java.net Repository =
for Maven&lt;<SPAN class=3DReservedWord>/name</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>url</SPAN>&gt;http://download.java.net/maven/2/&lt;<=
SPAN class=3DReservedWord>/url</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>layout</SPAN>&gt;default&lt;<SPAN =
class=3DReservedWord>/layout</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/repository</SPAN>&gt;=20
&lt;<SPAN class=3DReservedWord>repository</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>id</SPAN>&gt;maven-repository.dev.java.net&lt;<SPAN =
class=3DReservedWord>/id</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>name</SPAN>&gt;Java.net Maven 1 =
Repository (legacy)&lt;<SPAN class=3DReservedWord>/name</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>url</SPAN>&gt;http://download.java.net/maven/1&lt;<S=
PAN class=3DReservedWord>/url</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>layout</SPAN>&gt;legacy&lt;<SPAN =
class=3DReservedWord>/layout</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/repository</SPAN>&gt;</PRE>
<P>Non-maven developers require: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-servlet-=
webserver/1.9.18-i/grizzly-servlet-webserver-1.9.18-i.jar"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-servlet-webserver.ja=
r</A>,
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-server/1.4=
/jersey-server-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-server.jar</A>,
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-core/1.4/j=
ersey-core-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-core.jar</A>,
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/javax/ws/rs/jsr311-api/1.1/jsr31=
1-api-1.1.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jsr311-api.jar</A>,
  <LI><A href=3D"http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">asm.jar</A></LI></UL></DIV>
<P>and optionally for WADL support if using Java SE 5: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/com.sun.xml.bind/jars/jaxb-impl-=
2.1.12.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jaxb-impl.jar</A>,
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.xml.bind/jars/jaxb-api-2.1=
.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jaxb-api.jar</A>,
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.activation/jars/activation=
-1.1.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">activation.jar</A>,
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.xml.stream/jars/stax-api-1=
.0-2.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">stax-api.jar</A></LI></UL></=
DIV>
<P></P>
<P>For Ant developers the <A =
href=3D"http://maven.apache.org/ant-tasks.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Ant Tasks for =
Maven</A>=20
may be used to add the following to the ant document such that the =
dependencies=20
do not need to be downloaded explicitly:</P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>artifact:dependencies</SPAN> <SPAN =
class=3DIdentifier>pathId</SPAN>=3D<SPAN =
class=3DString>"dependency.classpath"</SPAN>&gt;
  &lt;<SPAN class=3DReservedWord>dependency</SPAN> <SPAN =
class=3DIdentifier>groupId</SPAN>=3D<SPAN =
class=3DString>"com.sun.jersey"</SPAN>=20
              <SPAN class=3DIdentifier>artifactId</SPAN>=3D<SPAN =
class=3DString>"jersey-server"</SPAN>
              <SPAN class=3DIdentifier>version</SPAN>=3D<SPAN =
class=3DString>"1.4"</SPAN>/&gt;
  &lt;<SPAN class=3DReservedWord>dependency</SPAN> <SPAN =
class=3DIdentifier>groupId</SPAN>=3D<SPAN =
class=3DString>"com.sun.grizzly"</SPAN>=20
              <SPAN class=3DIdentifier>artifactId</SPAN>=3D<SPAN =
class=3DString>"grizzly-servlet-webserver"</SPAN>
              <SPAN class=3DIdentifier>version</SPAN>=3D<SPAN =
class=3DString>"1.8.6.4"</SPAN>/&gt;
  &lt;<SPAN class=3DReservedWord>artifact:remoteRepository</SPAN> <SPAN =
class=3DIdentifier>id</SPAN>=3D<SPAN =
class=3DString>"maven2-repository.dev.java.net"</SPAN>
                             <SPAN class=3DIdentifier>url</SPAN>=3D<SPAN =
class=3DString>"http://download.java.net/maven/2/"</SPAN> /&gt;
  &lt;<SPAN class=3DReservedWord>artifact:remoteRepository</SPAN> <SPAN =
class=3DIdentifier>id</SPAN>=3D<SPAN =
class=3DString>"maven-repository.dev.java.net"</SPAN>
                             <SPAN class=3DIdentifier>url</SPAN>=3D<SPAN =
class=3DString>"http://download.java.net/maven/1"</SPAN>=20
                             <SPAN =
class=3DIdentifier>layout</SPAN>=3D<SPAN class=3DString>"legacy"</SPAN> =
/&gt;
&lt;<SPAN class=3DReservedWord>/artifact:dependencies</SPAN>&gt;</PRE>
<P>The path id =93dependency.classpath=94 may then be referenced as the =
classpath to=20
be used for compiling or executing.</P>
<P>Second, create a new project (using your favourite IDE or just =
ant/maven) and=20
add the dependences. (For those who want to skip the creation of their =
own=20
project take a look at <A title=3D"1.4.&nbsp;Here's one Paul created =
earlier"=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#getting.started.created">Section&nbsp;1.4,=20
=93Here's one Paul created earlier=94</A> </P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e105></A>1.1.&nbsp;Creating a root=20
resource</H2></DIV></DIV></DIV>
<P>Create the following Java class in your project:</P><PRE =
class=3Dprogramlisting>&nbsp;&nbsp;1     <SPAN class=3DComment>// The =
Java class will be hosted at the URI path "/helloworld"</SPAN>
&nbsp;&nbsp;2     @Path(<SPAN class=3DString>"/helloworld"</SPAN>)
&nbsp;&nbsp;3     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> HelloWorldResource {
&nbsp;&nbsp;4    =20
&nbsp;&nbsp;5         <SPAN class=3DComment>// The Java method will =
process HTTP GET requests</SPAN>
&nbsp;&nbsp;6         @GET=20
&nbsp;&nbsp;7         <SPAN class=3DComment>// The Java method will =
produce content identified by the MIME Media</SPAN>
&nbsp;&nbsp;8         <SPAN class=3DComment>// type "text/plain"</SPAN>
&nbsp;&nbsp;9         @Produces(<SPAN =
class=3DString>"text/plain"</SPAN>)
&nbsp;10         <SPAN class=3DReservedWord>public</SPAN> String =
getClichedMessage() {
&nbsp;11             <SPAN class=3DComment>// Return some cliched =
textual content</SPAN>
&nbsp;12             <SPAN class=3DReservedWord>return</SPAN> <SPAN =
class=3DString>"Hello World"</SPAN>;
&nbsp;13         }
&nbsp;14     }</PRE>
<P>The <CODE class=3Dliteral>HelloWorldResource</CODE> class is a very =
simple Web=20
resource. The URI path of the resource is "/helloworld" (line 2), it =
supports=20
the HTTP GET method (line 6) and produces cliched textual content (line =
12) of=20
the MIME media type "text/plain" (line 9).</P>
<P>Notice the use of Java annotations to declare the URI path, the HTTP =
method=20
and the media type. This is a key feature of JSR 311.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e119></A>1.2.&nbsp;Deploying the=20
root resource</H2></DIV></DIV></DIV>
<P>The root resource will be deployed using the Grizzly Web =
container.</P>
<P>Create the following Java class in your project:</P><PRE =
class=3Dprogramlisting><SPAN class=3DReservedWord>&nbsp;&nbsp;1 =
public</SPAN> <SPAN class=3DReservedWord>class</SPAN> Main {
&nbsp;&nbsp;2          =20
&nbsp;&nbsp;3      <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>static</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> main(String[] args) <SPAN =
class=3DReservedWord>throws</SPAN> IOException {
&nbsp;&nbsp;4             =20
&nbsp;&nbsp;5          <SPAN class=3DReservedWord>final</SPAN> String =
baseUri =3D <SPAN class=3DString>"http://localhost:9998/"</SPAN>;
&nbsp;&nbsp;6          <SPAN class=3DReservedWord>final</SPAN> =
Map&lt;String, String&gt; initParams =3D=20
&nbsp;&nbsp;7 	                       <SPAN =
class=3DReservedWord>new</SPAN> HashMap&lt;String, String&gt;();
&nbsp;&nbsp;8 =20
&nbsp;&nbsp;9          initParams.put(<SPAN =
class=3DString>"com.sun.jersey.config.property.packages"</SPAN>,=20
&nbsp;10                  <SPAN =
class=3DString>"com.sun.jersey.samples.helloworld.resources"</SPAN>);
&nbsp;11=20
&nbsp;12         System.out.println(<SPAN class=3DString>"Starting =
grizzly..."</SPAN>);
&nbsp;13         SelectorThread threadSelector =3D=20
&nbsp;14 	          GrizzlyWebContainerFactory.create(baseUri, =
initParams);
&nbsp;15         System.out.println(String.format(
&nbsp;16           <SPAN class=3DString>"Jersey app started with WADL =
available at %sapplication.wadl\n=94 + </SPAN>
&nbsp;17 <SPAN class=3DString>          =93Try out %shelloworld\nHit =
enter to stop it..."</SPAN>, baseUri, baseUri));
&nbsp;18         System.in.read();
&nbsp;19         threadSelector.stopEndpoint();
&nbsp;20         System.exit(0);
&nbsp;21     }   =20
&nbsp;22 }</PRE>
<P>The <CODE class=3Dliteral>Main</CODE> class deploys the <CODE=20
class=3Dliteral>HelloWorldResource</CODE> using the Grizzly Web =
container.</P>
<P>Lines 9 to 10 creates an initialization parameter that informs the =
Jersey=20
runtime where to search for root resource classes to be deployed. In =
this case=20
it assumes the root resource class in the package <CODE=20
class=3Dliteral>com.sun.jersey.samples.helloworld.resources</CODE> (or =
in a=20
sub-package of).</P>
<P>Lines 13 to 14 deploys the root resource to the base URI "<A=20
href=3D"http://localhost:9998/" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://localhost:9998/</A>" =
and=20
returns a Grizzly SelectorThread. The complete URI of the Hello World =
root=20
resource is "<A href=3D"http://localhost:9998/helloworld" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://localhost:9998/hellow=
orld</A>".</P>
<P>Notice that no deployment descriptors were needed and the root =
resource was=20
setup in a few statements of Java code.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e151></A>1.3.&nbsp;Testing the=20
root resource</H2></DIV></DIV></DIV>
<P>Goto the URI <A href=3D"http://localhost:9998/helloworld" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://localhost:9998/hellow=
orld</A>=20
in your favourite browser.</P>
<P>Or, from the command line use <CODE class=3Dliteral>curl</CODE>: =
</P><PRE class=3Dprogramlisting>&gt; curl =
http://localhost:9998/helloworld</PRE>
<P></P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dgetting.started.created></A>1.4.&nbsp;Here's one Paul created=20
earlier</H2></DIV></DIV></DIV>
<P>The example code presented above is shipped as the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/helloworl=
d/1.4/helloworld-1.4-project.zip"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">HelloWorld</A> sample in=20
the Java.Net maven repository.</P>
<P>For developers wishing to get started by deploying a Web application =
an=20
equivalent sample, as a Web application, is shipped as the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/helloworl=
d-webapp/1.4/helloworld-webapp-1.4-project.zip"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">HelloWorld-WebApp</A>=20
sample.</P></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A name=3Djax-rs></A>Chapter&nbsp;2.&nbsp;Overview of =
JAX-RS=20
1.1</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e196">2.1.=20
  Root Resource Classes</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e233">http://jersey.java.net/nonav/documentation/latest/user-guide.htm=
l#d0e233</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e288">2.1.2.=20
    HTTP Methods</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e322">http://jersey.java.net/nonav/documentation/latest/user-guide.htm=
l#d0e322</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e393">http://jersey.java.net/nonav/documentation/latest/user-guide.htm=
l#d0e393</A></SPAN></DT></DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e416">2.2.=20
  Deploying a RESTful Web Service</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e494">2.3.=20
  Extracting Request Parameters</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e660">2.4.=20
  Representations and Java Types</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e737">2.5.=20
  Building Responses</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e770">2.6.=20
  Sub-resources</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e840">2.7.=20
  Building URIs</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e900">2.8.=20
  WebApplicationException and Mapping Exceptions to Responses</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e964">2.9.=20
  Conditional GETs and Returning 304 (Not Modified) Responses</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1004">2.10.=20
  Life-cycle of Root Resource Classes</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1021">2.11.=20
  Security</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1047">2.12.=20
  Rules of Injection</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1070">http://jersey.java.net/nonav/documentation/latest/user-guide.ht=
ml#d0e1070</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1101">2.14.=20
  Annotations Defined By JAX-RS</A></SPAN></DT></DL></DIV>
<P>This chapter presents an overview of the JAX-RS 1.1 features.</P>
<P>The JAX-RS 1.1 API may be found online <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/index.html" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">here</A>.</P>
<P>The JAX-RS 1.1 specification draft may be found online <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/spec/spec.html" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">here</A>.</P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e196></A>2.1.&nbsp;Root Resource=20
Classes</H2></DIV></DIV></DIV>
<P><SPAN class=3Demphasis><EM>Root resource classes</EM></SPAN> are =
POJOs (Plain=20
Old Java Objects) that are annotated with <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> =
have at least=20
one method annotated with <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> or =
a resource=20
method designator annotation such as <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/GET.ht=
ml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@GET</A>, <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/PUT.ht=
ml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@PUT</A>, <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/POST.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@POST</A>, or =
<A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/DELETE=
.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@DELETE</A>. =
Resource=20
methods are methods of a resource class annotated with a resource method =

designator. This section shows how to use Jersey to annotate Java =
objects to=20
create RESTful web services.</P>
<P>The following code example is a very simple example of a root =
resource class=20
using JAX-RS annotations. The example code shown here is from one of the =
samples=20
that ships with Jersey, the zip file of which can be found in the maven=20
repository <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/helloworl=
d/1.4/helloworld-1.4-project.zip"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">here</A>.</P>
<DIV class=3Dexample><A name=3Dd0e227></A>
<P class=3Dtitle><B>Example&nbsp;2.1.&nbsp;Simple hello world root =
resource=20
class</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting><SPAN =
class=3DReservedWord>&nbsp;&nbsp;1 package</SPAN> =
com.sun.ws.rest.samples.helloworld.resources;
&nbsp;&nbsp;2=20
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>import</SPAN> javax.ws.rs.GET;
&nbsp;&nbsp;4 <SPAN class=3DReservedWord>import</SPAN> =
javax.ws.rs.Produces;
&nbsp;&nbsp;5 <SPAN class=3DReservedWord>import</SPAN> javax.ws.rs.Path;
&nbsp;&nbsp;6=20
&nbsp;&nbsp;7 <SPAN class=3DComment>// The Java class will be hosted at =
the URI path "/helloworld"</SPAN>
&nbsp;&nbsp;8 @Path(<SPAN class=3DString>"/helloworld"</SPAN>)
&nbsp;&nbsp;9 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> HelloWorldResource {
&nbsp;10=20
&nbsp;11     <SPAN class=3DComment>// The Java method will process HTTP =
GET requests</SPAN>
&nbsp;12     @GET
&nbsp;13     <SPAN class=3DComment>// The Java method will produce =
content identified by the MIME Media</SPAN>
&nbsp;14     <SPAN class=3DComment>// type "text/plain"</SPAN>
&nbsp;15     @Produces(<SPAN class=3DString>"text/plain"</SPAN>)
&nbsp;16     <SPAN class=3DReservedWord>public</SPAN> String =
getClichedMessage() {
&nbsp;17         <SPAN class=3DComment>// Return some cliched textual =
content</SPAN>
&nbsp;18         <SPAN class=3DReservedWord>return</SPAN> <SPAN =
class=3DString>"Hello World"</SPAN>;
&nbsp;19     }
&nbsp;20 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break>Let's look at some of the JAX-RS =
annotations used in=20
this example.</P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A =
name=3Dd0e233></A>2.1.1.&nbsp;@Path</H3></DIV></DIV></DIV>
<P>The <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> =
annotation's=20
value is a relative URI path. In the example above, the Java class will =
be=20
hosted at the URI path <CODE class=3Dliteral>/helloworld</CODE>. This is =
an=20
extremely simple use of the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> =
annotation.=20
What makes JAX-RS so useful is that you can embed variables in the =
URIs.</P>
<P><SPAN class=3Demphasis><EM>URI path templates</EM></SPAN> are URIs =
with=20
variables embedded within the URI syntax. These variables are =
substituted at=20
runtime in order for a resource to respond to a request based on the =
substituted=20
URI. Variables are denoted by curly braces. For example, look at the =
following=20
<A =
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> =
annotation:</P><PRE class=3Dprogramlisting>@Path(<SPAN =
class=3DString>"/users/{username}"</SPAN>)</PRE>
<P>In this type of example, a user will be prompted to enter their name, =
and=20
then a Jersey web service configured to respond to requests to this URI =
path=20
template will respond. For example, if the user entered their username =
as=20
"Galileo", the web service will respond to the following URL:</P>
<P><CODE class=3Dliteral>http://example.com/users/Galileo</CODE></P>
<P>To obtain the value of the username variable the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/PathPa=
ram.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@PathParam</A> may be=20
used on method parameter of a request method, for example:</P>
<DIV class=3Dexample><A name=3Dd0e267></A>
<P class=3Dtitle><B>Example&nbsp;2.2.&nbsp;Specifying URI path =
parameter</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"/users/{username}"</SPAN>)
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> UserResource {
&nbsp;&nbsp;3=20
&nbsp;&nbsp;4     @GET
&nbsp;&nbsp;5     @Produces(<SPAN class=3DString>"text/xml"</SPAN>)
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>public</SPAN> String =
getUser(@PathParam(<SPAN class=3DString>"username"</SPAN>) String =
userName) {
&nbsp;&nbsp;7         ...
&nbsp;&nbsp;8     }
&nbsp;&nbsp;9 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break>If it is required that a user name must =
only consist=20
of lower and upper case numeric characters then it is possible to =
declare a=20
particular regular expression, which overrides the default regular =
expression,=20
"[^/]+?", for example:</P><PRE class=3Dprogramlisting>@Path(<SPAN =
class=3DString>"users/{username: [a-zA-Z][a-zA-Z_0-9]*}"</SPAN>)</PRE>
<P>In this type of example the username variable will only match user =
names that=20
begin with one upper or lower case letter and zero or more alpha numeric =

characters and the underscore character. If a user name does not match =
that a=20
404 (Not Found) response will occur. </P>
<P>A <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> =
value may or=20
may not begin with a '/', it makes no difference. Likewise, by default, =
a <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> =
value may or=20
may not end in a '/', it makes no difference, and thus request URLs that =
end or=20
do not end in a '/' will both be matched. However, Jersey has a =
redirection=20
mechanism, which if enabled, automatically performs redirection to a =
request URL=20
ending in a '/' if a request URL does not end in a '/' and the matching =
<A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> =
does end in a=20
'/'.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e288></A>2.1.2.&nbsp;HTTP=20
Methods</H3></DIV></DIV></DIV>
<P><A =
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/GET.ht=
ml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@GET</A>, <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/PUT.ht=
ml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@PUT</A>, <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/POST.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@POST</A>, <A =

href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/DELETE=
.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@DELETE</A>, =
and <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/HEAD.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@HEAD</A> are =
<SPAN=20
class=3Demphasis><EM>resource method designator</EM></SPAN> annotations =
defined by=20
JAX-RS and which correspond to the similarly named HTTP methods. In the =
example=20
above, the annotated Java method will process HTTP GET requests. The =
behavior of=20
a resource is determined by which of the HTTP methods the resource is =
responding=20
to.</P>
<P>The following example is an extract from the storage service sample =
that=20
shows the use of the PUT method to create or update a storage =
container:</P>
<DIV class=3Dexample><A name=3Dd0e313></A>
<P class=3Dtitle><B>Example&nbsp;2.3.&nbsp;PUT method</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@PUT
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> Response =
putContainer() {
&nbsp;&nbsp;3     System.out.println(<SPAN class=3DString>"PUT CONTAINER =
"</SPAN> + container);
&nbsp;&nbsp;4=20
&nbsp;&nbsp;5     URI uri =3D  uriInfo.getAbsolutePath();
&nbsp;&nbsp;6     Container c =3D <SPAN class=3DReservedWord>new</SPAN> =
Container(container, uri.toString());
&nbsp;&nbsp;7=20
&nbsp;&nbsp;8     Response r;
&nbsp;&nbsp;9     <SPAN class=3DReservedWord>if</SPAN> =
(!MemoryStore.MS.hasContainer(c)) {
&nbsp;10         r =3D Response.created(uri).build();
&nbsp;11     } <SPAN class=3DReservedWord>else</SPAN> {
&nbsp;12         r =3D Response.noContent().build();
&nbsp;13     }
&nbsp;14=20
&nbsp;15     MemoryStore.MS.createContainer(c);
&nbsp;16     <SPAN class=3DReservedWord>return</SPAN> r;
&nbsp;17 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break>By default the JAX-RS runtime will =
automatically=20
support the methods HEAD and OPTIONS, if not explicitly implemented. For =
HEAD=20
the runtime will invoke the implemented GET method (if present) and =
ignore the=20
response entity (if set). For OPTIONS the Allow response header will be =
set to=20
the set of HTTP methods support by the resource. In addition Jersey will =
return=20
a <A href=3D"https://wadl.dev.java.net/" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">WADL</A> document =
describing the=20
resource.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A =
name=3Dd0e322></A>2.1.3.&nbsp;@Produces</H3></DIV></DIV></DIV>
<P>The <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Produc=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Produces</A> =
annotation=20
is used to specify the MIME media types of representations a resource =
can=20
produce and send back to the client. In this example, the Java method =
will=20
produce representations identified by the MIME media type =
"text/plain".</P>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Produc=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Produces</A> =
can be=20
applied at both the class and method levels. Here's an example:</P>
<DIV class=3Dexample><A name=3Dd0e335></A>
<P class=3Dtitle><B>Example&nbsp;2.4.&nbsp;Specifying output MIME =
type</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"/myResource"</SPAN>)
&nbsp;&nbsp;2 @Produces(<SPAN class=3DString>"text/plain"</SPAN>)
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> SomeResource {
&nbsp;&nbsp;4     @GET
&nbsp;&nbsp;5     <SPAN class=3DReservedWord>public</SPAN> String =
doGetAsPlainText() {
&nbsp;&nbsp;6         ...
&nbsp;&nbsp;7     }
&nbsp;&nbsp;8=20
&nbsp;&nbsp;9     @GET
&nbsp;10     @Produces(<SPAN class=3DString>"text/html"</SPAN>)
&nbsp;11     <SPAN class=3DReservedWord>public</SPAN> String =
doGetAsHtml() {
&nbsp;12         ...
&nbsp;13     }
&nbsp;14 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break>The <CODE =
class=3Dliteral>doGetAsPlainText</CODE>=20
method defaults to the MIME type of the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Produc=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Produces</A> =
annotation=20
at the class level. The <CODE class=3Dliteral>doGetAsHtml</CODE> =
method's <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Produc=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Produces</A> =
annotation=20
overrides the class-level <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Produc=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Produces</A> =
setting,=20
and specifies that the method can produce HTML rather than plain text. =
</P>
<P>If a resource class is capable of producing more that one MIME media =
type=20
then the resource method chosen will correspond to the most acceptable =
media=20
type as declared by the client. More specifically the Accept header of =
the HTTP=20
request declared what is most acceptable. For example if the Accept =
header=20
is:</P><PRE class=3Dprogramlisting>Accept: text/plain</PRE>
<P>then the <CODE class=3Dliteral>doGetAsPlainText</CODE> method will be =
invoked.=20
Alternatively if the Accept header is: </P><PRE =
class=3Dprogramlisting>Accept: text/plain;q=3D0.9, text/html</PRE>
<P>which declares that the client can accept media types of "text/plain" =
and=20
"text/html" but prefers the latter, then the <CODE=20
class=3Dliteral>doGetAsHtml</CODE> method will be invoked. </P>
<P>More than one media type may be declared in the same <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Produc=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Produces</A> =

declaration, for example:</P>
<DIV class=3Dexample><A name=3Dd0e379></A>
<P class=3Dtitle><B>Example&nbsp;2.5.&nbsp;Using multiple output MIME=20
types</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@GET
&nbsp;&nbsp;2 @Produces({<SPAN class=3DString>"application/xml"</SPAN>, =
<SPAN class=3DString>"application/json"</SPAN>})
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> String =
doGetAsXmlOrJson() {
&nbsp;&nbsp;4     ...
&nbsp;&nbsp;5 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break>The <CODE =
class=3Dliteral>doGetAsXmlOrJson</CODE>=20
method will get invoked if either of the media types "application/xml" =
and=20
"application/json" are acceptable. If both are equally acceptable then =
the=20
former will be chosen because it occurs first. </P>
<P>The examples above refer explicitly to MIME media types for clarity. =
It is=20
possible to refer to constant values, which may reduce typographical =
errors, see=20
the constant field values of <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/M=
ediaType.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">MediaType</A>.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A =
name=3Dd0e393></A>2.1.4.&nbsp;@Consumes</H3></DIV></DIV></DIV>
<P>The <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Consum=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Consumes</A> =
annotation=20
is used to specify the MIME media types of representations a resource =
can=20
consume that were sent by the client. The above example can be modified =
to set=20
the cliched message as follows:</P>
<DIV class=3Dexample><A name=3Dd0e402></A>
<P class=3Dtitle><B>Example&nbsp;2.6.&nbsp;Specifying input MIME =
type</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@POST
&nbsp;&nbsp;2 @Consumes(<SPAN class=3DString>"text/plain"</SPAN>)
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> postClichedMessage(String message) {
&nbsp;&nbsp;4     <SPAN class=3DComment>// Store the message</SPAN>
&nbsp;&nbsp;5 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>In this example, the Java method will consume representations =
identified by=20
the MIME media type "text/plain". Notice that the resource method =
returns void.=20
This means no representation is returned and response with a status code =
of 204=20
(No Content) will be returned.</P>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Consum=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Consumes</A> =
can be=20
applied at both the class and method levels and more than one media type =
may be=20
declared in the same <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Consum=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Consumes</A> =

declaration.</P></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e416></A>2.2.&nbsp;Deploying a=20
RESTful Web Service</H2></DIV></DIV></DIV>
<P>JAX-RS provides the deployment agnostic abstract class <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/A=
pplication.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Application</A> for=20
declaring root resource and provider classes, and root resource and =
provider=20
singleton instances. A Web service may extend this class to declare root =

resource and provider classes. For example,</P>
<DIV class=3Dexample><A name=3Dd0e425></A>
<P class=3Dtitle><B>Example&nbsp;2.7.&nbsp;Deployment agnostic =
application=20
model</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting><SPAN =
class=3DReservedWord>&nbsp;&nbsp;1 public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> MyApplicaton <SPAN =
class=3DReservedWord>extends</SPAN> Application {
&nbsp;&nbsp;2     <SPAN class=3DReservedWord>public</SPAN> =
Set&lt;Class&lt;?&gt;&gt; getClasses() {
&nbsp;&nbsp;3         Set&lt;Class&lt;?&gt;&gt; s =3D <SPAN =
class=3DReservedWord>new</SPAN> HashSet&lt;Class&lt;?&gt;&gt;();
&nbsp;&nbsp;4         s.add(HelloWorldResource.<SPAN =
class=3DReservedWord>class</SPAN>);
&nbsp;&nbsp;5         <SPAN class=3DReservedWord>return</SPAN> s;
&nbsp;&nbsp;6     }
&nbsp;&nbsp;7 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break>Alternatively it is possible to reuse one =
of Jersey's=20
implementations that scans for root resource and provider classes given =
a=20
classpath or a set of package names. Such classes are automatically =
added to the=20
set of classes that are returned by <CODE =
class=3Dliteral>getClasses</CODE>. For=20
example, the following scans for root resource and provider classes in =
packages=20
"org.foo.rest", "org.bar.rest" and in any sub-packages of those two:</P>
<DIV class=3Dexample><A name=3Dd0e435></A>
<P class=3Dtitle><B>Example&nbsp;2.8.&nbsp;Reusing Jersey implementation =
in your=20
custom application model</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting><SPAN =
class=3DReservedWord>&nbsp;&nbsp;1 public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> MyApplication <SPAN =
class=3DReservedWord>extends</SPAN> PackagesResourceConfig {
&nbsp;&nbsp;2     <SPAN class=3DReservedWord>public</SPAN> =
MyApplication() {
&nbsp;&nbsp;3         <SPAN class=3DReservedWord>super</SPAN>(<SPAN =
class=3DString>"org.foo.rest;org.bar.rest"</SPAN>);
&nbsp;&nbsp;4     }
&nbsp;&nbsp;5 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>For servlet deployments JAX-RS specifies that a class that implements =
<A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/A=
pplication.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Application</A> may be=20
declared instead of a servlet class in <CODE=20
class=3Dliteral>&lt;servlet-class&gt;</CODE> element of a <CODE=20
class=3Dliteral>web.xml</CODE>. This is supported for a Web container =
implementing=20
Servlet 3.0 as follows:</P>
<DIV class=3Dexample><A name=3Dd0e452></A>
<P class=3Dtitle><B>Example&nbsp;2.9.&nbsp;Deployment of your =
application using=20
<CODE class=3Dliteral>web.xml</CODE> with Servlet 3.0</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
&lt;<SPAN class=3DReservedWord>web-app</SPAN>&gt;
&nbsp;&nbsp;2     &lt;<SPAN class=3DReservedWord>servlet</SPAN>&gt;
&nbsp;&nbsp;3         &lt;<SPAN =
class=3DReservedWord>servlet-name</SPAN>&gt;Jersey Web =
Application&lt;<SPAN class=3DReservedWord>/servlet-name</SPAN>&gt;
&nbsp;&nbsp;4         &lt;<SPAN =
class=3DReservedWord>servlet-class</SPAN>&gt;MyApplication&lt;<SPAN =
class=3DReservedWord>/servlet-class</SPAN>&gt;
&nbsp;&nbsp;5     &lt;<SPAN class=3DReservedWord>/servlet</SPAN>&gt;
&nbsp;&nbsp;6     ....</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>If using Servlet 2.x then instead it is necessary to declare the =
Jersey=20
specific servlet and the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/A=
pplication.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Application</A> class as=20
follows:</P>
<DIV class=3Dexample><A name=3Dd0e466></A>
<P class=3Dtitle><B>Example&nbsp;2.10.&nbsp;Deployment of your =
application using=20
Jersey specific servlet</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
&lt;<SPAN class=3DReservedWord>web-app</SPAN>&gt;
&nbsp;&nbsp;2     &lt;<SPAN class=3DReservedWord>servlet</SPAN>&gt;
&nbsp;&nbsp;3         &lt;<SPAN =
class=3DReservedWord>servlet-name</SPAN>&gt;Jersey Web =
Application&lt;<SPAN class=3DReservedWord>/servlet-name</SPAN>&gt;
&nbsp;&nbsp;4         &lt;<SPAN =
class=3DReservedWord>servlet-class</SPAN>&gt;com.sun.jersey.spi.container=
.servlet.ServletContainer&lt;<SPAN =
class=3DReservedWord>/servlet-class</SPAN>&gt;
&nbsp;&nbsp;5         &lt;<SPAN =
class=3DReservedWord>init-param</SPAN>&gt;
&nbsp;&nbsp;6             &lt;<SPAN =
class=3DReservedWord>param-name</SPAN>&gt;javax.ws.rs.Application&lt;<SPA=
N class=3DReservedWord>/param-name</SPAN>&gt;
&nbsp;&nbsp;7             &lt;<SPAN =
class=3DReservedWord>param-value</SPAN>&gt;MyApplication&lt;<SPAN =
class=3DReservedWord>/param-value</SPAN>&gt;
&nbsp;&nbsp;8         &lt;<SPAN =
class=3DReservedWord>/init-param</SPAN>&gt;
&nbsp;&nbsp;9     &lt;<SPAN class=3DReservedWord>/servlet</SPAN>&gt;
&nbsp;10     ....</PRE></DIV></DIV>
<P><BR class=3Dexample-break>Alternatively a simpler approach is to let =
Jersey=20
choose the PackagesResourceConfig implementation automatically by =
declaring the=20
packages as follows:</P>
<DIV class=3Dexample><A name=3Dd0e473></A>
<P class=3Dtitle><B>Example&nbsp;2.11.&nbsp;Using Jersey specific =
servlet without=20
an application model instance</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
&lt;<SPAN class=3DReservedWord>web-app</SPAN>&gt;
&nbsp;&nbsp;2     &lt;<SPAN class=3DReservedWord>servlet</SPAN>&gt;
&nbsp;&nbsp;3         &lt;<SPAN =
class=3DReservedWord>servlet-name</SPAN>&gt;Jersey Web =
Application&lt;<SPAN class=3DReservedWord>/servlet-name</SPAN>&gt;
&nbsp;&nbsp;4         &lt;<SPAN =
class=3DReservedWord>servlet-class</SPAN>&gt;com.sun.jersey.spi.container=
.servlet.ServletContainer&lt;<SPAN =
class=3DReservedWord>/servlet-class</SPAN>&gt;
&nbsp;&nbsp;5         &lt;<SPAN =
class=3DReservedWord>init-param</SPAN>&gt;
&nbsp;&nbsp;6             &lt;<SPAN =
class=3DReservedWord>param-name</SPAN>&gt;com.sun.jersey.config.property.=
packages&lt;<SPAN class=3DReservedWord>/param-name</SPAN>&gt;
&nbsp;&nbsp;7             &lt;<SPAN =
class=3DReservedWord>param-value</SPAN>&gt;org.foo.rest;org.bar.rest&lt;<=
SPAN class=3DReservedWord>/param-value</SPAN>&gt;
&nbsp;&nbsp;8         &lt;<SPAN =
class=3DReservedWord>/init-param</SPAN>&gt;
&nbsp;&nbsp;9     &lt;<SPAN class=3DReservedWord>/servlet</SPAN>&gt;
&nbsp;10     ....</PRE></DIV></DIV>
<P><BR class=3Dexample-break>JAX-RS also provides the ability to obtain =
a=20
container specific artifact from an <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/A=
pplication.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Application</A> instance.=20
For example, Jersey supports using <A =
href=3D"https://grizzly.dev.java.net/"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Grizzly</A> =
as=20
follows:</P><PRE class=3Dprogramlisting>SelectorThread st =3D =
RuntimeDelegate.createEndpoint(<SPAN class=3DReservedWord>new</SPAN> =
MyApplication(), SelectorThread.<SPAN =
class=3DReservedWord>class</SPAN>);</PRE>
<P>Jersey also provides <A href=3D"https://grizzly.dev.java.net/" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Grizzly</A> helper classes =
to deploy=20
the ServletThread instance at a base URL for in-process deployment.</P>
<P>The Jersey samples provide many examples of Servlet-based and=20
Grizzly-in-process-based deployments.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e494></A>2.3.&nbsp;Extracting=20
Request Parameters</H2></DIV></DIV></DIV>
<P>Parameters of a resource method may be annotated with parameter-based =

annotations to extract information from a request. A previous example =
presented=20
the use <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/PathPa=
ram.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@PathParam</A> to extract=20
a path parameter from the path component of the request URL that matched =
the=20
path declared in <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A>.</P>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/QueryP=
aram.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@QueryParam</A> is used=20
to extract query parameters from the Query component of the request URL. =
The=20
following example is an extract from the sparklines sample: </P>
<DIV class=3Dexample><A name=3Dd0e509></A>
<P class=3Dtitle><B>Example&nbsp;2.12.&nbsp;Query parameters</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"smooth"</SPAN>)
&nbsp;&nbsp;2 @GET
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> Response smooth(
&nbsp;&nbsp;4         @DefaultValue(<SPAN class=3DString>"2"</SPAN>) =
@QueryParam(<SPAN class=3DString>"step"</SPAN>) <SPAN =
class=3DReservedWord>int</SPAN> step,
&nbsp;&nbsp;5         @DefaultValue(<SPAN class=3DString>"true"</SPAN>) =
@QueryParam(<SPAN class=3DString>"min-m"</SPAN>) <SPAN =
class=3DReservedWord>boolean</SPAN> hasMin,
&nbsp;&nbsp;6         @DefaultValue(<SPAN class=3DString>"true"</SPAN>) =
@QueryParam(<SPAN class=3DString>"max-m"</SPAN>) <SPAN =
class=3DReservedWord>boolean</SPAN> hasMax,
&nbsp;&nbsp;7         @DefaultValue(<SPAN class=3DString>"true"</SPAN>) =
@QueryParam(<SPAN class=3DString>"last-m"</SPAN>) <SPAN =
class=3DReservedWord>boolean</SPAN> hasLast,          =20
&nbsp;&nbsp;8         @DefaultValue(<SPAN class=3DString>"blue"</SPAN>) =
@QueryParam(<SPAN class=3DString>"min-color"</SPAN>) ColorParam =
minColor,
&nbsp;&nbsp;9         @DefaultValue(<SPAN class=3DString>"green"</SPAN>) =
@QueryParam(<SPAN class=3DString>"max-color"</SPAN>) ColorParam =
maxColor,
&nbsp;10         @DefaultValue(<SPAN class=3DString>"red"</SPAN>) =
@QueryParam(<SPAN class=3DString>"last-color"</SPAN>) ColorParam =
lastColor
&nbsp;11         ) { ... }</PRE></DIV></DIV><BR class=3Dexample-break>
<P>If a query parameter "step" exists in the query component of the =
request URI=20
then the "step" value will be will extracted and parsed as a 32 bit =
signed=20
integer and assigned to the step method parameter. If "step" does not =
exist then=20
a default value of 2, as declared in the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Defaul=
tValue.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@DefaultValue</A>=20
annotation, will be assigned to the step method parameter. If the "step" =
value=20
cannot be parsed as a 32 bit signed integer then a 404 (Not Found) =
response is=20
returned. User defined Java types such as <CODE =
class=3Dliteral>ColorParam</CODE>=20
may be used, which as implemented as follows: </P>
<DIV class=3Dexample><A name=3Dd0e522></A>
<P class=3Dtitle><B>Example&nbsp;2.13.&nbsp;Custom Java type for =
consuming request=20
parameters</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting><SPAN =
class=3DReservedWord>&nbsp;&nbsp;1 public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> ColorParam <SPAN =
class=3DReservedWord>extends</SPAN> Color {
&nbsp;&nbsp;2     <SPAN class=3DReservedWord>public</SPAN> =
ColorParam(String s) {
&nbsp;&nbsp;3         <SPAN =
class=3DReservedWord>super</SPAN>(getRGB(s));
&nbsp;&nbsp;4     }
&nbsp;&nbsp;5=20
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>private</SPAN> <SPAN =
class=3DReservedWord>static</SPAN> <SPAN class=3DReservedWord>int</SPAN> =
getRGB(String s) {
&nbsp;&nbsp;7         <SPAN class=3DReservedWord>if</SPAN> (s.charAt(0) =
=3D=3D <SPAN class=3DString>'#'</SPAN>) {
&nbsp;&nbsp;8             <SPAN class=3DReservedWord>try</SPAN> {
&nbsp;&nbsp;9                 Color c =3D Color.decode(<SPAN =
class=3DString>"0x"</SPAN> + s.substring(1));
&nbsp;10                 <SPAN class=3DReservedWord>return</SPAN> =
c.getRGB();
&nbsp;11             } <SPAN class=3DReservedWord>catch</SPAN> =
(NumberFormatException e) {
&nbsp;12                 <SPAN class=3DReservedWord>throw</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> WebApplicationException(400);
&nbsp;13             }
&nbsp;14         } <SPAN class=3DReservedWord>else</SPAN> {
&nbsp;15             <SPAN class=3DReservedWord>try</SPAN> {
&nbsp;16                 Field f =3D Color.<SPAN =
class=3DReservedWord>class</SPAN>.getField(s);
&nbsp;17                 <SPAN class=3DReservedWord>return</SPAN> =
((Color)f.get(null)).getRGB();
&nbsp;18             } <SPAN class=3DReservedWord>catch</SPAN> =
(Exception e) {
&nbsp;19                 <SPAN class=3DReservedWord>throw</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> WebApplicationException(400);
&nbsp;20             }
&nbsp;21         }
&nbsp;22     }
&nbsp;23 }</PRE></DIV></DIV><BR class=3Dexample-break>
<P>In general the Java type of the method parameter may:</P>
<DIV class=3Dorderedlist>
<OL type=3D1>
  <LI>
  <P>Be a primitive type;</P>
  <LI>
  <P>Have a constructor that accepts a single <CODE =
class=3Dliteral>String</CODE>=20
  argument;</P>
  <LI>
  <P>Have a static method named <CODE class=3Dliteral>valueOf</CODE> or =
<CODE=20
  class=3Dliteral>fromString</CODE> that accepts a single <CODE=20
  class=3Dliteral>String</CODE> argument (see, for example, <CODE=20
  class=3Dliteral>Integer.valueOf(String)</CODE> and <CODE=20
  class=3Dliteral>java.util.UUID.fromString(String)</CODE>); or</P>
  <LI>
  <P>Be <CODE class=3Dliteral>List&lt;T&gt;</CODE>, <CODE=20
  class=3Dliteral>Set&lt;T&gt;</CODE> or <CODE=20
  class=3Dliteral>SortedSet&lt;T&gt;</CODE>, where <CODE =
class=3Dliteral>T</CODE>=20
  satisfies 2 or 3 above. The resulting collection is=20
read-only.</P></LI></OL></DIV>
<P>Sometimes parameters may contain more than one value for the same =
name. If=20
this is the case then types in 4) may be used to obtain all values.</P>
<P>If the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Defaul=
tValue.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@DefaultValue</A> is not=20
used on conjuction with <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/QueryP=
aram.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@QueryParam</A> and the=20
query parameter is not present in the request then value will be an =
empty=20
collection for <CODE class=3Dliteral>List</CODE>, <CODE =
class=3Dliteral>Set</CODE>=20
or <CODE class=3Dliteral>SortedSet</CODE>, <CODE =
class=3Dliteral>null</CODE> for=20
other object types, and the Java-defined default for primitive =
types.</P>
<P>The <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/PathPa=
ram.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@PathParam</A> and the=20
other parameter-based annotations, <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Matrix=
Param.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@MatrixParam</A>, <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Header=
Param.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@HeaderParam</A>, <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Cookie=
Param.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@CookieParam</A> and <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/FormPa=
ram.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@FormParam</A> obey the=20
same rules as <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/QueryP=
aram.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@QueryParam</A>. <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Matrix=
Param.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@MatrixParam</A> extracts=20
information from URL path segments. <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Header=
Param.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@HeaderParam</A> extracts=20
information from the HTTP headers. <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Cookie=
Param.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@CookieParam</A> extracts=20
information from the cookies declared in cookie related HTTP =
headers.</P>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/FormPa=
ram.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@FormParam</A> is=20
slightly special because it extracts information from a request =
representation=20
that is of the MIME media type "application/x-www-form-urlencoded" and =
conforms=20
to the encoding specified by HTML forms, as described here. This =
parameter is=20
very useful for extracting information that is POSTed by HTML forms, for =
example=20
the following extracts the form parameter named "name" from the POSTed =
form=20
data: </P>
<DIV class=3Dexample><A name=3Dd0e628></A>
<P class=3Dtitle><B>Example&nbsp;2.14.&nbsp;Processing POSTed HTML =
form</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@POST
&nbsp;&nbsp;2 @Consumes(<SPAN =
class=3DString>"application/x-www-form-urlencoded"</SPAN>)
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> post(@FormParam(<SPAN =
class=3DString>"name"</SPAN>) String name) {
&nbsp;&nbsp;4     <SPAN class=3DComment>// Store the message</SPAN>
&nbsp;&nbsp;5 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>If it is necessary to obtain a general map of parameter name to =
values then,=20
for query and path parameters it is possible to do the following: </P>
<DIV class=3Dexample><A name=3Dd0e636></A>
<P class=3Dtitle><B>Example&nbsp;2.15.&nbsp;Obtaining general map of URI =
path=20
and/or query parameters</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@GET
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> String =
get(@Context UriInfo ui) {
&nbsp;&nbsp;3     MultivaluedMap&lt;String, String&gt; queryParams =3D =
ui.getQueryParameters();
&nbsp;&nbsp;4     MultivaluedMap&lt;String, String&gt; pathParams =3D =
ui.getPathParameters();
&nbsp;&nbsp;5 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>For header and cookie parameters the following:</P>
<DIV class=3Dexample><A name=3Dd0e644></A>
<P class=3Dtitle><B>Example&nbsp;2.16.&nbsp;Obtaining general map of =
header=20
parameters</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@GET
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> String =
get(@Context HttpHeaders hh) {
&nbsp;&nbsp;3     MultivaluedMap&lt;String, String&gt; headerParams =3D =
hh.getRequestHeaders();
&nbsp;&nbsp;4     Map&lt;String, Cookie&gt; pathParams =3D =
hh.getCookies();
&nbsp;&nbsp;5 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>In general <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/C=
ontext.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Context</A> =
can be used=20
to obtain contextual Java types related to the request or response. For =
form=20
parameters it is possible to do the following:</P>
<DIV class=3Dexample><A name=3Dd0e655></A>
<P class=3Dtitle><B>Example&nbsp;2.17.&nbsp;Obtaining general map of =
form=20
parameters</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@POST
&nbsp;&nbsp;2 @Consumes(<SPAN =
class=3DString>"application/x-www-form-urlencoded"</SPAN>)
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> post(MultivaluedMap&lt;String, =
String&gt; formParams) {
&nbsp;&nbsp;4     <SPAN class=3DComment>// Store the message</SPAN>
&nbsp;&nbsp;5 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e660></A>2.4.&nbsp;Representations=20
and Java Types</H2></DIV></DIV></DIV>
<P>Previous sections on <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Produc=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Produces</A> =
and <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Consum=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Consumes</A> =
referred to=20
MIME media types of representations and showed resource methods that =
consume and=20
produce the Java type String for a number of different media types. =
However,=20
<CODE class=3Dliteral>String</CODE> is just one of many Java types that =
are=20
required to be supported by JAX-RS implementations.</P>
<P>Java types such as <CODE class=3Dliteral>byte[]</CODE>, <CODE=20
class=3Dliteral>java.io.InputStream</CODE>, <CODE=20
class=3Dliteral>java.io.Reader</CODE> and <CODE =
class=3Dliteral>java.io.File</CODE>=20
are supported. In addition JAXB beans are supported. Such beans are =
<CODE=20
class=3Dliteral>JAXBElement</CODE> or classes annotated with <A=20
href=3D"http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/X=
mlRootElement.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@XmlRootElement</A> or <A=20
href=3D"http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/X=
mlType.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@XmlType</A>. =
The samples=20
jaxb and json-from-jaxb show the use of JAXB beans. </P>
<P>Unlike method parameters that are associated with the extraction of =
request=20
parameters, the method parameter associated with the representation =
being=20
consumed does not require annotating. A maximum of one such unannotated =
method=20
parameter may exist since there may only be a maximum of one such =
representation=20
sent in a request.</P>
<P>The representation being produced corresponds to what is returned by =
the=20
resource method. For example JAX-RS makes it simple to produce images =
that are=20
instance of <CODE class=3Dliteral>File</CODE> as follows:</P>
<DIV class=3Dexample><A name=3Dd0e705></A>
<P class=3Dtitle><B>Example&nbsp;2.18.&nbsp;Using <CODE =
class=3Dcode>File</CODE>=20
with a specific MIME type to produce a response</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@GET
&nbsp;&nbsp;2 @Path(<SPAN class=3DString>"/images/{image}"</SPAN>)
&nbsp;&nbsp;3 @Produces(<SPAN class=3DString>"image/*"</SPAN>)
&nbsp;&nbsp;4 <SPAN class=3DReservedWord>public</SPAN> Response =
getImage(@PathParam(<SPAN class=3DString>"image"</SPAN>) String image) {
&nbsp;&nbsp;5     File f =3D <SPAN class=3DReservedWord>new</SPAN> =
File(image);
&nbsp;&nbsp;6=20
&nbsp;&nbsp;7     <SPAN class=3DReservedWord>if</SPAN> (!f.exists()) {
&nbsp;&nbsp;8         <SPAN class=3DReservedWord>throw</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> WebApplicationException(404);
&nbsp;&nbsp;9     }
&nbsp;10=20
&nbsp;11     String mt =3D <SPAN class=3DReservedWord>new</SPAN> =
MimetypesFileTypeMap().getContentType(f);
&nbsp;12     <SPAN class=3DReservedWord>return</SPAN> Response.ok(f, =
mt).build();
&nbsp;13 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>A <CODE class=3Dliteral>File</CODE> type can also be used when =
consuming, a=20
temporary file will be created where the request entity is stored.</P>
<P>The <CODE class=3Dliteral>Content-Type</CODE> (if not set, see next =
section)=20
can be automatically set from the MIME media types declared by <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Produc=
es.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Produces</A> =
if the most=20
acceptable media type is not a wild card (one that contains a *, for =
example=20
"application/" or "/*"). Given the following method:</P>
<DIV class=3Dexample><A name=3Dd0e727></A>
<P class=3Dtitle><B>Example&nbsp;2.19.&nbsp;The most acceptable MIME =
type is used=20
when multiple output MIME types allowed</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@GET
&nbsp;&nbsp;2 @Produces({<SPAN class=3DString>"application/xml"</SPAN>, =
<SPAN class=3DString>"application/json"</SPAN>})
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> String =
doGetAsXmlOrJson() {
&nbsp;&nbsp;4     ...
&nbsp;&nbsp;5 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>if "application/xml" is the most acceptable then the <CODE=20
class=3Dliteral>Content-Type</CODE> of the response will be set to=20
"application/xml".</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e737></A>2.5.&nbsp;Building=20
Responses</H2></DIV></DIV></DIV>
<P>Sometimes it is necessary to return additional information in =
response to a=20
HTTP request. Such information may be built and returned using <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/R=
esponse.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Response</A> =
and <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/R=
esponse.ResponseBuilder.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Response.ResponseBuilder</A>=
. For=20
example, a common RESTful pattern for the creation of a new resource is =
to=20
support a POST request that returns a 201 (Created) status code and a =
<CODE=20
class=3Dliteral>Location</CODE> header whose value is the URI to the =
newly created=20
resource. This may be acheived as follows:</P>
<DIV class=3Dexample><A name=3Dd0e752></A>
<P class=3Dtitle><B>Example&nbsp;2.20.&nbsp;Returning 201 status code =
and adding=20
<CODE class=3Dliteral>Location</CODE> header in response to POST =
request</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@POST
&nbsp;&nbsp;2 @Consumes(<SPAN class=3DString>"application/xml"</SPAN>)
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> Response =
post(String content) {
&nbsp;&nbsp;4     URI createdUri =3D ...
&nbsp;&nbsp;5     create(content);
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>return</SPAN> =
Response.created(createdUri).build();
&nbsp;&nbsp;7 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>In the above no representation produced is returned, this can be =
achieved by=20
building an entity as part of the response as follows:</P>
<DIV class=3Dexample><A name=3Dd0e763></A>
<P class=3Dtitle><B>Example&nbsp;2.21.&nbsp;Adding an entity body to a =
custom=20
response</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@POST
&nbsp;&nbsp;2 @Consumes(<SPAN class=3DString>"application/xml"</SPAN>)
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> Response =
post(String content) {
&nbsp;&nbsp;4     URI createdUri =3D ...
&nbsp;&nbsp;5     String createdContent =3D create(content);
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>return</SPAN> =
Response.created(createdUri).entity(createdContent).build();
&nbsp;&nbsp;7 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>Response building provides other functionality such as setting the =
entity tag=20
and last modified date of the representation.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e770></A>2.6.&nbsp;Sub-resources</H2></DIV></DIV></DIV>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> may =
be used on=20
classes and such classes are referred to as root resource classes. <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> may =
also be=20
used on methods of root resource classes. This enables common =
functionality for=20
a number of resources to be grouped together and potentially reused.</P>
<P>The first way <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> may =
be used is=20
on resource methods and such methods are referred to as <SPAN=20
class=3Demphasis><EM>sub-resource methods</EM></SPAN>. The following =
example shows=20
the method signatures for a root resource class from the jmaki-backend=20
sample:</P>
<DIV class=3Dexample><A name=3Dd0e789></A>
<P class=3Dtitle><B>Example&nbsp;2.22.&nbsp;Sub-resource methods</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Singleton
&nbsp;&nbsp;2 @Path(<SPAN class=3DString>"/printers"</SPAN>)
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> PrintersResource {
&nbsp;&nbsp;4=20
&nbsp;&nbsp;5     @GET
&nbsp;&nbsp;6     @Produces({<SPAN =
class=3DString>"application/json"</SPAN>, <SPAN =
class=3DString>"application/xml"</SPAN>})
&nbsp;&nbsp;7     <SPAN class=3DReservedWord>public</SPAN> =
WebResourceList getMyResources() { ... }
&nbsp;&nbsp;8   =20
&nbsp;&nbsp;9     @GET @Path(<SPAN class=3DString>"/list"</SPAN>)
&nbsp;10     @Produces({<SPAN class=3DString>"application/json"</SPAN>, =
<SPAN class=3DString>"application/xml"</SPAN>})
&nbsp;11     <SPAN class=3DReservedWord>public</SPAN> WebResourceList =
getListOfPrinters() { ... }
&nbsp;12=20
&nbsp;13     @GET @Path(<SPAN class=3DString>"/jMakiTable"</SPAN>)
&nbsp;14     @Produces(<SPAN class=3DString>"application/json"</SPAN>)
&nbsp;15     <SPAN class=3DReservedWord>public</SPAN> PrinterTableModel =
getTable() { ... }
&nbsp;16=20
&nbsp;17     @GET @Path(<SPAN class=3DString>"/jMakiTree"</SPAN>)
&nbsp;18     @Produces(<SPAN class=3DString>"application/json"</SPAN>)
&nbsp;19     <SPAN class=3DReservedWord>public</SPAN> TreeModel =
getTree() { ... }
&nbsp;20=20
&nbsp;21     @GET @Path(<SPAN class=3DString>"/ids/{printerid}"</SPAN>)
&nbsp;22     @Produces({<SPAN class=3DString>"application/json"</SPAN>, =
<SPAN class=3DString>"application/xml"</SPAN>})
&nbsp;23     <SPAN class=3DReservedWord>public</SPAN> Printer =
getPrinter(@PathParam(<SPAN class=3DString>"printerid"</SPAN>) String =
printerId) { ... }
&nbsp;24=20
&nbsp;25     @PUT @Path(<SPAN class=3DString>"/ids/{printerid}"</SPAN>)
&nbsp;26     @Consumes({<SPAN class=3DString>"application/json"</SPAN>, =
<SPAN class=3DString>"application/xml"</SPAN>})
&nbsp;27     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> putPrinter(@PathParam(<SPAN =
class=3DString>"printerid"</SPAN>) String printerId,  Printer printer) { =
... }
&nbsp;28=20
&nbsp;29     @DELETE @Path(<SPAN =
class=3DString>"/ids/{printerid}"</SPAN>)
&nbsp;30     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> deletePrinter(@PathParam(<SPAN =
class=3DString>"printerid"</SPAN>) String printerId) { ... }
&nbsp;31 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>If the path of the request URL is "printers" then the resource =
methods not=20
annotated with <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> =
will be=20
selected. If the request path of the request URL is "printers/list" then =
first=20
the root resource class will be matched and then the sub-resource =
methods that=20
match "list" will be selected, which in this case is the sub-resource =
method=20
<CODE class=3Dliteral>getListOfPrinters</CODE>. So in this example =
hierarchical=20
matching on the path of the request URL is performed.</P>
<P>The second way <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/Path.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Path</A> may =
be used is=20
on methods <SPAN class=3Dbold><STRONG>not</STRONG></SPAN> annotated with =
resource=20
method designators such as <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/GET.ht=
ml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@GET</A> or =
<A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/POST.h=
tml"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@POST</A>. =
Such methods=20
are referred to as <SPAN class=3Demphasis><EM>sub-resource =
locators</EM></SPAN>.=20
The following example shows the method signatures for a root resource =
class and=20
a resource class from the optimistic-concurrency sample:</P>
<DIV class=3Dexample><A name=3Dd0e820></A>
<P class=3Dtitle><B>Example&nbsp;2.23.&nbsp;Sub-resource =
locators</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"/item"</SPAN>)
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> ItemResource {
&nbsp;&nbsp;3     @Context UriInfo uriInfo;
&nbsp;&nbsp;4=20
&nbsp;&nbsp;5     @Path(<SPAN class=3DString>"content"</SPAN>)
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>public</SPAN> =
ItemContentResource getItemContentResource() {
&nbsp;&nbsp;7         <SPAN class=3DReservedWord>return</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> ItemContentResource();
&nbsp;&nbsp;8     }
&nbsp;&nbsp;9=20
&nbsp;10     @GET
&nbsp;11     @Produces(<SPAN class=3DString>"application/xml"</SPAN>)
&nbsp;12     <SPAN class=3DReservedWord>public</SPAN> Item get() { ... }
&nbsp;13 }
&nbsp;14=20
&nbsp;15 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> ItemContentResource {
&nbsp;16=20
&nbsp;17     @GET
&nbsp;18     <SPAN class=3DReservedWord>public</SPAN> Response get() { =
... }
&nbsp;19=20
&nbsp;20     @PUT
&nbsp;21     @Path(<SPAN class=3DString>"{version}"</SPAN>)
&nbsp;22     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> put(
&nbsp;23             @PathParam(<SPAN class=3DString>"version"</SPAN>) =
<SPAN class=3DReservedWord>int</SPAN> version,
&nbsp;24             @Context HttpHeaders headers,
&nbsp;25             <SPAN class=3DReservedWord>byte</SPAN>[] in) { ... =
}
&nbsp;26 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>The root resource class <CODE class=3Dliteral>ItemResource</CODE> =
contains the=20
sub-resource locator method <CODE =
class=3Dliteral>getItemContentResource</CODE>=20
that returns a new resource class. If the path of the request URL is=20
"item/content" then first of all the root resource will be matched, then =
the=20
sub-resource locator will be matched and invoked, which returns an =
instance of=20
the <CODE class=3Dliteral>ItemContentResource</CODE> resource class. =
Sub-resource=20
locators enable reuse of resource classes.</P>
<P>In addition the processing of resource classes returned by =
sub-resource=20
locators is performed at runtime thus it is possible to support =
polymorphism. A=20
sub-resource locator may return different sub-types depending on the =
request=20
(for example a sub-resource locator could return different sub-types =
dependent=20
on the role of the principle that is authenticated).</P>
<P>Note that the runtime will not manage the life-cycle or perform any =
field=20
injection onto instances returned from sub-resource locator methods. =
This is=20
because the runtime does not know what the life-cycle of the instance=20
is.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e840></A>2.7.&nbsp;Building=20
URIs</H2></DIV></DIV></DIV>
<P>A very important aspects of REST is hyperlinks, URIs, in =
representations that=20
clients can use to transition the Web service to new application states =
(this is=20
otherwise known as "hypermedia as the engine of application state"). =
HTML forms=20
present a good example of this in practice.</P>
<P>Building URIs and building them safely is not easy with <A=20
href=3D"http://java.sun.com/j2se/1.5.0/docs/api/java/net/URI.html" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">java.net.URI</A>, which is =
why JAX-RS=20
has the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riBuilder.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriBuilder</A> class that=20
makes it simple and easy to build URIs safely.</P>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riBuilder.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriBuilder</A> can be=20
used to build new URIs or build from existing URIs. For resource classes =
it is=20
more than likely that URIs will be built from the base URI the Web =
service is=20
deployed at or from the request URI. The class <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riInfo.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriInfo</A> =
provides such=20
information (in addition to further information, see next section).</P>
<P>The following example shows URI building with UriInfo and <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riBuilder.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriBuilder</A> from the=20
bookmark sample:</P>
<DIV class=3Dexample><A name=3Dd0e866></A>
<P class=3Dtitle><B>Example&nbsp;2.24.&nbsp;URI building</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"/users/"</SPAN>)
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> UsersResource {
&nbsp;&nbsp;3=20
&nbsp;&nbsp;4     @Context UriInfo uriInfo;
&nbsp;&nbsp;5=20
&nbsp;&nbsp;6     ...
&nbsp;&nbsp;7=20
&nbsp;&nbsp;8     @GET
&nbsp;&nbsp;9     @Produces(<SPAN =
class=3DString>"application/json"</SPAN>)
&nbsp;10     <SPAN class=3DReservedWord>public</SPAN> JSONArray =
getUsersAsJsonArray() {
&nbsp;11         JSONArray uriArray =3D <SPAN =
class=3DReservedWord>new</SPAN> JSONArray();
&nbsp;12         <SPAN class=3DReservedWord>for</SPAN> (UserEntity =
userEntity : getUsers()) {
&nbsp;13             UriBuilder ub =3D uriInfo.getAbsolutePathBuilder();
&nbsp;14             URI userUri =3D ub.
&nbsp;15                     path(userEntity.getUserid()).
&nbsp;16                     build();
&nbsp;17             uriArray.put(userUri.toASCIIString());
&nbsp;18         }
&nbsp;19         <SPAN class=3DReservedWord>return</SPAN> uriArray;
&nbsp;20     }
&nbsp;21 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riInfo.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriInfo</A> =
is obtained=20
using the @Context annotation, and in this particular example injection =
onto the=20
field of the root resource class is performed, previous examples showed =
the use=20
of @Context on resource method parameters.</P>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riInfo.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriInfo</A> =
can be used=20
to obtain URIs and associated <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riBuilder.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriBuilder</A> instances=20
for the following URIs: the base URI the application is deployed at; the =
request=20
URI; and the absolute path URI, which is the request URI minus any query =

components.</P>
<P>The <CODE class=3Dliteral>getUsersAsJsonArray</CODE> method =
constructs a=20
JSONArrray where each element is a URI identifying a specific user =
resource. The=20
URI is built from the absolute path of the request URI by calling <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riInfo.html#getAbsolutePathBuilder()"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">uriInfo.getAbsolutePathBuild=
er()</A>.=20
A new path segment is added, which is the user ID, and then the URI is =
built.=20
Notice that it is not necessary to worry about the inclusion of '/' =
characters=20
or that the user ID may contain characters that need to be percent =
encoded.=20
UriBuilder takes care of such details.</P>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riBuilder.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriBuilder</A> can be=20
used to build/replace query or matrix parameters. URI templates can also =
be=20
declared, for example the following will build the URI=20
"http://localhost/segment?name=3Dvalue":</P>
<DIV class=3Dexample><A name=3Dd0e895></A>
<P class=3Dtitle><B>Example&nbsp;2.25.&nbsp;Building URIs using query=20
parameters</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
UriBuilder.fromUri(<SPAN class=3DString>"http://localhost/"</SPAN>).
&nbsp;&nbsp;2     path(<SPAN class=3DString>"{a}"</SPAN>).
&nbsp;&nbsp;3     queryParam(<SPAN class=3DString>"name"</SPAN>, <SPAN =
class=3DString>"{value}"</SPAN>).
&nbsp;&nbsp;4     build(<SPAN class=3DString>"segment"</SPAN>, <SPAN =
class=3DString>"value"</SPAN>);</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e900></A>2.8.&nbsp;WebApplicationException and Mapping =
Exceptions to=20
Responses</H2></DIV></DIV></DIV>
<P>Previous sections have shown how to return HTTP responses and it is =
possible=20
to return HTTP errors using the same mechanism. However, sometimes when=20
programming in Java it is more natural to use exceptions for HTTP =
errors.</P>
<P>The following example shows the throwing of a <CODE=20
class=3Dliteral>NotFoundException</CODE> from the bookmark sample:</P>
<DIV class=3Dexample><A name=3Dd0e911></A>
<P class=3Dtitle><B>Example&nbsp;2.26.&nbsp;Throwing Jersey specific =
exceptions to=20
control response</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"items/{itemid}/"</SPAN>)
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> Item =
getItem(@PathParam(<SPAN class=3DString>"itemid"</SPAN>) String itemid) =
{
&nbsp;&nbsp;3     Item i =3D getItems().get(itemid);
&nbsp;&nbsp;4     <SPAN class=3DReservedWord>if</SPAN> (i =3D=3D null)
&nbsp;&nbsp;5         <SPAN class=3DReservedWord>throw</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> NotFoundException(<SPAN =
class=3DString>"Item, "</SPAN> + itemid + <SPAN class=3DString>", is not =
found"</SPAN>);
&nbsp;&nbsp;6=20
&nbsp;&nbsp;7     <SPAN class=3DReservedWord>return</SPAN> i;
&nbsp;&nbsp;8 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>This exception is a Jersey specific exception that extends <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/WebApp=
licationException.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">WebApplicationException</A> =
and=20
builds a HTTP response with the 404 status code and an optional message =
as the=20
body of the response:</P>
<DIV class=3Dexample><A name=3Dd0e922></A>
<P class=3Dtitle><B>Example&nbsp;2.27.&nbsp;Jersey specific exception=20
implementation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting><SPAN =
class=3DReservedWord>&nbsp;&nbsp;1 public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> NotFoundException <SPAN =
class=3DReservedWord>extends</SPAN> WebApplicationException {
&nbsp;&nbsp;2=20
&nbsp;&nbsp;3     <SPAN class=3DComment>/**</SPAN>
&nbsp;&nbsp;4 <SPAN class=3DComment>     * Create a HTTP 404 (Not Found) =
exception.</SPAN>
&nbsp;&nbsp;5 <SPAN class=3DComment>     */</SPAN>
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>public</SPAN> =
NotFoundException() {
&nbsp;&nbsp;7         <SPAN =
class=3DReservedWord>super</SPAN>(Responses.notFound().build());
&nbsp;&nbsp;8     }
&nbsp;&nbsp;9=20
&nbsp;10     <SPAN class=3DComment>/**</SPAN>
&nbsp;11 <SPAN class=3DComment>     * Create a HTTP 404 (Not Found) =
exception.</SPAN>
&nbsp;12 <SPAN class=3DComment>     * @param message the String that is =
the entity of the 404 response.</SPAN>
&nbsp;13 <SPAN class=3DComment>     */</SPAN>
&nbsp;14     <SPAN class=3DReservedWord>public</SPAN> =
NotFoundException(String message) {
&nbsp;15         <SPAN =
class=3DReservedWord>super</SPAN>(Response.status(Responses.NOT_FOUND).
&nbsp;16                 entity(message).type(<SPAN =
class=3DString>"text/plain"</SPAN>).build());
&nbsp;17     }
&nbsp;18=20
&nbsp;19 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>In other cases it may not be appropriate to throw instances of <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/WebApp=
licationException.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">WebApplicationException</A>,=
 or=20
classes that extend <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/WebApp=
licationException.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">WebApplicationException</A>,=
 and=20
instead it may be preferable to map an existing exception to a response. =
For=20
such cases it is possible to use the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/ext/Ex=
ceptionMapper.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ExceptionMapper</A>=20
interface. For example, the following maps the <A=20
href=3D"http://java.sun.com/javaee/5/docs/api/javax/persistence/EntityNot=
FoundException.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">EntityNotFoundException</A> =
to a 404=20
(Not Found) response:</P>
<DIV class=3Dexample><A name=3Dd0e942></A>
<P class=3Dtitle><B>Example&nbsp;2.28.&nbsp;Mapping generic exceptions =
to=20
responses</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Provider
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> EntityNotFoundMapper <SPAN =
class=3DReservedWord>implements</SPAN>
&nbsp;&nbsp;3         =
ExceptionMapper&lt;javax.persistence.EntityNotFoundException&gt; {
&nbsp;&nbsp;4     <SPAN class=3DReservedWord>public</SPAN> Response =
toResponse(javax.persistence.EntityNotFoundException ex) {
&nbsp;&nbsp;5         <SPAN class=3DReservedWord>return</SPAN> =
Response.status(404).
&nbsp;&nbsp;6             entity(ex.getMessage()).
&nbsp;&nbsp;7             type(<SPAN =
class=3DString>"text/plain"</SPAN>).
&nbsp;&nbsp;8             build();
&nbsp;&nbsp;9     }
&nbsp;10 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>The above class is annotated with <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/ext/Pr=
ovider.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Provider</A>, this=20
declares that the class is of interest to the JAX-RS runtime. Such a =
class may=20
be added to the set of classes of the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/A=
pplication.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Application</A> instance=20
that is configured. When an application throws an <A=20
href=3D"http://java.sun.com/javaee/5/docs/api/javax/persistence/EntityNot=
FoundException.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">EntityNotFoundException</A> =
the <CODE=20
class=3Dliteral>toResponse</CODE> method of the <CODE=20
class=3Dliteral>EntityNotFoundMapper</CODE> instance will be =
invoked.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e964></A>2.9.&nbsp;Conditional=20
GETs and Returning 304 (Not Modified) Responses</H2></DIV></DIV></DIV>
<P>Conditional GETs are a great way to reduce bandwidth, and potentially =

server-side peformance, depending on how the information used to =
determine=20
conditions is calculated. A well-designed web site may return 304 (Not =
Modified)=20
responses for the many of the static images it serves.</P>
<P>JAX-RS provides support for conditional GETs using the contextual =
interface=20
<A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/R=
equest.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Request</A>.</P>
<P>The following example shows conditional GET support from the =
sparklines=20
sample: </P>
<DIV class=3Dexample><A name=3Dd0e977></A>
<P class=3Dtitle><B>Example&nbsp;2.29.&nbsp;Conditional GET =
support</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting><SPAN =
class=3DReservedWord>&nbsp;&nbsp;1 public</SPAN> SparklinesResource(
&nbsp;&nbsp;2         @QueryParam(<SPAN class=3DString>"d"</SPAN>) =
IntegerList data,
&nbsp;&nbsp;3         @DefaultValue(<SPAN class=3DString>"0,100"</SPAN>) =
@QueryParam(<SPAN class=3DString>"limits"</SPAN>) Interval limits,
&nbsp;&nbsp;4         @Context Request request,
&nbsp;&nbsp;5         @Context UriInfo ui) {
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>if</SPAN> (data =3D=3D =
null)
&nbsp;&nbsp;7         <SPAN class=3DReservedWord>throw</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> WebApplicationException(400);
&nbsp;&nbsp;8=20
&nbsp;&nbsp;9     <SPAN class=3DReservedWord>this</SPAN>.data =3D data;
&nbsp;10=20
&nbsp;11     <SPAN class=3DReservedWord>this</SPAN>.limits =3D limits;
&nbsp;12=20
&nbsp;13     <SPAN class=3DReservedWord>if</SPAN> =
(!limits.contains(data))
&nbsp;14         <SPAN class=3DReservedWord>throw</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> WebApplicationException(400);
&nbsp;15=20
&nbsp;16     <SPAN class=3DReservedWord>this</SPAN>.tag =3D =
computeEntityTag(ui.getRequestUri());
&nbsp;17     <SPAN class=3DReservedWord>if</SPAN> =
(request.getMethod().equals(<SPAN class=3DString>"GET"</SPAN>)) {
&nbsp;18         Response.ResponseBuilder rb =3D =
request.evaluatePreconditions(tag);
&nbsp;19         <SPAN class=3DReservedWord>if</SPAN> (rb !=3D null)
&nbsp;20             <SPAN class=3DReservedWord>throw</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> WebApplicationException(rb.build());
&nbsp;21     }
&nbsp;22 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>The constructor of the <CODE class=3Dliteral>SparklinesResouce</CODE> =
root=20
resource class computes an entity tag from the request URI and then =
calls the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/R=
equest.html#evaluatePreconditions(javax.ws.rs.core.EntityTag)"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">request.evaluatePrecondition=
s</A>=20
with that entity tag. If a client request contains an <CODE=20
class=3Dliteral>If-None-Match</CODE> header with a value that contains =
the same=20
entity tag that was calculated then the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/R=
equest.html#evaluatePreconditions(javax.ws.rs.core.EntityTag)"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">evaluatePreconditions</A>=20
returns a pre-filled out response, with the 304 status code and entity =
tag set,=20
that may be built and returned. Otherwise, <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/R=
equest.html#evaluatePreconditions(javax.ws.rs.core.EntityTag)"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">evaluatePreconditions</A>=20
returns <CODE class=3Dliteral>null</CODE> and the normal response can be =

returned.</P>
<P>Notice that in this example the constructor of a resource class can =
be used=20
perform actions that may otherwise have to be duplicated to invoked for =
each=20
resource method.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1004></A>2.10.&nbsp;Life-cycle of=20
Root Resource Classes</H2></DIV></DIV></DIV>
<P>By default the life-cycle of root resource classes is per-request, =
namely=20
that a new instance of a root resource class is created every time the =
request=20
URI path matches the root resource. This makes for a very natural =
programming=20
model where constructors and fields can be utilized (as in the previous =
section=20
showing the constructor of the <CODE =
class=3Dliteral>SparklinesResource</CODE>=20
class) without concern for multiple concurrent requests to the same=20
resource.</P>
<P>In general this is unlikely to be a cause of performance issues. =
Class=20
construction and garbage collection of JVMs has vastly improved over the =
years=20
and many objects will be created and discarded to serve and process the =
HTTP=20
request and return the HTTP response.</P>
<P>Instances of singleton root resource classes can be declared by an =
instance=20
of <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/A=
pplication.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Application</A>.</P>
<P>Jersey supports two further life-cycles using Jersey specific =
annotations. If=20
a root resource class is annotated with @Singleton then only one =
instance is=20
created per-web application. If a root resource class is annotated with=20
@PerSession then one instance is created per web session and stored as a =
session=20
attribute.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e1021></A>2.11.&nbsp;Security</H2></DIV></DIV></DIV>
<P>Security information is available by obtaining the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/S=
ecurityContext.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">SecurityContext</A> using=20
<A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/C=
ontext.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Context</A>, =
which is=20
essentially the equivalent functionality available on the <A=20
href=3D"http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServ=
letRequest.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">HttpServletRequest</A>.</P>
<P><A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/S=
ecurityContext.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">SecurityContext</A> can=20
be used in conjunction with sub-resource locators to return different =
resources=20
if the user principle is included in a certain role. For example, a =
sub-resource=20
locator could return a different resource if a user is a preferred =
customer:</P>
<DIV class=3Dexample><A name=3Dd0e1040></A>
<P class=3Dtitle><B>Example&nbsp;2.30.&nbsp;Accessing <CODE=20
class=3Dcode>SecurityContext</CODE></B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"basket"</SPAN>)
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> =
ShoppingBasketResource get(@Context SecurityContext sc) {
&nbsp;&nbsp;3     <SPAN class=3DReservedWord>if</SPAN> =
(sc.isUserInRole(<SPAN class=3DString>"PreferredCustomer"</SPAN>) {
&nbsp;&nbsp;4        <SPAN class=3DReservedWord>return</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> =
PreferredCustomerShoppingBaskestResource();
&nbsp;&nbsp;5     } <SPAN class=3DReservedWord>else</SPAN> {
&nbsp;&nbsp;6        <SPAN class=3DReservedWord>return</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> ShoppingBasketResource();
&nbsp;&nbsp;7     }
&nbsp;&nbsp;8 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1047></A>2.12.&nbsp;Rules of=20
Injection</H2></DIV></DIV></DIV>
<P>Previous sections have presented examples of annotated types, mostly=20
annotated method parameters but also annotated fields of a class, for =
the=20
injection of values onto those types.</P>
<P>This section presents the rules of injection of values on annotated =
types.=20
Injection can be performed on fields, constructor parameters,=20
resource/sub-resource/sub-resource locator method parameters and bean =
setter=20
methods. The following presents an example of all such injection cases: =
</P>
<DIV class=3Dexample><A name=3Dd0e1055></A>
<P class=3Dtitle><B>Example&nbsp;2.31.&nbsp;Injection</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"id: \d+"</SPAN>)
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> InjectedResource {
&nbsp;&nbsp;3     <SPAN class=3DComment>// Injection onto field</SPAN>
&nbsp;&nbsp;4     @DefaultValue(<SPAN class=3DString>"q"</SPAN>) =
@QueryParam(<SPAN class=3DString>"p"</SPAN>)
&nbsp;&nbsp;5     <SPAN class=3DReservedWord>private</SPAN> String p;
&nbsp;&nbsp;6=20
&nbsp;&nbsp;7     <SPAN class=3DComment>// Injection onto constructor =
parameter</SPAN>
&nbsp;&nbsp;8     <SPAN class=3DReservedWord>public</SPAN> =
InjectedResource(@PathParam(<SPAN class=3DString>"id"</SPAN>) <SPAN =
class=3DReservedWord>int</SPAN> id) { ... }
&nbsp;&nbsp;9=20
&nbsp;10     <SPAN class=3DComment>// Injection onto resource method =
parameter</SPAN>
&nbsp;11     @GET
&nbsp;12     <SPAN class=3DReservedWord>public</SPAN> String =
get(@Context UriInfo ui) { ... }
&nbsp;13=20
&nbsp;14     <SPAN class=3DComment>// Injection onto sub-resource =
resource method parameter</SPAN>
&nbsp;15     @Path(<SPAN class=3DString>"sub-id"</SPAN>)
&nbsp;16     @GET
&nbsp;17     <SPAN class=3DReservedWord>public</SPAN> String =
get(@PathParam(<SPAN class=3DString>"sub-id"</SPAN>) String id) { ... }
&nbsp;18=20
&nbsp;19     <SPAN class=3DComment>// Injection onto sub-resource =
locator method parameter</SPAN>
&nbsp;20     @Path(<SPAN class=3DString>"sub-id"</SPAN>)
&nbsp;21     <SPAN class=3DReservedWord>public</SPAN> SubResource =
getSubResource(@PathParam(<SPAN class=3DString>"sub-id"</SPAN>) String =
id) { ... }
&nbsp;22=20
&nbsp;23     <SPAN class=3DComment>// Injection using bean setter =
method</SPAN>
&nbsp;24     @HeaderParam(<SPAN class=3DString>"X-header"</SPAN>)
&nbsp;25     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> setHeader(String header) { ... }
&nbsp;26 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>There are some restrictions when injecting on to resource classes =
with a=20
life-cycle other than per-request. In such cases it is not possible to =
injected=20
onto fields for the annotations associated with extraction of request=20
parameters. However, it is possible to use the <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/C=
ontext.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Context</A> =
annotation=20
on fields, in such cases a thread local proxy will be injected.</P>
<P>The <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/FormPa=
ram.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@FormParam</A> annotation=20
is special and may only be utilized on resource and sub-resource =
methods. This=20
is because it extracts information from a request entity.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1070></A>2.13.&nbsp;Use of=20
@Context</H2></DIV></DIV></DIV>
<P>Previous sections have introduced the use of <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/C=
ontext.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Context</A>. =
<A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/spec/spec3.html#x3=
-520005"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Chapter 5</A> =
of the=20
JAX-RS specification presents all the standard JAX-RS Java types that =
may be=20
used with <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/C=
ontext.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Context</A>.</P>
<P>When deploying a JAX-RS application using servlet then <A=20
href=3D"http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletConfig=
.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ServletConfig</A>, <A=20
href=3D"http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContex=
t.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ServletContext</A>, <A=20
href=3D"http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServ=
letRequest.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">HttpServletRequest</A>=20
and <A=20
href=3D"http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServ=
letResponse.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">HttpServletResponse</A>=20
are available using <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/C=
ontext.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">@Context</A>.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1101></A>2.14.&nbsp;Annotations=20
Defined By JAX-RS</H2></DIV></DIV></DIV>
<P>For a list of the annotations specified by JAX-RS see <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/spec/spec3.html#x3=
-66000A"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Appendix =
A</A> of the=20
specification.</P></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A name=3Dclient-api></A>Chapter&nbsp;3.&nbsp;Client=20
API</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1113">3.1.=20
  Introduction</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1137">3.2.=20
  Uniform Interface Constraint</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1182">3.3.=20
  Ease of use and reusing JAX-RS artifacts</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1267">3.4.=20
  Getting started with the Jersey client</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1288">3.5.=20
  Overview of the API</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1299">3.5.1.=20
    Configuring a Client and WebResource</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1355">3.5.2.=20
    Building a request</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1412">3.5.3.=20
    Receiving a response</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1440">3.5.4.=20
    Creating new WebResources from a WebResource</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1454">3.5.5.=20
    Java instances and types for representations</A></SPAN></DT></DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1481">3.6.=20
  Adding support for new representations</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1511">3.7.=20
  Using filters</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1605">3.7.1.=20
    Supported filters</A></SPAN></DT></DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1649">3.8.=20
  Testing services</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1698">3.9.=20
  Security with Http(s)URLConnection</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1701">3.9.1.=20
    With Http(s)URLConnection</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1743">3.9.2.=20
    With Apache HTTP client</A></SPAN></DT></DL></DD></DL></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e1113></A>3.1.&nbsp;Introduction</H2></DIV></DIV></DIV>
<P>This section introduces the client API and some features such as =
filters and=20
how to use them with security features in the JDK. The Jersey client API =
is a=20
high-level Java based API for interoperating with RESTful Web services. =
It makes=20
it very easy to interoperate with RESTful Web services and enables a =
developer=20
to concisely and efficiently implement a reusable client-side solution =
that=20
leverages existing and well established client-side HTTP =
implementations. </P>
<P>The Jersey client API can be utilized to interoperate with any =
RESTful Web=20
service, implemented using one of many frameworks, and is not restricted =
to=20
services implemented using JAX-RS. However, developers familiar with =
JAX-RS=20
should find the Jersey client API complementary to their services, =
especially if=20
the client API is utilized by those services themselves, or to test =
those=20
services. </P>
<P>The goals of the Jersey client API are threefold:</P>
<DIV class=3Dorderedlist>
<OL type=3D1>
  <LI>
  <P>Encapsulate a key constraint of the REST architectural style, =
namely the=20
  Uniform Interface Constraint and associated data elements, as =
client-side Java=20
  artifacts; </P>
  <LI>
  <P>Make it as easy to interoperate with RESTful Web services as JAX-RS =
makes=20
  it easy to build RESTful Web services; and </P>
  <LI>
  <P>Leverage artifacts of the JAX-RS API for the client side. Note that =
JAX-RS=20
  is currently a server-side only API. </P></LI></OL></DIV>
<P>The Jersey Client API supports a pluggable architecture to enable the =
use of=20
different underlying HTTP client implementations. Two such =
implementations are=20
supported and leveraged: the <CODE =
class=3Dliteral>Http(s)URLConnection</CODE>=20
classes supplied with the JDK; and the Apache HTTP client. </P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1137></A>3.2.&nbsp;Uniform=20
Interface Constraint</H2></DIV></DIV></DIV>
<P>The uniform interface constraint bounds the architecture of RESTful =
Web=20
services so that a client, such as a browser, can utilize the same =
interface to=20
communicate with any service. This is a very powerful concept in =
software=20
engineering that makes Web-based search engines and service mash-ups =
possible.=20
It induces properties such as: </P>
<DIV class=3Dorderedlist>
<OL type=3D1>
  <LI>
  <P>simplicity, the architecture is easier to understand and maintain; =
and</P>
  <LI>
  <P>modifiability or loose coupling, clients and services can evolve =
over time=20
  perhaps in new and unexpected ways, while retaining backwards =
compatibility.=20
  </P></LI></OL></DIV>
<P>Further constraints are required:</P>
<DIV class=3Dorderedlist>
<OL type=3D1>
  <LI>
  <P>every resource is identified by a URI;</P>
  <LI>
  <P>a client interacts with the resource via HTTP requests and =
responses using=20
  a fixed set of HTTP methods; </P>
  <LI>
  <P>one or more representations can be retured and are identified by =
media=20
  types; and</P>
  <LI>
  <P>the contents of which can link to further =
resources.</P></LI></OL></DIV>
<P>The above process repeated over and again should be familiar to =
anyone who=20
has used a browser to fill in HTML forms and follow links. That same =
process is=20
applicable to non-browser based clients. </P>
<P>Many existing Java-based client APIs, such as the Apache HTTP client =
API or=20
<CODE class=3Dliteral>java.net.HttpURLConnection</CODE> supplied with =
the JDK=20
place too much focus on the Client-Server constraint for the exchanges =
of=20
request and responses rather than a resource, identified by a URI, and =
the use=20
of a fixed set of HTTP methods. </P>
<P>A resource in the Jersey client API is an instance of the Java class =
<A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/WebResource.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">WebResource</A>, and=20
encapsulates a URI. The fixed set of HTTP methods are methods on <CODE=20
class=3Dliteral>WebResource</CODE> or if using the builder pattern (more =
on this=20
later) are the last methods to be called when invoking an HTTP method on =
a=20
resource. The representations are Java types, instances of which, may =
contain=20
links that new instances of <CODE class=3Dliteral>WebResource</CODE> may =
be=20
created from. </P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1182></A>3.3.&nbsp;Ease of use=20
and reusing JAX-RS artifacts</H2></DIV></DIV></DIV>
<P>Since a resource is represented as a Java type it makes it easy to =
configure,=20
pass around and inject in ways that is not so intuitive or possible with =
other=20
client-side APIs. </P>
<P>The Jersey Client API reuses many aspects of the JAX-RS and the =
Jersey=20
implementation such as:</P>
<DIV class=3Dorderedlist>
<OL type=3D1>
  <LI>
  <P>URI building using <A=20
  =
href=3D"https://jsr311.dev.java.net/nonav/releases/1.0/javax/ws/rs/core/U=
riBuilder.html"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriBuilder</A> and <A=20
  =
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/uri/UriTemplate.html"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriTemplate</A> to=20
  safely build URIs; </P>
  <LI>
  <P>Support for Java types of representations such as <CODE=20
  class=3Dliteral>byte[]</CODE>, <CODE class=3Dliteral>String</CODE>, =
<CODE=20
  class=3Dliteral>InputStream</CODE>, <CODE class=3Dliteral>File</CODE>, =
<CODE=20
  class=3Dliteral>DataSource</CODE> and JAXB beans in addition to Jersey =
specific=20
  features such as <A=20
  =
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/json/package-summary.html"=20
  target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">JSON</A> =
support and <A=20
  =
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/contribs/jersey-mul=
tipart/index.html"=20
  target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">MIME =
Multipart</A>=20
  support. </P>
  <LI>
  <P>Using the builder pattern to make it easier to construct=20
requests.</P></LI></OL></DIV>
<P>Some APIs, like the Apache HTTP client or <A=20
href=3D"http://java.sun.com/j2se/1.5.0/docs/api/java/net/HttpURLConnectio=
n.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">java.net.HttpURLConnection</=
A>, can=20
be rather hard to use and/or require too much code to do something =
relatively=20
simple. </P>
<P>This is why the Jersey Client API provides support for wrapping=20
HttpURLConnection and the Apache HTTP client. Thus it is possible to get =
the=20
benefits of the established implementations and features while getting =
the ease=20
of use benefit. </P>
<P>It is not intuitive to send a POST request with form parameters and =
receive a=20
response as a JAXB object with such an API. For example with the Jersey =
API this=20
is very easy: </P>
<DIV class=3Dexample><A name=3Dd0e1235></A>
<P class=3Dtitle><B>Example&nbsp;3.1.&nbsp;POST request with form=20
parameters</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
Form f =3D <SPAN class=3DReservedWord>new</SPAN> Form();
&nbsp;&nbsp;2 f.add(=93x=94, =93foo=94);
&nbsp;&nbsp;3 f.add(=93y=94, =93bar=94);
&nbsp;&nbsp;4=20
&nbsp;&nbsp;5 Client c =3D Client.create();
&nbsp;&nbsp;6 WebResource r =3D c.resource(=93http:<SPAN =
class=3DComment>//localhost:8080/form=94);</SPAN>
&nbsp;&nbsp;7=20
&nbsp;&nbsp;8 JAXBBean bean =3D r.
&nbsp;&nbsp;9     type(MediaType.APPLICATION_FORM_URLENCODED_TYPE)
&nbsp;10     .accept(MediaType.APPLICATION_JSON_TYPE)
&nbsp;11     .post(JAXBBean.<SPAN class=3DReservedWord>class</SPAN>, =
f);</PRE></DIV></DIV>
<P><BR class=3Dexample-break>In the above code a <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/representation/Form.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Form</A> is =
created with=20
two parameters, a new <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/WebResource.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">WebResource</A> instance=20
is created from a <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/Client.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Client</A> =
then the <CODE=20
class=3Dliteral>Form</CODE> instance is <CODE =
class=3Dliteral>POST</CODE>ed to the=20
resource, identified with the form media type, and the response is =
requested as=20
an instance of a JAXB bean with an acceptable media type identifying the =
Java=20
Script Object Notation (JSON) format. The Jersey client API manages the=20
serialization of the <CODE class=3Dliteral>Form</CODE> instance to =
produce the=20
request and de-serialization of the response to consume as an instance =
of a JAXB=20
bean. </P>
<P>If the code above was written using <CODE=20
class=3Dliteral>HttpURLConnection</CODE> then the developer would have =
to write=20
code to serialize the form sent in the POST request and de-serialize the =

response to the JAXB bean. In addition further code would have to be =
written to=20
make it easy to reuse the same resource =93http://localhost:8080/form=94 =
that is=20
encapsulated in the <CODE class=3Dliteral>WebResource</CODE> type. =
</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1267></A>3.4.&nbsp;Getting=20
started with the Jersey client</H2></DIV></DIV></DIV>
<P>Refer to the <A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#chapter_deps"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">dependencies =
chapter</A>,=20
and specifically the <A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#core_client"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Core =
client</A> section,=20
for details on the dependencies when using the Jersey client with Maven =
and Ant.=20
</P>
<P>Refer to the <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/package-summary.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Java API=20
documentation</A> for details on the Jersey client API packages and =
classes.=20
</P>
<P>Refer to the <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/contribs/jersey-apa=
che-client/index.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Java API =
Apache HTTP=20
client documentation</A> for details on how to use the Jersey client API =
with=20
the Apache HTTP client. </P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1288></A>3.5.&nbsp;Overview of=20
the API</H2></DIV></DIV></DIV>
<P>To utilize the client API it is first necessary to create an instance =
of a <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/Client.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Client</A>, =
for example:=20
</P><PRE class=3Dprogramlisting>    Client c =3D Client.create();</PRE>
<P></P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e1299></A>3.5.1.&nbsp;Configuring a Client =
and=20
WebResource</H3></DIV></DIV></DIV>
<P>The client instance can then be configured by setting properties on =
the map=20
returned from the <CODE class=3Dliteral>getProperties</CODE> methods or =
by calling=20
the specific setter methods, for example the following configures the =
client to=20
perform automatic redirection for appropriate responses: </P><PRE =
class=3Dprogramlisting>    c.getProperties().put(
        ClientConfig.PROPERTY_FOLLOW_REDIRECTS, true);</PRE>
<P>which is equivalent to the following: </P><PRE =
class=3Dprogramlisting>    c.setFollowRedirects(true);</PRE>
<P>Alternatively it is possible to create a <CODE =
class=3Dliteral>Client</CODE>=20
instance using a <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/config/ClientConfig.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ClientConfig</A> object=20
for example: </P><PRE class=3Dprogramlisting>    ClientConfig cc =3D =
<SPAN class=3DReservedWord>new</SPAN> DefaultClientConfig();
    cc.getProperties().put(
        ClientConfig.PROPERTY_FOLLOW_REDIRECTS, true);
    Client c =3D Client.create(cc);</PRE>
<P></P>
<P>Once a client instance is created and configured it is then possible =
to=20
obtain a <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/WebResource.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">WebResource</A> instance,=20
which will inherit the configuration declared on the client instance. =
For=20
example, the following creates a reference to a Web resource with the =
URI=20
=93http://localhost:8080/xyz=94: </P><PRE class=3Dprogramlisting>    =
WebResource r =3D c.resource(=93http:<SPAN =
class=3DComment>//localhost:8080/xyz=94);</SPAN></PRE>
<P>and redirection will be configured for responses to requests invoked =
on the=20
Web resource. </P>
<P><CODE class=3Dliteral>Client</CODE> instances are expensive =
resources. It is=20
recommended a configured instance is reused for the creation of Web =
resources.=20
The creation of Web resources, the building of requests and receiving of =

responses are guaranteed to be thread safe. Thus a <CODE=20
class=3Dliteral>Client</CODE> instance and <CODE =
class=3Dliteral>WebResource</CODE>=20
instances may be shared between multiple threads. </P>
<P>In the above cases a <CODE class=3Dliteral>WebResource</CODE> =
instance will=20
utilize <CODE class=3Dliteral>HttpUrlConnection</CODE> or <CODE=20
class=3Dliteral>HttpsUrlConnection</CODE>, if the URI scheme of the =
<CODE=20
class=3Dliteral>WebResource</CODE> is =93http=94 or =93https=94 =
respectively. </P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e1355></A>3.5.2.&nbsp;Building a=20
request</H3></DIV></DIV></DIV>
<P>Requests to a Web resource are built using the builder pattern (see =
<A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/RequestBuilder.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">RequestBuilder</A>) where=20
the terminating method corresponds to an HTTP method (see <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/UniformInterface.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UniformInterface</A>).=20
For example, </P><PRE class=3Dprogramlisting>    String response =3D =
r.accept(
        MediaType.APPLICATION_JSON_TYPE,
        MediaType.APPLICATION_XML_TYPE).
        header(=93X-FOO=94, =93BAR=94).
        get(String.<SPAN class=3DReservedWord>class</SPAN>);</PRE>
<P></P>
<P>The above sends a GET request with an <CODE =
class=3Dliteral>Accept</CODE>=20
header of <CODE class=3Dliteral>application/json</CODE>, <CODE=20
class=3Dliteral>application/xml</CODE> and a non-standard header <CODE=20
class=3Dliteral>X-FOO</CODE> of <CODE class=3Dliteral>BAR</CODE>. </P>
<P>If the request has a request entity (or representation) then an =
instance of a=20
Java type can be declared in the terminating HTTP method, for <CODE=20
class=3Dliteral>PUT</CODE>, <CODE class=3Dliteral>POST</CODE> and <CODE=20
class=3Dliteral>DELETE</CODE> requests. For example, the following sends =
a POST=20
request: </P><PRE class=3Dprogramlisting>    String request =3D =
=93content=94;
    String response =3D r.accept(
        MediaType.APPLICATION_JSON_TYPE,
        MediaType.APPLICATION_XML_TYPE).
        header(=93X-FOO=94, =93BAR=94).
        post(String.<SPAN class=3DReservedWord>class</SPAN>, =
request);</PRE>
<P>where the String =93content=94 will be serialized as the request =
entity (see the=20
section =93Java instances and types for representations=94 section for =
further=20
details on the supported Java types). The <CODE=20
class=3Dliteral>Content-Type</CODE> of the request entity may be =
declared using=20
the <CODE class=3Dliteral>type</CODE> builder method as follows: =
</P><PRE class=3Dprogramlisting>    String response =3D r.accept(
         MediaType.APPLICATION_JSON_TYPE,
         MediaType.APPLICATION_XML_TYPE).
         header(=93X-FOO=94, =93BAR=94).
         type(MediaType.TEXT_PLAIN_TYPE).
         post(String.<SPAN class=3DReservedWord>class</SPAN>, =
request);</PRE>
<P>or alternatively the request entity and type may be declared using =
the entity=20
method as follows: </P><PRE class=3Dprogramlisting>    String response =
=3D r.accept(
         MediaType.APPLICATION_JSON_TYPE,
         MediaType.APPLICATION_XML_TYPE).
         header(=93X-FOO=94, =93BAR=94).
         entity(request, MediaType.TEXT_PLAIN_TYPE).
         post(String.<SPAN class=3DReservedWord>class</SPAN>);</PRE>
<P></P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e1412></A>3.5.3.&nbsp;Receiving a=20
response</H3></DIV></DIV></DIV>
<P>If the response has a entity (or representation) then the Java type =
of the=20
instance required is declared in the terminating HTTP method. In the =
above=20
examples a response entity is expected and an instance of <CODE=20
class=3Dliteral>String</CODE> is requested. The response entity will be=20
de-serialized to a String instance.</P>
<P>If response meta-data is required then the Java type <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/ClientResponse.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ClientResponse</A> can be=20
declared from which the response status, headers and entity may be =
obtained. For=20
example, the following gets both the entity tag and response entity from =
the=20
response: </P><PRE class=3Dprogramlisting>    ClientResponse response =
=3D r.get(ClientResponse.<SPAN class=3DReservedWord>class</SPAN>);
    EntityTag e =3D response.getEntityTag();
    String entity =3D response.getEntity(String.<SPAN =
class=3DReservedWord>class</SPAN>);</PRE>
<P>If the <CODE class=3Dliteral>ClientResponse</CODE> type is not =
utilized and the=20
response status is greater than or equal to 300 then the runtime =
exception <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/UniformInterfaceException.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UniformInterfaceException</A=
> is=20
thrown. This exception may be caught and the <CODE=20
class=3Dliteral>ClientResponse</CODE> obtained as follows: </P><PRE =
class=3Dprogramlisting>    <SPAN class=3DReservedWord>try</SPAN> {
        String entity =3D r.get(String.<SPAN =
class=3DReservedWord>class</SPAN>);
    } <SPAN class=3DReservedWord>catch</SPAN> (UniformInterfaceException =
ue) {
        ClientResponse response =3D ue.getResponse();
    }</PRE></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e1440></A>3.5.4.&nbsp;Creating new =
WebResources from a=20
WebResource</H3></DIV></DIV></DIV>
<P>A new <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/WebResource.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">WebResource</A> can be=20
created from an existing <CODE class=3Dliteral>WebResource</CODE> by =
building from=20
the latter's URI. Thus it is possible to build the request URI before =
building=20
the request. For example, the following appends a new path segment and =
adds some=20
query parameters: </P><PRE class=3Dprogramlisting>    WebResource r =3D =
c.resource(=93http:<SPAN =
class=3DComment>//localhost:8080/xyz=94);</SPAN>

    MultivaluedMap&lt;String, String&gt; params =3D =
MultivaluedMapImpl();
    params.add(=93foo=94, =93x=94);
    params.add(=93bar=94, =93y=94);
   =20
    String response =3D r.path(=93abc=94).
        queryParams(params).
        get(String.<SPAN class=3DReservedWord>class</SPAN>);</PRE>
<P>that results in a GET request to the URI=20
=93http://localhost:8080/xyz/abc?foo=3Dx&amp;bar=3Dy=94.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e1454></A>3.5.5.&nbsp;Java instances and =
types for=20
representations</H3></DIV></DIV></DIV>
<P>All the Java types for representations supported by the Jersey server =
side=20
for requests and responses are also supported on the client side. This =
includes=20
the standard Java types as specified by JAX-RS in <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.0/spec/index.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">section =
4.2.4</A> in=20
addition to JSON, Atom and Multipart MIME as supported by Jersey. </P>
<P>To process a response entity (or representation) as a stream of bytes =
use=20
InputStream as follows: </P><PRE class=3Dprogramlisting>    InputStream =
in =3D r.get(InputStream.<SPAN class=3DReservedWord>class</SPAN>);
    <SPAN class=3DComment>// Read from the stream</SPAN>
    in.close();</PRE>
<P>Note that it is important to close the stream after processing so =
that=20
resources are freed up.</P>
<P>To <CODE class=3Dliteral>POST</CODE> a file use <CODE =
class=3Dliteral>File</CODE>=20
as follows: </P><PRE class=3Dprogramlisting>    File f =3D ...
    String response =3D r.post(String.<SPAN =
class=3DReservedWord>class</SPAN>, f);</PRE>
<P>Refer to the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/jaxb/1.4/=
jaxb-1.4-project.zip"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">JAXB =
sample</A> to see=20
how JAXB with XML and JSON can be utilized with the client API (more=20
specifically, see the unit tests). </P></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1481></A>3.6.&nbsp;Adding support=20
for new representations</H2></DIV></DIV></DIV>
<P>The support for new application-defined representations as Java types =

requires the implementation of the same provider-based interfaces as for =
the=20
server side JAX-RS API, namely <A=20
href=3D"https://jsr311.dev.java.net/nonav/javadoc/javax/ws/rs/ext/Message=
BodyReader.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">MessageBodyReader</A> and=20
<A=20
href=3D"https://jsr311.dev.java.net/nonav/javadoc/javax/ws/rs/ext/Message=
BodyWriter.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">MessageBodyWriter</A>,=20
respectively, for request and response entities (or inbound and outbound =

representations). Refer to the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/entity-pr=
ovider/1.4/entity-provider-1.4-project.zip"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">entity =
provider</A>=20
sample for such implementations utilized on the server side. </P>
<P>Classes or implementations of the provider-based interfaces need to =
be=20
registered with a <CODE class=3Dliteral>ClientConfig</CODE> and passed =
to the=20
<CODE class=3Dliteral>Client</CODE> for creation. The following =
registers a=20
provider class <CODE class=3Dliteral>MyReader</CODE> which will be =
instantiated by=20
Jersey: </P><PRE class=3Dprogramlisting>    ClientConfig cc =3D <SPAN =
class=3DReservedWord>new</SPAN> DefaultClientConfig();
    cc.getClasses().add(MyReader.<SPAN =
class=3DReservedWord>class</SPAN>);
    Client c =3D Client.create(cc);</PRE>
<P>The following registers an instance or singleton of MyReader: =
</P><PRE class=3Dprogramlisting>    ClientConfig cc =3D <SPAN =
class=3DReservedWord>new</SPAN> DefaultClientConfig();
    MyReader reader =3D ...
    cc.getSingletons().add(reader);
    Client c =3D Client.create(cc);</PRE></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1511></A>3.7.&nbsp;Using=20
filters</H2></DIV></DIV></DIV>
<P>Filtering requests and responses can provide useful functionality =
that is=20
hidden from the application layer of building and sending requests, and=20
processing responses. Filters can read/modify the request URI, headers =
and=20
entity or read/modify the response status, headers and entity.</P>
<P>The <CODE class=3Dliteral>Client</CODE> and <CODE=20
class=3Dliteral>WebResource</CODE> classes extend from <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/filter/Filterable.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Filterable</A> and that=20
enables the addition of <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/filter/ClientFilter.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ClientFilter</A>=20
instances. A <CODE class=3Dliteral>WebResource</CODE> will inherit =
filters from=20
its creator, which can be a <CODE class=3Dliteral>Client</CODE> or =
another <CODE=20
class=3Dliteral>WebResource</CODE>. Additional filters can be added to a =
<CODE=20
class=3Dliteral>WebResource</CODE> after it has been created. For =
requests,=20
filters are applied in order, starting with inherited filters and =
followed by=20
the filters added to the <CODE class=3Dliteral>WebResource</CODE>. All =
filters are=20
applied in the order in which they were added. For responses, filters =
are=20
applied in reverse order, starting with the <CODE=20
class=3Dliteral>WebResource</CODE> filters and then moving to the =
inherited=20
filters. For instance, in the following example the <CODE=20
class=3Dliteral>Client</CODE> has two filters added, <CODE=20
class=3Dliteral>filter1</CODE> and <CODE class=3Dliteral>filter2</CODE>, =
in that=20
order, and the <CODE class=3Dliteral>WebResource</CODE> has one filter =
added,=20
<CODE class=3Dliteral>filter3</CODE>: </P><PRE class=3Dprogramlisting>   =
 ClientFilter filter1 =3D ...
    ClientFilter filter2 =3D ...
    Client c =3D Client.create();
    c.addFilter(filter1);
    c.addFilter(filter2);
   =20
    ClientFilter filter3 =3D ...
    WebResource r =3D c.resource(...);
    r.addFilter(filter3);</PRE>
<P>After a request has been built the request is filtered by <CODE=20
class=3Dliteral>filter1</CODE>, <CODE class=3Dliteral>filter2</CODE> and =
<CODE=20
class=3Dliteral>filter3</CODE> in that order. After the response has =
been received=20
the response is filtered by <CODE class=3Dliteral>filter3</CODE>, <CODE=20
class=3Dliteral>filter2</CODE> and <CODE class=3Dliteral>filter1</CODE> =
in that=20
order, before the response is returned.</P>
<P>Filters are implemented using the =93russian doll=94 stack-based =
pattern where a=20
filter is responsible for calling the next filter in the ordered list of =
filters=20
(or the next filter in the =93chain=94 of filters). The basic template =
for a filter=20
is as follows: </P><PRE class=3Dprogramlisting>    <SPAN =
class=3DReservedWord>class</SPAN> AppClientFilter <SPAN =
class=3DReservedWord>extends</SPAN> ClientFilter {
        <SPAN class=3DReservedWord>public</SPAN> ClientResponse =
handle(ClientRequest cr) {
            <SPAN class=3DComment>// Modify the request</SPAN>
            ClientRequest mcr =3D modifyRequest(cr);
            <SPAN class=3DComment>// Call the next filter</SPAN>
            ClientResponse resp =3D getNext().handle(mcr);
            <SPAN class=3DComment>// Modify the response</SPAN>
            <SPAN class=3DReservedWord>return</SPAN> =
modifyResponse(resp);
        }
    }</PRE>
<P>The filter modifies the request (if required) by creating a new <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/ClientRequest.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ClientRequest</A> or=20
modifying the state of the passed <CODE =
class=3Dliteral>ClientRequest</CODE>=20
before calling the next filter. The call to the next request will return =
the=20
response, a <CODE class=3Dliteral>ClientResponse</CODE>. The filter =
modifies the=20
response (if required) by creating a new <CODE=20
class=3Dliteral>ClientResponse</CODE> or modifying the state of the =
returned <CODE=20
class=3Dliteral>ClientResponse</CODE>. Then the filter returns the =
modified=20
response. Filters are re-entrant and may be called by multiple threads=20
performing requests and processing responses.</P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e1605></A>3.7.1.&nbsp;Supported=20
filters</H3></DIV></DIV></DIV>
<P>The Jersey Client API currently supports two filters:</P>
<DIV class=3Dorderedlist>
<OL type=3D1>
  <LI>
  <P>A GZIP content encoding filter, <A=20
  =
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/filter/GZIPContentEncodingFilter.html"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">GZIPContentEncodingFilter</A=
>. If=20
  this filter is added then a request entity is compressed with the =
<CODE=20
  class=3Dliteral>Content-Encoding</CODE> of <CODE =
class=3Dliteral>gzip</CODE>, and=20
  a response entity if compressed with a <CODE=20
  class=3Dliteral>Content-Encoding</CODE> of <CODE =
class=3Dliteral>gzip</CODE> is=20
  decompressed. The filter declares an <CODE=20
  class=3Dliteral>Accept-Encoding</CODE> of <CODE =
class=3Dliteral>gzip</CODE>. </P>
  <LI>
  <P>A logging filter, <A=20
  =
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/client/filter/LoggingFilter.html"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">LoggingFilter</A>. If=20
  this filter is added then the request and response headers as well as =
the=20
  entities are logged to a declared output stream if present, or to =
<CODE=20
  class=3Dliteral>System.out</CODE> if not. Often this filter will be =
placed at=20
  the end of the ordered list of filters to log the request before it is =
sent=20
  and the response after it is received. </P></LI></OL></DIV>
<P>The filters above are good examples that show how to modify or read =
request=20
and response entities. Refer to the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-client/1.4=
/jersey-client-1.4-sources.jar"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">source =
code</A> of the=20
Jersey client for more details. </P></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1649></A>3.8.&nbsp;Testing=20
services</H2></DIV></DIV></DIV>
<P>The Jersey client API was originally developed to aid the testing of =
the=20
Jersey server-side, primarily to make it easier to write functional =
tests in=20
conjunction with the JUnit framework for execution and reporting. It is =
used=20
extensively and there are currently over 1000 tests.</P>
<P>Embedded servers, Grizzly and a special in-memory server, are =
utilized to=20
deploy the test-based services. Many of the Jersey samples contain tests =
that=20
utilize the client API to server both for testing and examples of how to =
use the=20
API. The samples utilize Grizzly or embedded Glassfish to deploy the=20
services.</P>
<P>The following code snippets are presented from the single unit test =
<CODE=20
class=3Dliteral>HelloWorldWebAppTest</CODE> of the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/helloworl=
d-webapp/1.4/helloworld-webapp-1.4-project.zip"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">helloworld-webapp</A>=20
sample. The <CODE class=3Dliteral>setUp</CODE> method, called before a =
test is=20
executed, creates an instance of the Glassfish server, deploys the =
application,=20
and a <CODE class=3Dliteral>WebResource</CODE> instance that references =
the base=20
resource: </P><PRE class=3Dprogramlisting>    @Override
    <SPAN class=3DReservedWord>protected</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> setUp() <SPAN =
class=3DReservedWord>throws</SPAN> Exception {
        <SPAN class=3DReservedWord>super</SPAN>.setUp();

        <SPAN class=3DComment>// Start Glassfish</SPAN>
        glassfish =3D <SPAN class=3DReservedWord>new</SPAN> =
GlassFish(BASE_URI.getPort());
       =20
        <SPAN class=3DComment>// Deploy Glassfish referencing the =
web.xml</SPAN>
        ScatteredWar war =3D <SPAN class=3DReservedWord>new</SPAN> =
ScatteredWar(
            BASE_URI.getRawPath(), <SPAN class=3DReservedWord>new</SPAN> =
File(<SPAN class=3DString>"src/main/webapp"</SPAN>),
            <SPAN class=3DReservedWord>new</SPAN> File(<SPAN =
class=3DString>"src/main/webapp/WEB-INF/web.xml"</SPAN>),
            Collections.singleton(
                <SPAN class=3DReservedWord>new</SPAN> File(<SPAN =
class=3DString>"target/classes"</SPAN>).
                    toURI().toURL()));
        glassfish.deploy(war);
       =20
        Client c =3D Client.create();
        r =3D c.resource(BASE_URI);
    }</PRE>
<P>The <CODE class=3Dliteral>tearDown</CODE> method, called after a test =
is=20
executed, stops the Glassfish server. </P><PRE class=3Dprogramlisting>   =
 @Override
   <SPAN class=3DReservedWord>protected</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> tearDown() <SPAN =
class=3DReservedWord>throws</SPAN> Exception {
        <SPAN class=3DReservedWord>super</SPAN>.tearDown();
        glassfish.stop();
   }</PRE>
<P>The <CODE class=3Dliteral>testHelloWorld</CODE> method tests that the =
response=20
to a <CODE class=3Dliteral>GET</CODE> request to the Web resource =
returns =93Hello=20
World=94: </P><PRE class=3Dprogramlisting>    <SPAN =
class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> testHelloWorld() <SPAN =
class=3DReservedWord>throws</SPAN> Exception {
       String responseMsg =3D r.path(<SPAN =
class=3DString>"helloworld"</SPAN>).
           get(String.<SPAN class=3DReservedWord>class</SPAN>);
       assertEquals(<SPAN class=3DString>"Hello World"</SPAN>, =
responseMsg);
   }</PRE>
<P>Note the use of the <CODE class=3Dliteral>path</CODE> method on the =
<CODE=20
class=3Dliteral>WebResource</CODE> to build from the base <CODE=20
class=3Dliteral>WebResource</CODE>.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1698></A>3.9.&nbsp;Security with=20
Http(s)URLConnection</H2></DIV></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e1701></A>3.9.1.&nbsp;With=20
Http(s)URLConnection</H3></DIV></DIV></DIV>
<P>The support for security, specifically HTTP authentication and/or =
cookie=20
management with <CODE class=3Dliteral>Http(s)URLConnection</CODE> is =
limited due=20
to constraints in the API. There are currently no specific features or=20
properties on the <CODE class=3Dliteral>Client</CODE> class that can be =
set to=20
support HTTP authentication. However, since the client API, by default, =
utilizes=20
<CODE class=3Dliteral>HttpURLConnection</CODE> or <CODE=20
class=3Dliteral>HttpsURLConnection</CODE>, it is possible to configure =
system-wide=20
security settings (which is obviously not sufficient for multiple client =

configurations).</P>
<P>For HTTP authentication the <CODE =
class=3Dliteral>java.net.Authenticator</CODE>=20
can be extended and statically registered. Refer to the <A=20
href=3D"http://java.sun.com/javase/6/docs/technotes/guides/net/http-auth.=
html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Http =
authentication</A>=20
document for more details. For cookie management the <CODE=20
class=3Dliteral>java.net.CookieHandler</CODE> can be extended and =
statically=20
registered. Refer to the <A=20
href=3D"http://java.sun.com/javase/6/docs/technotes/guides/net/http-cooki=
e.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Cookie =
Management</A>=20
document for more details. </P>
<P>To utilize HTTP with SSL it is necessary to utilize the =93https=94 =
scheme. For=20
certificate-based authentication see the class <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/latest/jersey/com/sun/j=
ersey/client/urlconnection/HTTPSProperties.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">HTTPSProperties</A> for=20
how to set <CODE class=3Dliteral>javax.net.ssl.HostnameVerifier</CODE> =
and <CODE=20
class=3Dliteral>javax.net.ssl.SSLContext</CODE>. </P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e1743></A>3.9.2.&nbsp;With Apache HTTP=20
client</H3></DIV></DIV></DIV>
<P>The support for HTTP authentication and cookies is much better with =
the=20
Apache HTTP client than with <CODE =
class=3Dliteral>HttpURLConnection</CODE>. See=20
the Java documentation for the package <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/contribs/jersey-apa=
che-client/com/sun/jersey/client/apache/package-summary.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">com.sun.jersey.client.apache=
</A>, <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/contribs/jersey-apa=
che-client/com/sun/jersey/client/apache/config/ApacheHttpClientState.html=
"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ApacheHttpClientState</A>=20
and <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/contribs/jersey-apa=
che-client/com/sun/jersey/client/apache/config/ApacheHttpClientConfig.htm=
l"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ApacheHttpClientConfig</A> =
for more=20
details. </P></DIV></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A name=3Dxml></A>Chapter&nbsp;4.&nbsp;XML=20
Support</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1766">4.1.=20
  Low level XML support</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1799">4.2.=20
  Getting started with JAXB</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1866">4.3.=20
  POJOs</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1901">4.4.=20
  Using custom JAXBContext</A></SPAN></DT></DL></DIV>
<P>As you probably already know, Jersey uses MessageBodyWriters and=20
MessageBodyReaders to parse incoming request and create outgoing =
responses.=20
Every user can create its own representation but... this is not =
recommended way=20
how to do things. XML is proven standard for interchanging information,=20
especially in web services. Jerseys supports low level data types used =
for=20
direct manipulation and JAXB XML entities.</P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1766></A>4.1.&nbsp;Low level XML=20
support</H2></DIV></DIV></DIV>
<P>Jersey currently support several low level data types: <CODE=20
class=3Dcode>StreamSource</CODE>, <CODE class=3Dcode>SAXSource</CODE>, =
<CODE=20
class=3Dcode>DOMSource</CODE> and <CODE class=3Dcode>Document</CODE>. =
You can use=20
these types as return type or method (resource) parameter. Lets say we =
want to=20
test this feature and we have helloworld sample as starting point. All =
we need=20
to do is add methods (resources) which consumes and produces XML and =
types=20
mentioned above will be used.</P>
<DIV class=3Dexample><A name=3Dd0e1783></A>
<P class=3Dtitle><B>Example&nbsp;4.1.&nbsp;Low level XML test - methods =
added to=20
HelloWorldResource.java</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1  =
   @Path(<SPAN class=3DString>"1"</SPAN>)
&nbsp;&nbsp;2     @POST
&nbsp;&nbsp;3     <SPAN class=3DReservedWord>public</SPAN> StreamSource =
get1(StreamSource streamSource) {
&nbsp;&nbsp;4         <SPAN class=3DReservedWord>return</SPAN> =
streamSource;
&nbsp;&nbsp;5     }
&nbsp;&nbsp;6=20
&nbsp;&nbsp;7     @Path(<SPAN class=3DString>"2"</SPAN>)
&nbsp;&nbsp;8     @POST
&nbsp;&nbsp;9     <SPAN class=3DReservedWord>public</SPAN> SAXSource =
get2(SAXSource saxSource) {
&nbsp;10         <SPAN class=3DReservedWord>return</SPAN> saxSource;
&nbsp;11     }
&nbsp;12=20
&nbsp;13     @Path(<SPAN class=3DString>"3"</SPAN>)
&nbsp;14     @POST
&nbsp;15     <SPAN class=3DReservedWord>public</SPAN> DOMSource =
get3(DOMSource domSource) {
&nbsp;16         <SPAN class=3DReservedWord>return</SPAN> domSource;
&nbsp;17     }
&nbsp;18=20
&nbsp;19     @Path(<SPAN class=3DString>"4"</SPAN>)
&nbsp;20     @POST
&nbsp;21     <SPAN class=3DReservedWord>public</SPAN> Document =
get4(Document document) {
&nbsp;22         <SPAN class=3DReservedWord>return</SPAN> document;
&nbsp;23     }</PRE></DIV></DIV><BR class=3Dexample-break>
<P>Both MessageBodyReaders and MessageBodyWriters are used in this case, =
all we=20
need is do POST request with some XML document as a request entity. I =
want to=20
keep this as simple as possible so I'm going to send only root element =
with no=20
content: <CODE class=3Dcode>"&lt;test /&gt;"</CODE>. You can create =
Jersey client=20
to do that or use some other tool, for example <CODE =
class=3Dcode>curl</CODE> as I=20
did. (<CODE class=3Dcode>curl -v http://localhost:9998/helloworld/1 -d =
"&lt;test=20
/&gt;"</CODE>). You should get exactly same XML from our service as is =
present=20
in the request; in this case, XML headers are added to response but =
content=20
stays. Feel free to iterate through all resources.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1799></A>4.2.&nbsp;Getting=20
started with JAXB</H2></DIV></DIV></DIV>
<P>Good start for people which already have some experience with JAXB=20
annotations is JAXB sample. You can see various usecases there. This =
text is=20
mainly meant for those who don't have prior experience with JAXB. Don't =
expect=20
that all possible annotations and their combinations will be covered in =
this=20
chapter, <A href=3D"http://jaxb.dev.java.net/" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">JAXB (JSR 222 =
implementation)</A> is=20
pretty complex and comprehensive. But if you just want to know how you =
can=20
interchange XML messages with your REST service, you are looking at =
right=20
chapter.</P>
<P>Lets start with simple example. Lets say we have class <CODE=20
class=3Dcode>Planet</CODE> and service which produces "Planets"</P>
<DIV class=3Dexample><A name=3Dd0e1812></A>
<P class=3Dtitle><B>Example&nbsp;4.2.&nbsp;Planet class</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@XmlRootElement
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> Planet {
&nbsp;&nbsp;3     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>int</SPAN> id;
&nbsp;&nbsp;4     <SPAN class=3DReservedWord>public</SPAN> String name;
&nbsp;&nbsp;5     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>double</SPAN> radius;
&nbsp;&nbsp;6 }
&nbsp;&nbsp;7             </PRE></DIV></DIV><BR class=3Dexample-break>
<DIV class=3Dexample><A name=3Dd0e1817></A>
<P class=3Dtitle><B>Example&nbsp;4.3.&nbsp;Resource class</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"planet"</SPAN>)
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> Resource {
&nbsp;&nbsp;3=20
&nbsp;&nbsp;4     @GET
&nbsp;&nbsp;5     @Produces(MediaType.APPLICATION_XML)
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>public</SPAN> Planet =
getPlanet() {
&nbsp;&nbsp;7         Planet p =3D <SPAN class=3DReservedWord>new</SPAN> =
Planet();
&nbsp;&nbsp;8         p.id =3D 1;
&nbsp;&nbsp;9         p.name =3D <SPAN class=3DString>"Earth"</SPAN>;
&nbsp;10         p.radius =3D 1.0;
&nbsp;11=20
&nbsp;12         <SPAN class=3DReservedWord>return</SPAN> p;
&nbsp;13     }
&nbsp;14 }            </PRE></DIV></DIV><BR class=3Dexample-break>
<P>You can see there is some extra annotation declared on <CODE=20
class=3Dcode>Planet</CODE> class. Concretely <CODE=20
class=3Dcode>XmlRootelement</CODE>. What it does? This is a JAXB =
annotation which=20
maps java class to XML element. We don't need specify anything else, =
because=20
<CODE class=3Dcode>Planet</CODE> is very simple class and all fields are =
public.=20
In this case, XML element name will be derived from class name or you =
can set=20
name property: <CODE =
class=3Dcode>@XmlRootElement(name=3D"yourName")</CODE>.</P>
<P>Our resource class will respond to GET /planet with </P><PRE =
class=3Dprogramlisting>&lt;<SPAN class=3DReservedWord>?xml =
version=3D"1.0" encoding=3D"UTF-8" standalone=3D"yes"?</SPAN>&gt;
                &lt;<SPAN class=3DReservedWord>planet</SPAN>&gt;
                        &lt;<SPAN =
class=3DReservedWord>id</SPAN>&gt;1&lt;<SPAN =
class=3DReservedWord>/id</SPAN>&gt;
                        &lt;<SPAN =
class=3DReservedWord>name</SPAN>&gt;Earth&lt;<SPAN =
class=3DReservedWord>/name</SPAN>&gt;
                        &lt;<SPAN =
class=3DReservedWord>radius</SPAN>&gt;1.0&lt;<SPAN =
class=3DReservedWord>/radius</SPAN>&gt;
                &lt;<SPAN class=3DReservedWord>/planet</SPAN>&gt;
            </PRE>
<P>which might be exactly what we want... or not. Or we might not really =
care,=20
because we can use Jersey client for making requests to this resource =
and this=20
is easy as: <CODE class=3Dcode>Planet planet =3D=20
webResource.path("planet").accept(MediaType.APPLICATION_XML_TYPE).get(Pla=
net.class);</CODE>.=20
There is pre-created WebResource object which points to our applications =
context=20
root and we simpli add path (in our clase its "planet"), accept header =
(not=20
mandatory, but service could provide different content based on this =
header; for=20
example text/html can be served for web browsers) and at the end we =
specify that=20
we are expecting <CODE class=3Dcode>Planet</CODE> class via GET =
request.</P>
<P>There may be need for not just producing XML, we might want to =
consume it as=20
well. </P>
<DIV class=3Dexample><A name=3Dd0e1849></A>
<P class=3Dtitle><B>Example&nbsp;4.4.&nbsp;Method for consuming =
Planet</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1  =
   @POST
&nbsp;&nbsp;2     @Consumes(MediaType.APPLICATION_XML)
&nbsp;&nbsp;3     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> setPlanet(Planet p) {
&nbsp;&nbsp;4         System.out.println(<SPAN class=3DString>"setPlanet =
"</SPAN> + p);
&nbsp;&nbsp;5     }
&nbsp;&nbsp;6                     </PRE></DIV></DIV>
<P><BR class=3Dexample-break>After valid request is made (with Jersey =
client you=20
can do <CODE class=3Dcode>webResource.path("planet").post(p);</CODE>), =
service=20
will print out string representation of Planet, which can look like =
<CODE=20
class=3Dliteral>Planet{id=3D2, name=3D'Mars', radius=3D1.51}</CODE>. =
</P>
<P>If there is a need for some other (non default) XML representation, =
other=20
JAXB annotations would need to be used. This process is usually =
simplified by=20
generating java source from XML Schema which is done by xjc. Xjc is XML =
to java=20
compiler and is part of JAXB. See <A href=3D"http://jaxb.dev.java.net/"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">JAXB home =
page</A> for=20
further details.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e1866></A>4.3.&nbsp;POJOs</H2></DIV></DIV></DIV>
<P>Sometimes you can't / don't want to add JAXB annotations to source =
code and=20
you still want to have resources consuming and producing XML =
representation of=20
your classes. In this case, <CODE class=3Dcode>JAXBElement</CODE> class =
should=20
help you. Let's redo planet resource but this time we won't have <CODE=20
class=3Dcode>XmlRootElement</CODE> annotation on <CODE =
class=3Dcode>Planet</CODE>=20
class.</P>
<DIV class=3Dexample><A name=3Dd0e1880></A>
<P class=3Dtitle><B>Example&nbsp;4.5.&nbsp;Resource class - =
JAXBElement</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Path(<SPAN class=3DString>"planet"</SPAN>)
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> Resource {
&nbsp;&nbsp;3=20
&nbsp;&nbsp;4     @GET
&nbsp;&nbsp;5     @Produces(MediaType.APPLICATION_XML)
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>public</SPAN> =
JAXBElement&lt;Planet&gt; getPlanet() {
&nbsp;&nbsp;7         Planet p =3D <SPAN class=3DReservedWord>new</SPAN> =
Planet();
&nbsp;&nbsp;8         p.id =3D 1;
&nbsp;&nbsp;9         p.name =3D <SPAN class=3DString>"Earth"</SPAN>;
&nbsp;10         p.radius =3D 1.0;
&nbsp;11=20
&nbsp;12         <SPAN class=3DReservedWord>return</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> JAXBElement&lt;Planet&gt;(<SPAN =
class=3DReservedWord>new</SPAN> QName(<SPAN =
class=3DString>"planet"</SPAN>), Planet.<SPAN =
class=3DReservedWord>class</SPAN>, p);
&nbsp;13     }
&nbsp;14=20
&nbsp;15     @POST
&nbsp;16     @Consumes(MediaType.APPLICATION_XML)
&nbsp;17     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> setPlanet(JAXBElement&lt;Planet&gt; p) =
{
&nbsp;18         System.out.println(<SPAN class=3DString>"setPlanet =
"</SPAN> + p.getValue());
&nbsp;19     }
&nbsp;20 }            </PRE></DIV></DIV><BR class=3Dexample-break>
<P>As you can see, everything is little more complicated with =
JAXBElement. This=20
is because now you need to explicitly set element name for <CODE=20
class=3Dcode>Planet</CODE> class XML representation. Client side is even =
more ugly=20
than server side because you can't do <CODE=20
class=3Dcode>JAXBElement&lt;Planet&gt;.class</CODE> so Jersey client API =
provides=20
way how to workaround it by declaring subclass of <CODE=20
class=3Dcode>GenericType</CODE>.</P>
<DIV class=3Dexample><A name=3Dd0e1896></A>
<P class=3Dtitle><B>Example&nbsp;4.6.&nbsp;Client side - =
JAXBElement</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1  =
       <SPAN class=3DComment>// GET</SPAN>
&nbsp;&nbsp;2         GenericType&lt;JAXBElement&lt;Planet&gt;&gt; =
planetType =3D <SPAN class=3DReservedWord>new</SPAN> =
GenericType&lt;JAXBElement&lt;Planet&gt;&gt;() {};
&nbsp;&nbsp;3=20
&nbsp;&nbsp;4         Planet planet =3D (Planet) webResource.path(<SPAN =
class=3DString>"planet"</SPAN>).accept(MediaType.APPLICATION_XML_TYPE).ge=
t(planetType).getValue();
&nbsp;&nbsp;5         System.out.println(<SPAN class=3DString>"### =
"</SPAN> + planet);
&nbsp;&nbsp;6=20
&nbsp;&nbsp;7         <SPAN class=3DComment>// POST</SPAN>
&nbsp;&nbsp;8         Planet p =3D <SPAN class=3DReservedWord>new</SPAN> =
Planet();
&nbsp;&nbsp;9         <SPAN class=3DComment>// ...</SPAN>
&nbsp;10=20
&nbsp;11         webResource.path(<SPAN =
class=3DString>"planet"</SPAN>).post(<SPAN =
class=3DReservedWord>new</SPAN> JAXBElement&lt;Planet&gt;(<SPAN =
class=3DReservedWord>new</SPAN> QName(<SPAN =
class=3DString>"planet"</SPAN>), Planet.<SPAN =
class=3DReservedWord>class</SPAN>, p));           </PRE></DIV></DIV><BR=20
class=3Dexample-break></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1901></A>4.4.&nbsp;Using custom=20
JAXBContext</H2></DIV></DIV></DIV>
<P>In some scenarios you can take advantage of using custom <CODE=20
class=3Dcode>JAXBContext</CODE>. Creating <CODE =
class=3Dcode>JAXBContext</CODE> is=20
expensive operation and if you already have one created, same instance =
can be=20
used by Jersey. Other possible usecase for this is when you need to set =
some=20
specific things to JAXBContext, for example set different =
classloader.</P>
<DIV class=3Dexample><A name=3Dd0e1912></A>
<P =
class=3Dtitle><B>Example&nbsp;4.7.&nbsp;PlanetJAXBContextProvider</B></P>=

<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Provider
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> PlanetJAXBContextProvider <SPAN =
class=3DReservedWord>implements</SPAN> =
ContextResolver&lt;JAXBContext&gt; {
&nbsp;&nbsp;3     <SPAN class=3DReservedWord>private</SPAN> JAXBContext =
context =3D null;
&nbsp;&nbsp;4=20
&nbsp;&nbsp;5     <SPAN class=3DReservedWord>public</SPAN> JAXBContext =
getContext(Class&lt;?&gt; type) {
&nbsp;&nbsp;6         <SPAN class=3DReservedWord>if</SPAN>(type !=3D =
Planet.<SPAN class=3DReservedWord>class</SPAN>)
&nbsp;&nbsp;7             <SPAN class=3DReservedWord>return</SPAN> null; =
<SPAN class=3DComment>// we don't support nothing else than =
Planet</SPAN>
&nbsp;&nbsp;8=20
&nbsp;&nbsp;9         <SPAN class=3DReservedWord>if</SPAN>(context =
=3D=3D null) {
&nbsp;10             <SPAN class=3DReservedWord>try</SPAN> {
&nbsp;11                 context =3D =
JAXBContext.newInstance(Planet.<SPAN class=3DReservedWord>class</SPAN>);
&nbsp;12             } <SPAN class=3DReservedWord>catch</SPAN> =
(JAXBException e) {
&nbsp;13                 <SPAN class=3DComment>// log warning/error; =
null will be returned which indicates that this</SPAN>
&nbsp;14                 <SPAN class=3DComment>// provider won't/can't =
be used.</SPAN>
&nbsp;15             }
&nbsp;16         }
&nbsp;17         <SPAN class=3DReservedWord>return</SPAN> context;
&nbsp;18     }
&nbsp;19 }
&nbsp;20         </PRE></DIV></DIV><BR class=3Dexample-break>
<P>Sample above shows simple <CODE class=3Dcode>JAXBContext</CODE> =
creation, all=20
you need to do is put this <CODE class=3Dcode>@Provider</CODE> annotated =
class=20
somewhere where Jersey can find it. Users sometimes have problems with =
using=20
provider classes on client side, so just for reminder - you have to =
declare them=20
in client config (cliend does not anything like package scanning done by =

server).</P>
<DIV class=3Dexample><A name=3Dd0e1925></A>
<P class=3Dtitle><B>Example&nbsp;4.8.&nbsp;Using Provider with Jersey=20
client</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1  =
               ClientConfig cc =3D <SPAN class=3DReservedWord>new</SPAN> =
DefaultClientConfig();
&nbsp;&nbsp;2                 =
cc.getClasses().add(PlanetJAXBContextProvider.<SPAN =
class=3DReservedWord>class</SPAN>);
&nbsp;&nbsp;3                 Client c =3D Client.create(cc);
&nbsp;&nbsp;4             </PRE></DIV></DIV><BR =
class=3Dexample-break></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A name=3Djson></A>Chapter&nbsp;5.&nbsp;JSON=20
Support</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1959">5.1.=20
  POJO support</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e1981">5.2.=20
  JAXB Based JSON support</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2014">5.2.1.=20
    Configuration Options</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2055">5.2.2.=20
    JSON Notations</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2463">5.2.3.=20
    Examples</A></SPAN></DT></DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2474">5.3.=20
  Low-Level JSON support</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2503">5.3.1.=20
    Examples</A></SPAN></DT></DL></DD></DL></DIV>
<P>Jersey JSON support comes as a set of JAX-RS <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/ext/Me=
ssageBodyReader.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">MessageBodyReader</A> and=20
<A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/ext/Me=
ssageBodyWriter.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">MessageBodyWriter</A>=20
providers distributed with <SPAN =
class=3Demphasis><EM>jersey-json</EM></SPAN>=20
module. These providers enable using three basic approaches when working =
with=20
JSON format: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>
  <P><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.pojo.approach.title">POJO=20
  support</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.approach.title">JAXB=20
  based JSON support</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.low.level.approach.title">Low-level,=20
  JSONObject/JSONArray based JSON support</A></P></LI></UL></DIV>
<P>The first method is pretty generic and allows you to map any Java =
Object to=20
JSON and vice versa. The other two approaches limit you in Java types =
your=20
resource methods could produce and/or consume. JAXB based approach could =
be=20
taken if you want to utilize certain JAXB features. The last, low-level, =

approach gives you the best fine-grained control over the outcoming JSON =
data=20
format. </P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1959></A>5.1.&nbsp;POJO=20
support</H2></DIV></DIV></DIV>
<P>POJO suppport represents the easiest way to convert your Java Objects =
to JSON=20
and back. It is based on the <A href=3D"http://jackson.codehaus.org/" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Jackson library</A>. </P>
<P>To switch this method on, you will need to turn <SPAN=20
class=3Demphasis><EM>JSONConfiguration.FEATURE_POJO_MAPPING</EM></SPAN> =
feature=20
on. This could be done in <CODE class=3Dcode>web.xml</CODE> using the =
following=20
servlet init parameter: </P>
<DIV class=3Dexample><A name=3Dd0e1975></A>
<P class=3Dtitle><B>Example&nbsp;5.1.&nbsp;POJO JSON support web.xml=20
configuration</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1=20
&nbsp;&nbsp;2         &lt;<SPAN =
class=3DReservedWord>init-param</SPAN>&gt;
&nbsp;&nbsp;3             &lt;<SPAN =
class=3DReservedWord>param-name</SPAN>&gt;com.sun.jersey.api.json.POJOMap=
pingFeature&lt;<SPAN class=3DReservedWord>/param-name</SPAN>&gt;
&nbsp;&nbsp;4             &lt;<SPAN =
class=3DReservedWord>param-value</SPAN>&gt;true&lt;<SPAN =
class=3DReservedWord>/param-value</SPAN>&gt;
&nbsp;&nbsp;5         &lt;<SPAN =
class=3DReservedWord>/init-param</SPAN>&gt;
&nbsp;&nbsp;6 </PRE></DIV></DIV>
<P><BR class=3Dexample-break></P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e1981></A>5.2.&nbsp;JAXB Based=20
JSON support</H2></DIV></DIV></DIV>
<P>Taking this approach will save you a lot of time, if you want to =
easily=20
produce/consume both JSON and XML data format. Because even then you =
will still=20
be able to use a unified Java model. Another advantage is simplicity of =
working=20
with such a model, as JAXB leverages annotated POJOs and these could be =
handled=20
as simple Java beans </P>
<P>A disadvantage of JAXB based approach could be if you need to work =
with a=20
very specific JSON format. Then it could be difficult to find a proper =
way to=20
get such a format produced and consumed. This is a reason why a lot of=20
configuration options are provided, so that you can control how things =
get=20
serialized out and deserialized back. </P>
<P>Following is a very simple example of how a JAXB bean could look =
like. </P>
<DIV class=3Dexample><A name=3Dd0e1990></A>
<P class=3Dtitle><B>Example&nbsp;5.2.&nbsp;Simple JAXB bean =
implementation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@XmlRootElement
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> MyJaxbBean {
&nbsp;&nbsp;3   <SPAN class=3DReservedWord>public</SPAN> String name;
&nbsp;&nbsp;4   <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>int</SPAN> age;
&nbsp;&nbsp;5      =20
&nbsp;&nbsp;6   <SPAN class=3DReservedWord>public</SPAN> MyJaxbBean() {} =
<SPAN class=3DComment>// JAXB needs this</SPAN>
&nbsp;&nbsp;7=20
&nbsp;&nbsp;8   <SPAN class=3DReservedWord>public</SPAN> =
MyJaxbBean(String name, <SPAN class=3DReservedWord>int</SPAN> age) {
&nbsp;&nbsp;9     <SPAN class=3DReservedWord>this</SPAN>.name =3D name;
&nbsp;10     <SPAN class=3DReservedWord>this</SPAN>.age =3D age;
&nbsp;11   }
&nbsp;12 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break>Using the above JAXB bean for producing =
JSON data=20
format from you resource method, is then as simple as: </P>
<DIV class=3Dexample><A name=3Dd0e1996></A>
<P class=3Dtitle><B>Example&nbsp;5.3.&nbsp;JAXB bean used to generate =
JSON=20
representation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@GET @Produces(<SPAN class=3DString>"application/json"</SPAN>)
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> MyJaxbBean =
getMyBean() {
&nbsp;&nbsp;3    <SPAN class=3DReservedWord>return</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> MyJaxbBean(<SPAN =
class=3DString>"Agamemnon"</SPAN>, 32);
&nbsp;&nbsp;4 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break>Notice, that JSON specific mime type is =
specified in=20
@Produces annotation, and the method returns an instance of MyJaxbBean, =
which=20
JAXB is able to process. Resulting JSON in this case would look like: =
</P><PRE class=3Dprogramlisting>    {"name":"Agamemnon", "age":"32"}
</PRE>
<P></P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e2014></A>5.2.1.&nbsp;Configuration=20
Options</H3></DIV></DIV></DIV>
<P>JAXB itself enables you to control output JSON format to certain =
extent.=20
Specifically renaming and ommiting items is easy to do directly using =
JAXB=20
annotations. E.g. the following example depicts changes in the above =
mentioned=20
MyJaxbBean that will result in <CODE =
class=3Dcode>{"king":"Agamemnon"}</CODE> JSON=20
output. </P>
<DIV class=3Dexample><A name=3Dd0e2022></A>
<P class=3Dtitle><B>Example&nbsp;5.4.&nbsp;Tweaking JSON format using =
JAXB</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@XmlRootElement
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> MyJaxbBean {
&nbsp;&nbsp;3  =20
&nbsp;&nbsp;4     @XmlElement(name=3D<SPAN class=3DString>"king"</SPAN>)
&nbsp;&nbsp;5     <SPAN class=3DReservedWord>public</SPAN> String name;
&nbsp;&nbsp;6  =20
&nbsp;&nbsp;7     @XmlTransient
&nbsp;&nbsp;8     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>int</SPAN> age;
&nbsp;&nbsp;9 =20
&nbsp;10     <SPAN class=3DComment>// several lines removed       =
</SPAN>
&nbsp;11 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>To achieve more important JSON format changes, you will need to =
configure=20
Jersey JSON procesor itself. Various configuration options could be set =
on an <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/json/JSONConfiguration.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">JSONConfiguration</A>=20
instance. The instance could be then further used to create a =
JSONConfigurated=20
<A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/json/JSONJAXBContext.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">JSONJAXBContext</A>,=20
which serves as a main configuration point in this area. To pass your=20
specialized JSONJAXBContext to Jersey, you will finally need to =
implement a=20
JAXBContext <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/ext/Co=
ntextResolver.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ContextResolver</A> </P>
<DIV class=3Dexample><A name=3Djson.jaxb.context.resolver.example></A>
<P class=3Dtitle><B>Example&nbsp;5.5.&nbsp;An example of a JAXBContext =
resolver=20
implementation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@Provider
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> JAXBContextResolver <SPAN =
class=3DReservedWord>implements</SPAN> =
ContextResolver&lt;JAXBContext&gt; {
&nbsp;&nbsp;3=20
&nbsp;&nbsp;4     <SPAN class=3DReservedWord>private</SPAN> JAXBContext =
context;
&nbsp;&nbsp;5     <SPAN class=3DReservedWord>private</SPAN> Class[] =
types =3D {MyJaxbBean.<SPAN class=3DReservedWord>class</SPAN>};
&nbsp;&nbsp;6=20
&nbsp;&nbsp;7     <SPAN class=3DReservedWord>public</SPAN> =
JAXBContextResolver() <SPAN class=3DReservedWord>throws</SPAN> Exception =
{
&nbsp;&nbsp;8         <SPAN class=3DReservedWord>this</SPAN>.context =3D =

&nbsp;&nbsp;9 	  <SPAN class=3DReservedWord>new</SPAN> JSONJAXBContext(=20
&nbsp;10 	    JSONConfiguration.natural().build(), types);=20
&nbsp;11     }
&nbsp;12=20
&nbsp;13     <SPAN class=3DReservedWord>public</SPAN> JAXBContext =
getContext(Class&lt;?&gt; objectType) {
&nbsp;14         <SPAN class=3DReservedWord>for</SPAN> (Class type : =
types) {
&nbsp;15             <SPAN class=3DReservedWord>if</SPAN> (type =3D=3D =
objectType) {
&nbsp;16                 <SPAN class=3DReservedWord>return</SPAN> =
context;
&nbsp;17             }
&nbsp;18         }
&nbsp;19         <SPAN class=3DReservedWord>return</SPAN> null;
&nbsp;20     }
&nbsp;21 }</PRE>
<DIV class=3Dcalloutlist>
<TABLE border=3D0 summary=3D"Callout list">
  <TBODY>
  <TR>
    <TD vAlign=3Dtop width=3D"5%" align=3Dleft><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.ctx.resolver.init"><IMG=20
      border=3D0 alt=3D1 src=3D""></A> </TD>
    <TD vAlign=3Dtop align=3Dleft>
      <P>Creation of our specialized JAXBContext</P></TD></TR>
  <TR>
    <TD vAlign=3Dtop width=3D"5%" align=3Dleft><A=20
      =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.ctx.resolver.config"><IMG=20
      border=3D0 alt=3D2 src=3D""></A> </TD>
    <TD vAlign=3Dtop align=3Dleft>
      <P>Final JSON format is given by this JSONConfiguration=20
  instance</P></TD></TR></TBODY></TABLE></DIV></DIV></DIV><BR=20
class=3Dexample-break></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e2055></A>5.2.2.&nbsp;JSON=20
Notations</H3></DIV></DIV></DIV>
<P>JSONConfiguration allows you to use four various JSON notations. Each =
of=20
these notations serializes JSON in a different way. Following is a list =
of=20
supported notations: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>
  <P>MAPPED (default notation)</P>
  <LI>
  <P>NATURAL</P>
  <LI>
  <P>JETTISON_MAPPED</P>
  <LI>
  <P>BADGERFISH</P></LI></UL></DIV>
<P></P>
<P>Individual notations and their further configuration options are =
described=20
bellow. Rather then explaining rules for mapping XML constructs into =
JSON, the=20
notations will be described using a simple example. Following are JAXB =
beans,=20
which will be used. </P>
<DIV class=3Dexample><A name=3Dd0e2076></A>
<P class=3Dtitle><B>Example&nbsp;5.6.&nbsp;JAXB beans for JSON supported =
notations=20
description, simple address bean</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@XmlRootElement
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> Address {
&nbsp;&nbsp;3     <SPAN class=3DReservedWord>public</SPAN> String =
street;
&nbsp;&nbsp;4     <SPAN class=3DReservedWord>public</SPAN> String town;
&nbsp;&nbsp;5=20
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>public</SPAN> Address(){}
&nbsp;&nbsp;7=20
&nbsp;&nbsp;8     <SPAN class=3DReservedWord>public</SPAN> =
Address(String street, String town) {
&nbsp;&nbsp;9         <SPAN class=3DReservedWord>this</SPAN>.street =3D =
street;
&nbsp;10         <SPAN class=3DReservedWord>this</SPAN>.town =3D town;
&nbsp;11     }
&nbsp;12 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<DIV class=3Dexample><A name=3Dd0e2082></A>
<P class=3Dtitle><B>Example&nbsp;5.7.&nbsp;JAXB beans for JSON supported =
notations=20
description, contact bean</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
@XmlRootElement
&nbsp;&nbsp;2 <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> Contact {
&nbsp;&nbsp;3=20
&nbsp;&nbsp;4     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>int</SPAN> id;
&nbsp;&nbsp;5     <SPAN class=3DReservedWord>public</SPAN> String name;
&nbsp;&nbsp;6     <SPAN class=3DReservedWord>public</SPAN> =
List&lt;Address&gt; addresses;
&nbsp;&nbsp;7=20
&nbsp;&nbsp;8     <SPAN class=3DReservedWord>public</SPAN> Contact() {};
&nbsp;&nbsp;9=20
&nbsp;10     <SPAN class=3DReservedWord>public</SPAN> Contact(<SPAN =
class=3DReservedWord>int</SPAN> id, String name, List&lt;Address&gt; =
addresses) {
&nbsp;11         <SPAN class=3DReservedWord>this</SPAN>.name =3D name;
&nbsp;12         <SPAN class=3DReservedWord>this</SPAN>.id =3D id;
&nbsp;13         <SPAN class=3DReservedWord>this</SPAN>.addresses =3D=20
&nbsp;14 	        (addresses !=3D null) ? <SPAN =
class=3DReservedWord>new</SPAN> LinkedList&lt;Address&gt;(addresses) : =
null;
&nbsp;15     }
&nbsp;16 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>Following text will be mainly working with a contact bean initialized =
with:=20
</P>
<DIV class=3Dexample><A name=3Djson.jaxb.bean.init.example></A>
<P class=3Dtitle><B>Example&nbsp;5.8.&nbsp;JAXB beans for JSON supported =
notations=20
description, initialization</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting><SPAN =
class=3DReservedWord>final</SPAN> Address[] addresses =3D {<SPAN =
class=3DReservedWord>new</SPAN> Address(<SPAN class=3DString>"Long =
Street 1"</SPAN>, <SPAN class=3DString>"Short Village"</SPAN>)};
Contact contact =3D <SPAN class=3DReservedWord>new</SPAN> Contact(2, =
<SPAN class=3DString>"Bob"</SPAN>, =
Arrays.asList(addresses));</PRE></DIV></DIV>
<P><BR class=3Dexample-break>I.e. contact bean with <CODE =
class=3Dcode>id=3D2</CODE>,=20
<CODE class=3Dcode>name=3D"Bob"</CODE> containing a single address =
(<CODE=20
class=3Dcode>street=3D"Long Street 1"</CODE>, <CODE =
class=3Dcode>town=3D"Short=20
Village"</CODE>). </P>
<P>All bellow described configuration options are documented also in =
apidocs at=20
<A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/json/JSONConfiguration.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">https://jersey.dev.java.net/=
nonav/apidocs/1.4/jersey/com/sun/jersey/api/json/JSONConfiguration.html</=
A>=20
</P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H4 class=3Dtitle><A name=3Dd0e2112></A>5.2.2.1.&nbsp;Mapped=20
notation</H4></DIV></DIV></DIV>
<P><CODE class=3Dcode>JSONConfiguration</CODE> based on <CODE=20
class=3Dliteral>mapped</CODE> notation could be build with </P><PRE =
class=3Dprogramlisting>JSONConfiguration.mapped().build()</PRE>
<P>for usage in a <CODE class=3Dcode>JAXBContext</CODE> resolver, <A=20
title=3D"Example&nbsp;5.5.&nbsp;An example of a JAXBContext resolver =
implementation"=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.context.resolver.example">Example&nbsp;5.5,=20
=93An example of a JAXBContext resolver implementation=94</A>. Then a =
contact bean=20
initialized with <A=20
title=3D"Example&nbsp;5.8.&nbsp;JAXB beans for JSON supported notations =
description, initialization"=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.bean.init.example">Example&nbsp;5.8,=20
=93JAXB beans for JSON supported notations description, =
initialization=94</A>, will=20
be serialized as </P>
<DIV class=3Dexample><A name=3Dd0e2133></A>
<P class=3Dtitle><B>Example&nbsp;5.9.&nbsp;JSON expression produced =
using <CODE=20
class=3Dliteral>mapped</CODE> notation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
{ "id":"2"=20
&nbsp;&nbsp;2  ,"name":"Bob"
&nbsp;&nbsp;3  ,"addresses":{"street":"Long Street 1"
&nbsp;&nbsp;4                     ,"town":"Short =
Village"}}</PRE></DIV></DIV>
<P><BR class=3Dexample-break>The JSON representation seems fine, and =
will be=20
working flawlessly with Java based Jersey client API. </P>
<P>However, at least one issue might appear once you start using it with =
a=20
JavaScript based client. The information, that <CODE =
class=3Dcode>addresses</CODE>=20
item represents an array, is being lost for every single element array. =
If you=20
added another address bean to the contact,</P><PRE =
class=3Dprogramlisting>contact.addresses.add(<SPAN =
class=3DReservedWord>new</SPAN> Address(<SPAN class=3DString>"Short =
Street 1000"</SPAN>, <SPAN class=3DString>"Long Village"</SPAN>));</PRE>
<P>, you would get </P><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 { =
"id":"2"=20
&nbsp;&nbsp;2  ,"name":"Bob"
&nbsp;&nbsp;3  ,"addresses":[{"street":"Long Street 1","town":"Short =
Village"}
&nbsp;&nbsp;4               ,{"street":"Short Street 1000","town":"Long =
Village"}]}</PRE>
<P>Both representations are correct, but you will not be able to consume =
them=20
using a single JavaScript client, because to access <CODE =
class=3Dcode>"Short=20
Village"</CODE> value, you will write <CODE =
class=3Dcode>addresses.town</CODE> in=20
one case and <CODE class=3Dcode>addresses[0].town</CODE> in the other. =
To fix this=20
issue, you need to instruct the JSON processor, what items need to be =
treated as=20
arrays by setting an optional property, <CODE =
class=3Dliteral>arrays</CODE>, on=20
your <CODE class=3Dcode>JSONConfiguration</CODE> object. For our case, =
you would=20
do it with </P>
<DIV class=3Dexample><A name=3Dd0e2168></A>
<P class=3Dtitle><B>Example&nbsp;5.10.&nbsp;Force arrays in <CODE=20
class=3Dliteral>mapped</CODE> JSON notation</B></P>
<DIV class=3Dexample-contents><PRE =
class=3Dprogramlisting>JSONConfiguration.mapped().arrays(<SPAN =
class=3DString>"addresses"</SPAN>).build()</PRE></DIV></DIV>
<P><BR class=3Dexample-break>You can use multiple string values in the =
<CODE=20
class=3Dliteral>arrays</CODE> method call, in case you are dealing with =
more than=20
one array item in your beans. Similar mechanism (one or more argument =
values)=20
applies also for all below desribed options. </P>
<P>Another issue might be, that number value, <CODE =
class=3Dliteral>2</CODE>, for=20
<CODE class=3Dcode>id</CODE> item gets written as a string, <CODE=20
class=3Dliteral>"2"</CODE>. To avoid this, you can use another optional =
property=20
on <CODE class=3Dcode>JSONConfiguration</CODE> called <CODE=20
class=3Dliteral>nonStrings</CODE>. </P>
<DIV class=3Dexample><A name=3Dd0e2197></A>
<P class=3Dtitle><B>Example&nbsp;5.11.&nbsp;Force non-string values in =
<CODE=20
class=3Dliteral>mapped</CODE> JSON notation</B></P>
<DIV class=3Dexample-contents><PRE =
class=3Dprogramlisting>JSONConfiguration.mapped().arrays(<SPAN =
class=3DString>"addresses"</SPAN>).nonStrings(<SPAN =
class=3DString>"id"</SPAN>).build()</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>It might happen you use XML attributes in your JAXB beans. In <CODE=20
class=3Dliteral>mapped</CODE> JSON notation, these attribute names are =
prefixed=20
with <CODE class=3Dliteral>@</CODE> character. If <CODE =
class=3Dcode>id</CODE> was=20
an attribute, it=B4s definition would look like: </P><PRE =
class=3Dprogramlisting>  ...
  @XmlAttribute
  <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>int</SPAN> id;
  ...</PRE>
<P>and then you would get </P><PRE class=3Dprogramlisting>{"@id":"2" =
...</PRE>
<P>at the JSON output. In case, you want to get rid of the <CODE=20
class=3Dliteral>@</CODE> prefix, you can take advantage of another =
configuration=20
option of <CODE class=3Dliteral>JSONConfiguration</CODE>, called <CODE=20
class=3Dliteral>attributeAsElement</CODE>. Usage is similar to previous =
options.=20
</P>
<DIV class=3Dexample><A name=3Dd0e2232></A>
<P class=3Dtitle><B>Example&nbsp;5.12.&nbsp;XML attributes as XML =
elements in=20
<CODE class=3Dliteral>mapped</CODE> JSON notation</B></P>
<DIV class=3Dexample-contents><PRE =
class=3Dprogramlisting>JSONConfiguration.mapped().attributeAsElement(<SPA=
N class=3DString>"id"</SPAN>).build()</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P><CODE class=3Dliteral>Mapped</CODE> JSON notation was designed to =
produce the=20
simplest possible JSON expression out of JAXB beans. While in XML, you =
must=20
always have a root tag to start a XML document with, there is no such a=20
constraint in JSON. If you wanted to be strict, you might have wanted to =
keep a=20
XML root tag equivalent generated in your JSON. If that is the case, =
another=20
configuration option is available for you, which is called <CODE=20
class=3Dliteral>rootUnwrapping</CODE>. You can use it as follows: </P>
<DIV class=3Dexample><A name=3Djson.jaxb.mapped.root.unwrapping></A>
<P class=3Dtitle><B>Example&nbsp;5.13.&nbsp;Keep XML root tag equivalent =
in JSON=20
<CODE class=3Dliteral>mapped</CODE> JSON notation</B></P>
<DIV class=3Dexample-contents><PRE =
class=3Dprogramlisting>JSONConfiguration.mapped().rootUnwrapping(false).b=
uild()</PRE></DIV></DIV>
<P><BR class=3Dexample-break>and get the following JSON for our <CODE=20
class=3Dliteral>Contact</CODE> bean: </P>
<DIV class=3Dexample><A name=3Dd0e2261></A>
<P class=3Dtitle><B>Example&nbsp;5.14.&nbsp;XML root tag equivalent kept =
in JSON=20
using <CODE class=3Dliteral>mapped</CODE> notation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
{"contact":{ "id":"2"=20
&nbsp;&nbsp;2  ,"name":"Bob"
&nbsp;&nbsp;3  ,"addresses":{"street":"Long Street 1"
&nbsp;&nbsp;4                     ,"town":"Short =
Village"}}}</PRE></DIV></DIV>
<P><BR class=3Dexample-break><CODE class=3Dliteral>rootUnwrapping</CODE> =
option is=20
set to <CODE class=3Dliteral>true</CODE> by default. You should switch =
it to <CODE=20
class=3Dliteral>false</CODE> if you use inheritance at your JAXB beans. =
Then JAXB=20
might try to encode type information into root element names, and by =
stripping=20
these elements off, you could break unmarshalling. </P>
<P>In version 1.1.1-ea, XML namespace support was added to the MAPPED =
JSON=20
notation. There is of course no such thing as XML namespaces in JSON, =
but when=20
working from JAXB, XML infoset is used as an intermediary format. And =
then when=20
various XML namespaces are used, ceratin information related to the =
concrete=20
namespaces is needed even in JSON data, so that the JSON procesor could=20
correctly unmarshal JSON to XML and JAXB. To make it short, the XML =
namespace=20
support means, you should be able to use the very same JAXB beans for =
XML and=20
JSON even if XML namespaces are involved. </P>
<P>Namespace mapping definition is similar to <A=20
title=3D"Example&nbsp;5.19.&nbsp;XML namespace to JSON mapping =
configuration for Jettison based mapped notation"=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.jettison.mapped.ns.def">Example&nbsp;5.19,=20
=93XML namespace to JSON mapping configuration for Jettison based <CODE=20
class=3Dliteral>mapped</CODE> notation=94</A> </P>
<DIV class=3Dexample><A name=3Dd0e2285></A>
<P class=3Dtitle><B>Example&nbsp;5.15.&nbsp;XML namespace to JSON =
mapping=20
configuration for <CODE class=3Dliteral>mapped</CODE> notation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1  =
       Map&lt;String,String&gt; ns2json =3D <SPAN =
class=3DReservedWord>new</SPAN> HashMap&lt;String, String&gt;();
&nbsp;&nbsp;2         ns2json.put(<SPAN =
class=3DString>"http://example.com"</SPAN>, <SPAN =
class=3DString>"example"</SPAN>);
&nbsp;&nbsp;3         context =3D <SPAN class=3DReservedWord>new</SPAN> =
JSONJAXBContext(
&nbsp;&nbsp;4 	      JSONConfiguration.mapped()
&nbsp;&nbsp;5 	           .xml2JsonNs(ns2json).build(), =
types);</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<P>Dot character (.) will be used by default as a namespace separator in =
the=20
JSON identifiers. E.g. for the above mentioned <CODE=20
class=3Dliteral>example</CODE> namespace and tag <CODE =
class=3Dliteral>T</CODE>,=20
<CODE class=3Dliteral>"example.T"</CODE> JSON identifier will be =
generated. To=20
change this default behaviour, you can use the <CODE=20
class=3Dliteral>nsSeparator</CODE> method on the mapped =
JSONConfiguration builder:=20
<CODE=20
class=3Dliteral>JSONConfiguration.mapped().xml2JsonNs(ns2json).nsSeparato=
r(':').build()</CODE>.=20
Then you will get <CODE class=3Dliteral>"example:T"</CODE> instead of =
<CODE=20
class=3Dliteral>"example.T"</CODE> generated. This option should be used =

carefully, as the Jersey framework does not even try to check conflicts =
between=20
the user selected separator character and the tag and/or namespace =
names.=20
</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H4 class=3Dtitle><A name=3Dd0e2317></A>5.2.2.2.&nbsp;Natural=20
notation</H4></DIV></DIV></DIV>
<P>After using <CODE class=3Dliteral>mapped</CODE> JSON notation for a =
while, it=20
was apparent, that a need to configure all the various things manually =
could be=20
a bit problematic. To avoid the manual work, a new, <CODE=20
class=3Dliteral>natural</CODE>, JSON notation was introduced in Jersey =
version=20
1.0.2. With <CODE class=3Dliteral>natural</CODE> notation, Jersey will=20
automatically figure out how individual items need to be processed, so =
that you=20
do not need to do any kind of manual configuration. Java arrays and =
lists are=20
mapped into JSON arrays, even for single-element cases. Java numbers and =

booleans are correctly mapped into JSON numbers and booleans, and you do =
not=20
need to bother with XML attributes, as in JSON, they keep the original =
names. So=20
without any additional configuration, just using </P><PRE =
class=3Dprogramlisting>JSONConfiguration.natural().build()</PRE>
<P>for configuring your <CODE class=3Dcode>JAXBContext</CODE>, you will =
get the=20
following JSON for the bean initialized at <A=20
title=3D"Example&nbsp;5.8.&nbsp;JAXB beans for JSON supported notations =
description, initialization"=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.bean.init.example">Example&nbsp;5.8,=20
=93JAXB beans for JSON supported notations description, =
initialization=94</A>: </P>
<DIV class=3Dexample><A name=3Dd0e2339></A>
<P class=3Dtitle><B>Example&nbsp;5.16.&nbsp;JSON expression produced =
using <CODE=20
class=3Dliteral>natural</CODE> notation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
{ "id":2
&nbsp;&nbsp;2  ,"name":"Bob"
&nbsp;&nbsp;3  ,"addresses":[{"street":"Long Street 1"
&nbsp;&nbsp;4                      ,"town":"Short =
Village"}]}</PRE></DIV></DIV>
<P><BR class=3Dexample-break>You might notice, that the single element =
array <CODE=20
class=3Dliteral>addresses</CODE> remains an array, and also the =
non-string <CODE=20
class=3Dliteral>id</CODE> value is not limited with double quotes, as =
<CODE=20
class=3Dliteral>natural</CODE> notation automatically detects these =
things. </P>
<P>To support cases, when you use inheritance for your JAXB beans, an =
option was=20
introduced to the <CODE class=3Dliteral>natural</CODE> JSON =
configuration builder=20
to forbid XML root element stripping. The option looks pretty same as at =
the=20
default <CODE class=3Dliteral>mapped</CODE> notation case (<A=20
title=3D"Example&nbsp;5.13.&nbsp;Keep XML root tag equivalent in JSON =
mapped JSON notation"=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.mapped.root.unwrapping">Example&nbsp;5.13,=20
=93Keep XML root tag equivalent in JSON <CODE =
class=3Dliteral>mapped</CODE> JSON=20
notation=94</A>). </P>
<DIV class=3Dexample><A name=3Djson.jaxb.natural.root.unwrapping></A>
<P class=3Dtitle><B>Example&nbsp;5.17.&nbsp;Keep XML root tag equivalent =
in JSON=20
<CODE class=3Dliteral>natural</CODE> JSON notation</B></P>
<DIV class=3Dexample-contents><PRE =
class=3Dprogramlisting>JSONConfiguration.natural().rootUnwrapping(false).=
build()</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H4 class=3Dtitle><A name=3Dd0e2376></A>5.2.2.3.&nbsp;Jettison mapped=20
notation</H4></DIV></DIV></DIV>
<P>Next two notations are based on project <A=20
href=3D"http://jettison.codehaus.org/User%27s+Guide" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Jettison</A>. You might =
want to use=20
one of these notations, when working with more complex XML documents. =
Namely=20
when you deal with multiple XML namespaces in your JAXB beans. </P>
<P>Jettison based <CODE class=3Dliteral>mapped</CODE> notation could be =
configured=20
using: </P><PRE =
class=3Dprogramlisting>JSONConfiguration.mappedJettison().build()</PRE>
<P>If nothing else is configured, you will get similar JSON output as =
for the=20
default, <CODE class=3Dliteral>mapped</CODE>, notation: </P>
<DIV class=3Dexample><A name=3Dd0e2395></A>
<P class=3Dtitle><B>Example&nbsp;5.18.&nbsp;JSON expression produced =
using=20
Jettison based <CODE class=3Dliteral>mapped</CODE> notation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
{ "contact:{"id":2
&nbsp;&nbsp;2               ,"name":"Bob"
&nbsp;&nbsp;3               ,"addresses":{"street":"Long Street 1"
&nbsp;&nbsp;4                                  ,"town":"Short =
Village"}}</PRE></DIV></DIV>
<P><BR class=3Dexample-break>The only difference is, your numbers and =
booleans=20
will not be converted into strings, but you have no option for forcing =
arrays=20
remain arrays in single-element case. Also the JSON object, representing =
XML=20
root tag is being produced. </P>
<P>If you need to deal with various XML namespaces, however, you will =
find=20
Jettison <CODE class=3Dliteral>mapped</CODE> notation pretty useful. =
Lets define a=20
particular namespace for <CODE class=3Dcode>id</CODE> item: </P><PRE =
class=3Dprogramlisting>  ...
  @XmlElement(namespace=3D<SPAN =
class=3DString>"http://example.com"</SPAN>)
  <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>int</SPAN> id;
  ...</PRE>
<P>Then you simply confgure a mapping from XML namespace into JSON =
prefix as=20
follows: </P>
<DIV class=3Dexample><A name=3Djson.jaxb.jettison.mapped.ns.def></A>
<P class=3Dtitle><B>Example&nbsp;5.19.&nbsp;XML namespace to JSON =
mapping=20
configuration for Jettison based <CODE class=3Dliteral>mapped</CODE>=20
notation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1  =
       Map&lt;String,String&gt; ns2json =3D <SPAN =
class=3DReservedWord>new</SPAN> HashMap&lt;String, String&gt;();
&nbsp;&nbsp;2         ns2json.put(<SPAN =
class=3DString>"http://example.com"</SPAN>, <SPAN =
class=3DString>"example"</SPAN>);
&nbsp;&nbsp;3         context =3D <SPAN class=3DReservedWord>new</SPAN> =
JSONJAXBContext(
&nbsp;&nbsp;4 	      JSONConfiguration.mappedJettison()
&nbsp;&nbsp;5 	           .xml2JsonNs(ns2json).build(), =
types);</PRE></DIV></DIV>
<P><BR class=3Dexample-break>Resulting JSON will look like in the =
example bellow.=20
</P>
<DIV class=3Dexample><A name=3Dd0e2424></A>
<P class=3Dtitle><B>Example&nbsp;5.20.&nbsp;JSON expression with XML =
namespaces=20
mapped into JSON</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
{ "contact:{"example.id":2
&nbsp;&nbsp;2               ,"name":"Bob"
&nbsp;&nbsp;3               ,"addresses":{"street":"Long Street 1"
&nbsp;&nbsp;4                                  ,"town":"Short =
Village"}}</PRE></DIV></DIV>
<P><BR class=3Dexample-break>Please note, that <CODE =
class=3Dcode>id</CODE> item=20
became <CODE class=3Dcode>example.id</CODE> based on the XML namespace =
mapping. If=20
you have more XML namespaces in your XML, you will need to configure =
appropriate=20
mapping for all of them </P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H4 class=3Dtitle><A name=3Dd0e2436></A>5.2.2.4.&nbsp;Badgerfish=20
notation</H4></DIV></DIV></DIV>
<P>Badgerfish notation is the other notation based on Jettison. From =
JSON and=20
JavaScript perspective, this notation is definitely the worst readable =
one. You=20
will probably not want to use it, unless you need to make sure your JAXB =
beans=20
could be flawlessly written and read back to and from JSON, without =
bothering=20
with any formatting configuration, namespaces, etc. </P>
<P><CODE class=3Dcode>JSONConfiguration</CODE> instance using <CODE=20
class=3Dliteral>badgerfish</CODE> notation could be built with </P><PRE =
class=3Dprogramlisting>JSONConfiguration.badgerFish().build()</PRE>
<P>and the output JSON for <A=20
title=3D"Example&nbsp;5.8.&nbsp;JAXB beans for JSON supported notations =
description, initialization"=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#json.jaxb.bean.init.example">Example&nbsp;5.8,=20
=93JAXB beans for JSON supported notations description, =
initialization=94</A> will=20
be as follows. </P>
<DIV class=3Dexample><A name=3Dd0e2454></A>
<P class=3Dtitle><B>Example&nbsp;5.21.&nbsp;JSON expression produced =
using <CODE=20
class=3Dliteral>badgerfish</CODE> notation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
{"contact":{"id":{"$":"2"}
&nbsp;&nbsp;2               ,"name":{"$":"Bob"}
&nbsp;&nbsp;3               ,"addresses":{"street":{"$":"Long Street 1"}
&nbsp;&nbsp;4                                  ,"town":{"$":"Short =
Village"}}}}</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A =
name=3Dd0e2463></A>5.2.3.&nbsp;Examples</H3></DIV></DIV></DIV>
<P>Download <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/json-from=
-jaxb/1.4/json-from-jaxb-1.4-project.zip"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/mav=
en/2/com/sun/jersey/samples/json-from-jaxb/1.4/json-from-jaxb-1.4-project=
.zip</A>=20
or <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/jmaki-bac=
kend/1.4/jmaki-backend-1.4-project.zip"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/mav=
en/2/com/sun/jersey/samples/jmaki-backend/1.4/jmaki-backend-1.4-project.z=
ip</A>=20
to get a more complex example using JAXB based JSON support. =
</P></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2474></A>5.3.&nbsp;Low-Level JSON=20
support</H2></DIV></DIV></DIV>
<P>Using this approach means you will be using JSONObject and/or =
JSONArray=20
classes for your data representations. These classes are actually taken =
from=20
Jettison project, but conform to the description provided at <A=20
href=3D"http://www.json.org/java/index.html" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://www.json.org/java/ind=
ex.html</A>.=20
</P>
<P>The biggest advantage here is, that you will gain full control over =
the JSON=20
format produced and consumed. On the other hand, dealing with your data =
model=20
objects will probably be a bit more complex, than when taking the JAXB =
based=20
approach. Differencies are depicted at the following code snipets. </P>
<P></P>
<DIV class=3Dexample><A name=3Dd0e2486></A>
<P class=3Dtitle><B>Example&nbsp;5.22.&nbsp;JAXB bean creation</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>MyJaxbBean =
myBean =3D <SPAN class=3DReservedWord>new</SPAN> MyJaxbBean(<SPAN =
class=3DString>"Agamemnon"</SPAN>, 32);</PRE></DIV></DIV>
<P><BR class=3Dexample-break>Above you construct a simple JAXB bean, =
which could=20
be written in JSON as <CODE class=3Dcode>{"name":"Agamemnon", =
"age":32}</CODE>=20
</P>
<P>Now to build an equivalent JSONObject (in terms of resulting JSON=20
expression), you would need several more lines of code. </P>
<DIV class=3Dexample><A name=3Dd0e2497></A>
<P class=3Dtitle><B>Example&nbsp;5.23.&nbsp;Constructing a =
JSONObject</B></P>
<DIV class=3Dexample-contents><PRE class=3Dprogramlisting>&nbsp;&nbsp;1 =
JSONObject myObject =3D <SPAN class=3DReservedWord>new</SPAN> =
JSONObject();
&nbsp;&nbsp;2 myObject.JSONObject myObject =3D <SPAN =
class=3DReservedWord>new</SPAN> JSONObject();
&nbsp;&nbsp;3 <SPAN class=3DReservedWord>try</SPAN> {
&nbsp;&nbsp;4   myObject.put(<SPAN class=3DString>"name"</SPAN>, <SPAN =
class=3DString>"Agamemnon"</SPAN>);
&nbsp;&nbsp;5   myObject.put(<SPAN class=3DString>"age"</SPAN>, 32);
&nbsp;&nbsp;6 } <SPAN class=3DReservedWord>catch</SPAN> (JSONException =
ex) {
&nbsp;&nbsp;7   LOGGER.log(Level.SEVERE, <SPAN class=3DString>"Error =
..."</SPAN>, ex);
&nbsp;&nbsp;8 }</PRE></DIV></DIV>
<P><BR class=3Dexample-break></P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A =
name=3Dd0e2503></A>5.3.1.&nbsp;Examples</H3></DIV></DIV></DIV>
<P>Download <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/bookmark/=
1.4/bookmark-1.4-project.zip"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/mav=
en/2/com/sun/jersey/samples/bookmark/1.4/bookmark-1.4-project.zip</A>=20
to get a more complex example using low-level JSON support.=20
</P></DIV></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A name=3Dlinking></A>Chapter&nbsp;6.&nbsp;Declarative =

Hyperlinking</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2522">6.1.=20
  Links in Representations</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2555">6.2.=20
  Binding Template Parameters</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2623">6.3.=20
  Conditional Link Injection</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2644">6.4.=20
  Link Headers</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2678">6.5.=20
  Configuration</A></SPAN></DT></DL></DIV>
<P><A=20
href=3D"http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-dr=
iven"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">RESTful APIs =
must be=20
hypertext-driven</A>. JAX-RS currently offers <A=20
href=3D"https://jsr311.dev.java.net/nonav/releases/1.1/javax/ws/rs/core/U=
riBuilder.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">UriBuilder</A> to=20
simplify URI creation but Jersey adds an additional annotation-based =
alternative=20
that is described here.</P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2522></A>6.1.&nbsp;Links in=20
Representations</H2></DIV></DIV></DIV>
<P>Links are added to representations using the <CODE =
class=3Dliteral>@Ref</CODE>=20
annotation on entity class fields. The Jersey runtime is responsible for =

injecting the appropriate URI into the field prior to serialization by a =
message=20
body writer. E.g. consider the following resource and entity =
classes:</P><PRE class=3Dprogramlisting>@Path(<SPAN =
class=3DString>"widgets"</SPAN>)
<SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> WidgetsResource {
  @GET
  <SPAN class=3DReservedWord>public</SPAN> Widgets get() {
    <SPAN class=3DReservedWord>return</SPAN> <SPAN =
class=3DReservedWord>new</SPAN> Widgets();
  }
}
       =20
<SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> Widgets {
  @Ref(resource=3DWidgetsResource.<SPAN =
class=3DReservedWord>class</SPAN>)
  URI u;
}</PRE>
<P>After a call to <CODE class=3Dliteral>WidgetsResource#get</CODE>, the =
Jersey=20
runtime will inject the value "/context/widgets"<SUP>[<A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#ftn.d0e2537"=20
name=3Dd0e2537>1</A>]</SUP> into the returned <CODE =
class=3Dliteral>Widgets</CODE>=20
instance. If an absolute URI is desired instead of an absolute path then =
the=20
annotation can be changed to <CODE=20
class=3Dliteral>@Ref(resource=3DWidgetsResource.class, =
style=3DABSOLUTE)</CODE>.</P>
<P>The above usage works nicely when there's already a URI template on a =
class=20
that you want to reuse. If there's no such template available then you =
can use a=20
literal value instead of a reference. E.g. the following is equivalent =
to the=20
earlier example: <CODE class=3Dliteral>@Ref(value=3D"widgets",=20
style=3DABSOLUTE)</CODE>.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2555></A>6.2.&nbsp;Binding=20
Template Parameters</H2></DIV></DIV></DIV>
<P>Referenced or literal templates may contain parameters. Two forms of=20
parameters are supported:</P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>
  <P>URI template parameters, e.g. <CODE =
class=3Dliteral>widgets/{id}</CODE> where=20
  <CODE class=3Dliteral>{id}</CODE> represents a variable part of the =
URI.</P>
  <LI>
  <P>EL expressions, e.g. <CODE =
class=3Dliteral>widgets/${instance.id}</CODE>=20
  where <CODE class=3Dliteral>${instance.id}</CODE> is an EL=20
expression.</P></LI></UL></DIV>
<P>Parameter values can be extracted from three implicit beans:</P>
<DIV class=3Dvariablelist>
<DL>
  <DT><SPAN class=3Dterm><CODE class=3Dliteral>instance</CODE> </SPAN>
  <DD>
  <P>Represents the instance of the class that contains the annotated =
field.</P>
  <DT><SPAN class=3Dterm><CODE class=3Dliteral>entity</CODE> </SPAN>
  <DD>
  <P>Represents the entity class instance returned by the resource =
method.</P>
  <DT><SPAN class=3Dterm><CODE class=3Dliteral>resource</CODE> </SPAN>
  <DD>
  <P>Represents the resource class instance that returned the=20
entity.</P></DD></DL></DIV>
<P>By default URI template parameter values are extracted from the =
implicit=20
<CODE class=3Dliteral>instance</CODE> bean, i.e. the following two =
annotations are=20
equivalent:</P><PRE class=3Dprogramlisting>@Ref(<SPAN =
class=3DString>"widgets/{id}"</SPAN>)
@Ref(<SPAN class=3DString>"widgets/${instance.id}"</SPAN>)</PRE>
<P>The source for URI template parameter values can be changed using the =
<CODE=20
class=3Dliteral>@Binding</CODE> annotation, E.g. the following two =
annotations are=20
equivalent:</P><PRE class=3Dprogramlisting>@Ref(value=3D<SPAN =
class=3DString>"widgets/{id}"</SPAN>, bindings=3D{
  @Binding(name=3D<SPAN class=3DString>"id"</SPAN> value=3D<SPAN =
class=3DString>"${resource.id}"</SPAN>}
)
@Ref(<SPAN class=3DString>"widgets/${resource.id}"</SPAN>)</PRE></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2623></A>6.3.&nbsp;Conditional=20
Link Injection</H2></DIV></DIV></DIV>
<P>Link value injection can be made conditional by use of the <CODE=20
class=3Dliteral>condition</CODE> property. The value of this property is =
a boolean=20
EL expression and a link will only be injected if the condition =
expression=20
evaluates to true. E.g.:</P><PRE =
class=3Dprogramlisting>@Ref(value=3D<SPAN =
class=3DString>"widgets/${instance.id}/offers"</SPAN>,
  condition=3D<SPAN class=3DString>"${instance.offers}"</SPAN>)
URI offers;</PRE>
<P>In the above, a URI will only be injected into the <CODE=20
class=3Dliteral>offers</CODE> field if the <CODE =
class=3Dliteral>offers</CODE>=20
property of the instance is <CODE class=3Dliteral>true</CODE>. =
</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2644></A>6.4.&nbsp;Link=20
Headers</H2></DIV></DIV></DIV>
<P><A =
href=3D"http://tools.ietf.org/html/draft-nottingham-http-link-header-09" =

target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">HTTP Link =
headers</A> can=20
also be added to responses using annotations. Instead of annotating the =
fields=20
of an entity class with <CODE class=3Dliteral>@Ref</CODE>, you instead =
annotate=20
the entity class itself with <CODE class=3Dliteral>@Link</CODE>. =
E.g.:</P><PRE class=3Dprogramlisting>@Link(
  value=3D@Ref(<SPAN =
class=3DString>"widgets/${resource.nextId}"</SPAN>),
  rel=3D<SPAN class=3DString>"next"</SPAN>
)</PRE>
<P>The above would insert a HTTP Link header into any response whose =
entity was=20
thus annotated. The <CODE class=3Dliteral>@Link</CODE> annotation =
contains=20
properties that map to the parameters of the HTTP Link header. The above =

specifies the link relation as <CODE class=3Dliteral>next</CODE>. All =
properties=20
of the <CODE class=3Dliteral>@Ref</CODE> annotation may be used as =
described=20
above. </P>
<P>Multiple link headers can be added by use of the <CODE=20
class=3Dliteral>@Links</CODE> annotation which can contain multiple =
<CODE=20
class=3Dliteral>@Link</CODE> annotations.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e2678></A>6.5.&nbsp;Configuration</H2></DIV></DIV></DIV>
<P>Declarative hyperlinking support is provided in the form of a filter. =
First,=20
the application must declare a dependency on the <CODE=20
class=3Dliteral>jersey-server-linking</CODE> module:</P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
  &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.experimental&lt;<SP=
AN class=3DReservedWord>/groupId</SPAN>&gt;
  &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-server-linking&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
  &lt;<SPAN =
class=3DReservedWord>version</SPAN>&gt;${jersey-version}&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>Second the filter needs to be installed in the application either=20
programmatically by adding:</P><PRE =
class=3Dprogramlisting>com.sun.jersey.server.linking.LinkFilter</PRE>
<P>to the list defined by:</P><PRE =
class=3Dprogramlisting>com.sun.jersey.spi.container.ContainerResponseFilt=
ers</PRE>
<P>or using a <CODE class=3Dliteral>web.xml</CODE> init =
parameter:</P><PRE class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>init-param</SPAN>&gt;
  &lt;<SPAN =
class=3DReservedWord>param-name</SPAN>&gt;com.sun.jersey.spi.container.Co=
ntainerResponseFilters&lt;<SPAN =
class=3DReservedWord>/param-name</SPAN>&gt;
  &lt;<SPAN =
class=3DReservedWord>param-value</SPAN>&gt;com.sun.jersey.server.linking.=
LinkFilter&lt;<SPAN class=3DReservedWord>/param-value</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/init-param</SPAN>&gt;
</PRE>
<P>See the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/jersey-se=
rver-linking-sample/"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-server-linking-sample=
</A> for=20
more details.</P></DIV>
<DIV class=3Dfootnotes><BR>
<HR align=3Dleft width=3D100>

<DIV class=3Dfootnote>
<P><SUP>[<A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2537"=20
name=3Dftn.d0e2537>1</A>] </SUP>Where <CODE =
class=3Dliteral>/context</CODE> is the=20
application deployment context.</P></DIV></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A =
name=3Dtest-framework></A>Chapter&nbsp;7.&nbsp;Jersey Test=20
Framework</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2728">7.1.=20
  What is different in Jersey 1.2</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2766">7.2.=20
  Using test framework</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2837">7.3.=20
  Creating tests</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2854">7.4.=20
  Creating own module</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2882">7.5.=20
  Running tests outside Maven</A></SPAN></DT></DL></DIV>
<P>This chapter will present how to write tests for your resources using =
Jersey=20
Test Framework and how to run them in various containers. Additionally =
it will=20
explain how to create new module for not yet supported container.</P>
<P>Jersey currently provides following modules: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>jersey-test-framework-grizzly
  <LI>jersey-test-framework-http
  <LI>jersey-test-framework-inmemory
  <LI>jersey-test-framework-embedded-glassfish
  <LI>jersey-test-framework-external</LI></UL></DIV>
<P></P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2728></A>7.1.&nbsp;What is=20
different in Jersey 1.2</H2></DIV></DIV></DIV>
<P>There are some significant breaking changes in Jersey 1.2. In prior =
Jersey=20
versions users were able to select container factory just by specifying =
it in=20
some property. That was convenient from user perspective but not good =
from build=20
perspective. Former test framework artifact was dependent on all =
containers=20
which is useless in most cases (usually you test only with one =
container).</P>
<P>Solution to this is modularization - make module for each test =
container. It=20
has one drawback: users will have to have other dependency in their=20
applications, for example if you want to test on embedded grizzly =
container, you=20
will declare (only) dependency on jersey test framework grizzly module. =
You can=20
declare multiple test containers this way and select one by defining =
property=20
<CODE class=3Dliteral>jersey.test.containerFactory</CODE>.</P>
<P>Another change (non-breaking) is renaming Jersey parameters which =
control=20
container factory, used port and host name for external container. Old=20
properties are still working but users are encouraged to use new =
ones.</P>
<DIV class=3Dtable><A name=3Dd0e2740></A>
<P class=3Dtitle><B>Table&nbsp;7.1.&nbsp;Property name changes</B></P>
<DIV class=3Dtable-contents>
<TABLE border=3D1 summary=3D"Property name changes">
  <COLGROUP>
  <COL width=3D"50%">
  <COL width=3D"50%"></COLGROUP>
  <THEAD>
  <TR>
    <TH align=3Dleft>Prior Jersey 1.2</TH>
    <TH align=3Dleft>Jersey 1.2+</TH></TR></THEAD>
  <TBODY>
  <TR>
    <TD align=3Dleft>test.containerFactory</TD>
    <TD align=3Dleft>jersey.test.containerFactory</TD></TR>
  <TR>
    <TD align=3Dleft>JERSEY_HTTP_PORT</TD>
    <TD align=3Dleft>jersey.test.port</TD></TR>
  <TR>
    <TD align=3Dleft>JERSEY_HOST_NAME (used with external =
container)</TD>
    <TD =
align=3Dleft>jersey.test.host</TD></TR></TBODY></TABLE></DIV></DIV><BR=20
class=3Dtable-break></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2766></A>7.2.&nbsp;Using test=20
framework</H2></DIV></DIV></DIV>
<P>When you want test your resources in maven-based project, you need to =
add=20
dependency on one of the Jersey Test Framework modules. You can take a =
look at=20
helloworld sample pom file. There is declared dependency on: </P><PRE =
class=3Dprogramlisting>
                &lt;<SPAN class=3DReservedWord>dependency</SPAN>&gt;
                &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.jersey-test-framewo=
rk&lt;<SPAN class=3DReservedWord>/groupId</SPAN>&gt;
                &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-test-framework-grizzly&l=
t;<SPAN class=3DReservedWord>/artifactId</SPAN>&gt;
                &lt;<SPAN =
class=3DReservedWord>version</SPAN>&gt;${project.version}&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
                &lt;<SPAN =
class=3DReservedWord>scope</SPAN>&gt;test&lt;<SPAN =
class=3DReservedWord>/scope</SPAN>&gt;
                &lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;

            </PRE>
<P>which means that Grizzly Web container will be used for testing. </P>
<P>You can specify more than one module in dependencies and choose which =
module=20
will be used by <CODE =
class=3Dliteral>jersey.test.containerFactory</CODE>=20
property. Every module should contain at least one container =
factory.</P>
<DIV class=3Dglosslist>
<DL>
  <DT>jersey-test-framework-grizzly
  <DD>
  <P><CODE=20
  =
class=3Dliteral>com.sun.jersey.test.framework.spi.container.grizzly.web.G=
rizzlyWebTestContainerFactory</CODE>=20
  <CODE=20
  =
class=3Dliteral>com.sun.jersey.test.framework.spi.container.grizzly.Grizz=
lyTestContainerFactory</CODE>=20
  </P>
  <DT>jersey-test-framework-http
  <DD>
  <P><CODE=20
  =
class=3Dliteral>com.sun.jersey.test.framework.spi.container.http.HTTPCont=
ainerFactory</CODE>=20
  </P>
  <DT>jersey-test-framework-inmemory
  <DD>
  <P><CODE=20
  =
class=3Dliteral>com.sun.jersey.test.framework.spi.container.inmemory.InMe=
moryTestContainerFactory</CODE>=20
  </P>
  <DT>jersey-test-framework-embedded-glassfish
  <DD>
  <P><CODE=20
  =
class=3Dliteral>com.sun.jersey.test.framework.spi.container.embedded.glas=
sfish.EmbeddedGlassFishTestContainerFactory</CODE>=20
  </P>
  <DT>jersey-test-framework-external
  <DD>
  <P><CODE=20
  =
class=3Dliteral>com.sun.jersey.test.framework.spi.container.external.Exte=
rnalTestContainerFactory</CODE>=20
  </P></DD></DL></DIV>
<P>Basically you can just add dependency on single module and its =
container=20
factory would be used. Problem is when you specify module which has more =
than=20
one container factory or multiple modules. If this happen, test =
framework will=20
choose factory using following rules:</P><PRE =
class=3Dprogramlisting><SPAN class=3DReservedWord>if</SPAN>(<SPAN =
class=3DString>"jersey.test.containerFactory"</SPAN> not specified)
    look <SPAN class=3DReservedWord>for</SPAN> factories
    <SPAN class=3DReservedWord>if</SPAN>(factories.count =3D=3D 1)
        use found factory
    <SPAN class=3DReservedWord>else</SPAN>
        <SPAN =
class=3DReservedWord>if</SPAN>(GrizzlyWebTestContainerFactory is =
present)
            use it <SPAN class=3DComment>// current default jersey test =
container factory</SPAN>
        <SPAN class=3DReservedWord>else</SPAN>
            use first found and log warning
<SPAN class=3DReservedWord>else</SPAN>
    use factory <SPAN class=3DReservedWord>class</SPAN> specified in =
<SPAN class=3DString>"jersey.test.containerFactory"</SPAN></PRE>
<P>That means if your project depends on multiple test framework modules =
and you=20
want to control which will be used, you have to declare which one in =
property=20
called "jersey.test.containerFactory", for example like this: <CODE=20
class=3Dliteral>mvn clean install=20
-Djersey.test.containerFactory=3Dcom.sun.jersey.test.framework.spi.contai=
ner.inmemory.InMemoryTestContainerFactory</CODE>=20
</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2837></A>7.3.&nbsp;Creating=20
tests</H2></DIV></DIV></DIV>
<P>Jersey Test Framework uses JUnit version 4.X, so if you can write =
standard=20
unit tests, you can easily create Jersey Test. You need to declare test =
as a=20
descendant of JerseyTest class. </P><PRE class=3Dprogramlisting><SPAN =
class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> MainTest <SPAN =
class=3DReservedWord>extends</SPAN> JerseyTest {

    <SPAN class=3DReservedWord>public</SPAN> MainTest()<SPAN =
class=3DReservedWord>throws</SPAN> Exception {
        <SPAN class=3DReservedWord>super</SPAN>(<SPAN =
class=3DString>"com.sun.jersey.samples.helloworld.resources"</SPAN>);
    }

    @Test
    <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> testHelloWorld() {
        WebResource webResource =3D resource();
        String responseMsg =3D webResource.path(<SPAN =
class=3DString>"helloworld"</SPAN>).get(String.<SPAN =
class=3DReservedWord>class</SPAN>);
        assertEquals(<SPAN class=3DString>"Hello World"</SPAN>, =
responseMsg);
    }

}</PRE>
<P>Note <CODE class=3Dliteral>super</CODE> call in constructor - it =
passes list of=20
package names to scan (it really is a list, JerseyTest constructor has =
variable=20
argument count). Another useful method is <CODE =
class=3Dliteral>resource()</CODE>=20
which returns WebResource instance with URI set to base URI of your =
application.=20
You can get preconfigured Jersey Client instance similarly by calling =
<CODE=20
class=3Dliteral>client()</CODE> method.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2854></A>7.4.&nbsp;Creating own=20
module</H2></DIV></DIV></DIV>
<P>Creating your own module is pretty straightforward, you just have to=20
implement <CODE=20
class=3Dliteral>com.sun.jersey.test.framework.spi.container.TestContainer=
Factory</CODE>=20
and <CODE=20
class=3Dliteral>com.sun.jersey.test.framework.spi.container.TestContainer=
</CODE>.=20
TestContainer factory is there basically for returning TestContainer =
instance=20
and TestContainer has self-explanatory methods: <CODE=20
class=3Dliteral>start()</CODE>, <CODE class=3Dliteral>stop()</CODE>, =
<CODE=20
class=3Dliteral>getClient()</CODE> and <CODE =
class=3Dliteral>getBaseURI()</CODE>. I=20
recommend taking look at source code and read javadoc of these two =
classes, all=20
you need is there.</P>
<P>You should be avare of another thing when implementing own jersey =
test=20
framework module. If you want it to be usable by running just <CODE=20
class=3Dliteral>mvn clean install</CODE> (when only your module is =
specified), you=20
need to add=20
META-INF/services/com.sun.jersey.test.framework.spi.container.TestContain=
erFactory=20
file into your jar and put there your factory class (fully classified)=20
name.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2882></A>7.5.&nbsp;Running tests=20
outside Maven</H2></DIV></DIV></DIV>
<P>Since Jersey is Maven based project, executing tests without Maven =
can be=20
painful. You have to have everything needed present on classpath and by=20
everything is meant following list:</P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-server/1.4=
/jersey-server-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-server</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-core/1.4/j=
ersey-core-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-core</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/javax/ws/rs/jsr311-api/1.1/jsr31=
1-api-1.1.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jsr311-api</A>
  <LI><A href=3D"http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar"=20
  target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">asm</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-test-frame=
work/jersey-test-framework-grizzly/1.4/jersey-test-framework-grizzly-1.4.=
jar"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-test-framework-grizzl=
y</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-test-frame=
work/jersey-test-framework-core/1.4/jersey-test-framework-core-1.4.jar"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-test-framework-core</=
A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-client/1.4=
/jersey-client-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-client</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/glassfish/org/glassfish/javax.serv=
let/3.0-b66/javax.servlet-3.0-b66.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">javax.servlet</A>
  <LI><A =
href=3D"http://repo1.maven.org/maven2/junit/junit/4.5/junit-4.5.jar"=20
  target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">junit</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/xml/bind/jaxb-impl/2.1/j=
axb-impl-2.1.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jaxb-impl</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/javax/xml/bind/jaxb-api/2.1/jaxb=
-api-2.1.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jaxb-api</A>
  <LI><A=20
  =
href=3D"http://repo1.maven.org/maven2/javax/xml/stream/stax-api/1.0-2/sta=
x-api-1.0-2.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">stax-api</A>
  <LI><A=20
  =
href=3D"http://repo1.maven.org/maven2/javax/activation/activation/1.1/act=
ivation-1.1.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">activation</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-servlet-=
webserver/1.9.18-i/grizzly-servlet-webserver-1.9.18-i.jar"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-servlet-webserver</A=
>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-http/1.9=
.18-i/grizzly-http-1.9.18-i.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-http</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-framewor=
k/1.9.18-i/grizzly-framework-1.9.18-i.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-framework</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-utils/1.=
9.18-i/grizzly-utils-1.9.18-i.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-utils</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-rcm/1.9.=
18-i/grizzly-rcm-1.9.18-i.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-rcm</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-portunif=
/1.9.18-i/grizzly-portunif-1.9.18-i.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-portunif</A>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-http-ser=
vlet/1.9.18-i/grizzly-http-servlet-1.9.18-i.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-http-servlet</A>
  <LI><A=20
  =
href=3D"http://repo1.maven.org/maven2/javax/servlet/servlet-api/2.5/servl=
et-api-2.5.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">servlet-api</A></LI></UL></D=
IV>
<P>This is needed to run <CODE class=3Dliteral>helloworld</CODE> sample =
tests, if=20
you want run something more complex or with different test container =
(grizzly is=20
used here), you may need to add other application specific dependencies =
(and=20
remove some as well).</P>
<P>As was already written above, Jersey test is descendant of standard =
unit test=20
so it can be run same way. You can execute it by executing <CODE=20
class=3Dliteral>org.junit.runner.JUnitCore</CODE> and passing your test =
class name=20
as parameter, from ant (<A=20
href=3D"http://ant.apache.org/manual/OptionalTasks/junit.html" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">junit-task</A>) or whatever =
you are=20
used to.</P></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A=20
name=3Dosgi></A>Chapter&nbsp;8.&nbsp;OSGi</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e2968">8.1.=20
  Feature Overview</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3018">8.2.=20
  WAB Example</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3046">8.3.=20
  Http Service Example</A></SPAN></DT></DL></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e2968></A>8.1.&nbsp;Feature=20
Overview</H2></DIV></DIV></DIV>
<P>OSGi support was added to the Jersey version 1.2. Since then, you =
should be=20
able to utilize standard OSGi means to run Jersey based web applications =
in OSGi=20
runtime as described in the OSGi Service Platform Enterprise =
Specification. The=20
specification could be downloaded from <A=20
href=3D"http://www.osgi.org/Download/Release4V42" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://www.osgi.org/Download=
/Release4V42</A>.=20
</P>
<P>The two supported ways of running an OSGi web application are </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>WAB (Web Application Bundle)
  <LI>Http Service</LI></UL></DIV>
<P></P>
<P>WAB is in fact just an OSGified WAR archive. Http Service feature =
allows you=20
to publish Java EE Servlets in the OSGi runtime. </P>
<P>Two examples were added to the Jersey distribution to depict the =
above=20
mentioned features and show how to use them with Jersey </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>
  <P><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/helloworl=
d-osgi-webapp/1.4/helloworld-osgi-webapp-1.4-project.zip"=20
  target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Hello world =
WAB</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/osgi-http=
-service/1.4/osgi-http-service-1.4-project.zip"=20
  target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Simple OSGi =
Http=20
  Service application</A></P></LI></UL></DIV>
<P>Both examples are multi-module maven projects and both consist of an=20
application OSGi bundle module and a test module. The tests are based on =
<A=20
href=3D"http://wiki.ops4j.org/display/paxexam/Pax+Exam" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Pax Exam</A> framework. =
Both examples=20
also include a readme file containing instructions how to manually run =
the=20
application using <A href=3D"http://felix.apache.org/site/index.html" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Apache Felix</A> framework. =
</P>
<P>The rest of the chapter describes how to run the above mentioned =
examples on=20
<A href=3D"http://www.glassfish.org/" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">GlassFish v3.1</A> =
application=20
server. Since GlassFish utilizes Apache Felix, an OSGi runtime comes out =
of the=20
box with GlassFish. Presuming you have the default GlassFish instance =
running=20
you should be able to connect to the Felix console with </P><PRE =
class=3Dprogramlisting>        telnet localhost 6666
</PRE>
<P>You should then see Apache Felix prompt similar to following </P><PRE =
class=3Dprogramlisting>Trying ::1...
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.

Felix Remote Shell Console:
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D

-&gt;
</PRE>
<P>Both Jersey examples require an OSGi Event Admin API implementation. =
At the=20
moment, GlassFish container does not provide any. You will need to =
install one=20
before you try to install and start the Jersey example bundle files. =
Since=20
GlassFish is based on Apache Felix, we will pick the default Event Admin =
API=20
implementation from there: </P><PRE class=3Dprogramlisting>-&gt;install =
http://repo2.maven.org/maven2/org/apache/felix/org.apache.felix.eventadmi=
n/1.2.2/org.apache.felix.eventadmin-1.2.2.jar
Bundle ID: 241
-&gt; start 241
-&gt;
</PRE>
<P>In the above listing, the number 241 represents handler to the OSGi =
bundle i=20
have just installed. Bundle numbers are allocated dynamically. It means, =
you=20
might be given a different handler. It is important to always use the =
correct=20
bundle number as specified by the Felix runtime in the "Bundle ID:" =
response.=20
</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e3018></A>8.2.&nbsp;WAB=20
Example</H2></DIV></DIV></DIV>
<P>As mentioned above, WAB is just an OSGified WAR archive. Besides the =
ususal=20
OSGi headers it must in addition contain a special header, <CODE=20
class=3Dcode>Web-ContextPath</CODE>, specifying the web application =
context path.=20
Our WAB has (beside some other) the following headers present in the =
manifest=20
</P><PRE class=3Dprogramlisting>Web-ContextPath: helloworld
Webapp-Context: helloworld
Bundle-ClassPath: WEB-INF/classes
  </PRE>
<P>where the second one is ignored by GlassFish, but is needed by other=20
containers not fully compliant with the OSGi Enterprise Specification =
mentioned=20
above. The third manifest header worth mentioning is the <CODE=20
class=3Dcode>Bundle-ClassPath</CODE> specifying where to find the =
application Java=20
classes within the bundle archive. </P>
<P>For more detailed information on the example please see the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/helloworl=
d-osgi-webapp/1.4/helloworld-osgi-webapp-1.4-project.zip"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">source =
code</A>. </P>
<P>Following is the listing showing how to actually install and run the =
WAB on=20
GlassFish (please do not forget to do the preparation described in the =
previous=20
section, namely install an Event Admin implementation bundle). </P><PRE =
class=3Dprogramlisting>-&gt;install =
http://download.java.net/maven/2/com/sun/jersey/samples/helloworld-osgi-w=
ebapp/war-bundle/1.4/war-bundle-1.4.war
Bundle ID: 242
-&gt; start 242
</PRE>
<P>After that, you should be able to access the deployed Jersey resource =
at <A=20
href=3D"http://localhost:8080/helloworld/webresources/helloworld" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://localhost:8080/hellow=
orld/webresources/helloworld</A>=20
</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e3046></A>8.3.&nbsp;Http Service=20
Example</H2></DIV></DIV></DIV>
<P>Our aim is to make also OSGi Http Service feature work for Jersey on=20
GlassFish v3.1. Due to a regression, this feature is currently broken, =
but=20
things should be fixed soon. </P>
<P>Once fixed, the installation steps should look like follows: </P><PRE =
class=3Dprogramlisting>Trying ::1...
Trying 127.0.0.1...
Connected to localhost.
Escape character is '^]'.

Felix Remote Shell Console:
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D

-&gt;install =
http://download.java.net/maven/glassfish/org/glassfish/osgi-http/3.1-SNAP=
SHOT/osgi-http-3.1-SNAPSHOT.jar
Bundle ID: 243
-&gt;install =
http://download.java.net/maven/2/com/sun/jersey/samples/osgi-http-service=
/bundle/1.4/bundle-1.4.jar
Bundle ID: 244
-&gt; start 243 244
</PRE>
<P>After that, you should be able to access the Jersey resource at <A=20
href=3D"http://localhost:8080/osgi/jersey-http-service/status" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://localhost:8080/osgi/j=
ersey-http-service/status</A>=20
</P>
<P>Finally, to close the Felix console session just enter the <CODE=20
class=3Dcode>exit</CODE> command: </P><PRE class=3Dprogramlisting>-&gt; =
exit
Good Bye!
Connection closed by foreign host.
</PRE>
<P></P></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A name=3Djrebel></A>Chapter&nbsp;9.&nbsp;JRebel=20
support</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3079">9.1.=20
  How to use JRebel with Jersey</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3090">9.2.=20
  Using JRebel with the hello world sample</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3127">9.3.=20
  Limitations</A></SPAN></DT></DL></DIV>
<P>Jersey provides basic support for JRebel. JRebel can be used to =
reload java=20
classes at runtime without requiring to redeploy an application. This =
can=20
improve developer productivity. Java source can be modified, recompiled, =
and=20
JRebel will ensure changes will be reflected at runtime.</P>
<P>JRebel isn't opensource and is not for free BUT Zeroturnaround =
(JRebel's=20
author) provides a free license for open source project developers. More =
details=20
can be found on the project website: <A=20
href=3D"http://www.zeroturnaround.com/jrebel/" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://www.zeroturnaround.co=
m/jrebel/</A>.=20
Jersey currently supports JRebel version 3.1.2.</P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e3079></A>9.1.&nbsp;How to use=20
JRebel with Jersey</H2></DIV></DIV></DIV>
<P>The jersey-jrebel dependency is required in the pom file:</P><PRE =
class=3Dprogramlisting>        &lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-jrebel&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>The javarebel-maven-plugin plugin can be added to the pom to =
automatically=20
configure JRebel for the case when java is executed from maven:</P><PRE =
class=3Dprogramlisting>            &lt;<SPAN =
class=3DReservedWord>plugin</SPAN>&gt;
                &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;org.zeroturnaround&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
                &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;javarebel-maven-plugin&lt;<SPAN=
 class=3DReservedWord>/artifactId</SPAN>&gt;

                &lt;<SPAN class=3DReservedWord>executions</SPAN>&gt;
                    &lt;<SPAN class=3DReservedWord>execution</SPAN>&gt;
                        &lt;<SPAN =
class=3DReservedWord>id</SPAN>&gt;generate-rebel-xml&lt;<SPAN =
class=3DReservedWord>/id</SPAN>&gt;
                        &lt;<SPAN =
class=3DReservedWord>phase</SPAN>&gt;process-resources&lt;<SPAN =
class=3DReservedWord>/phase</SPAN>&gt;
                        &lt;<SPAN class=3DReservedWord>goals</SPAN>&gt;
                            &lt;<SPAN =
class=3DReservedWord>goal</SPAN>&gt;generate&lt;<SPAN =
class=3DReservedWord>/goal</SPAN>&gt;
                        &lt;<SPAN class=3DReservedWord>/goals</SPAN>&gt;
                    &lt;<SPAN class=3DReservedWord>/execution</SPAN>&gt;
                &lt;<SPAN class=3DReservedWord>/executions</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>/plugin</SPAN>&gt;</PRE></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e3090></A>9.2.&nbsp;Using JRebel=20
with the hello world sample</H2></DIV></DIV></DIV>
<P>The following assumes that JRebel has been set up correctly (a JRebel =

informational message will be output if JRebel is enabled).</P>
<P>Download the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/helloworl=
d/1.4/helloworld-1.4-project.zip"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">hello world =
sample</A>=20
and modify the pom file in accordance with the prevous chapter.</P>
<P>Compile Helloworld sample with <CODE class=3Dcode>mvn clean =
install</CODE> and=20
run it with <CODE class=3Dcode>mvn exec:java</CODE>. The Helloworld =
application is=20
deployed on Grizzly container.</P>
<P>Use a browser and goto the following URL <A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://jersey.java.net/nonav=
/documentation/latest/</A>.=20
Messages should be output indicating initialization of Jersey framework, =
and the=20
browser should display <CODE class=3Dcode>Hello World</CODE>.</P>
<P>Modify the <CODE class=3Dcode>HelloWorldResource.java</CODE> file =
such that the=20
resource method <CODE class=3Dcode>getClichedMessage</CODE> returns a =
different=20
String value. Run <CODE class=3Dcode>mvn compile</CODE>. Reload the =
browser window=20
and the browser should display the modified message.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e3127></A>9.3.&nbsp;Limitations</H2></DIV></DIV></DIV>
<P>JRebel currently doesn't notify it's plugin about newly created =
classes that=20
have no reference to existing classes, such as newly created resource or =
provder=20
classes. However, its possible to detect a newly created resource class =
and use=20
it in your application when you are doing some other changes to existing =
code.=20
Why? After a change has beed made, Jersey re-initializes itself and the =
new=20
class can be detected in the process. For this case you you have to use =
class or=20
package scanning for detecting such resource classes.</P></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A =
name=3Dexperimental></A>Chapter&nbsp;10.&nbsp;Experimental=20
Features</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#hypermedia">10.1.=20
  Hypermedia Actions</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3147">10.1.1.=20
    Introduction</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3191">10.1.2.=20
    Hypermedia by Example</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3255">10.1.3.=20
    Server API</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3356">10.1.4.=20
    Client API</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3494">10.1.5.=20
    Server Evolution</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3519">10.1.6.=20
    Configuring Hypermedia in =
Jersey</A></SPAN></DT></DL></DD></DL></DIV>
<P>This chapter describes experimental features of Jersey that are only=20
available in maven SNAPSHOT releases. Such features are not intended to =
be=20
utilized for stable development as the APIs may change. </P>
<P>Providing such experimental features allows developers to experiment =
and=20
provide feedback, please send feedback to <A=20
href=3D"mailto:users@jersey.dev.java.net" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">users@jersey.dev.java.net</A=
>.</P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dhypermedia></A>10.1.&nbsp;Hypermedia=20
Actions</H2></DIV></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A=20
name=3Dd0e3147></A>10.1.1.&nbsp;Introduction</H3></DIV></DIV></DIV>
<P>It is generally understood that, in order to follow the REST style, =
URIs=20
should be assigned to anything of interest (resources) and a few, =
well-defined=20
operations should be used to interact with these resources. For example, =
the=20
state of a purchase order resource can be updated by POSTing or PATCHing =
a new=20
value for the its state field. However, there are actions that cannot be =
easily=20
mapped to read or write operations on resources. These operations are =
inherently=20
more complex and their details are rarely of interest to clients. For =
example,=20
given a purchase order resource, the operation of setting its state to =
<CODE=20
class=3Dliteral>REVIEWED</CODE> may involve a number of different steps =
such as:=20
</P>
<DIV class=3Dorderedlist>
<OL type=3D1>
  <LI>checking the customer's credit status
  <LI>reserving product inventory
  <LI>verifying per-customer quantity limits.</LI></OL></DIV>
<P>Clearly, this <SPAN class=3Demphasis><EM>workflow</EM></SPAN> cannot =
be equated=20
to simply updating a field on a resource. Moreover, clients are =
generally=20
uninterested in the details behind these type of workflows, and in some =
cases=20
computing the final state of a resource on the client side, as required =
for a=20
PUT operation, is impractical or impossible.</P>
<P>We call these operations <SPAN =
class=3Demphasis><EM>actions</EM></SPAN> and,=20
because they are of interest to us, we turn them into <SPAN=20
class=3Demphasis><EM>action resources</EM></SPAN>. An action resource is =
a=20
sub-resource defined for the purpose of exposing workflow-related =
operations on=20
parent resources. As sub-resources, action resources are identified by =
URIs that=20
are relative to their parent. For instance, the following are examples =
of action=20
resources: </P><PRE class=3Dprogramlisting>    =
http://.../orders/1/review
    http://.../orders/1/pay
    http://.../orders/1/ship</PRE>
<P>for purchase order "1" identified by <CODE=20
class=3Dliteral>http://.../orders/1</CODE>.</P>
<P>Action resources as first-class citizens provide the necessary tools =
for=20
developers to implement HATEOAS. A set of action resources defines --via =
their=20
link relationships-- a <SPAN class=3Demphasis><EM>contract</EM></SPAN> =
with=20
clients that has the potential to evolve over time depending on the=20
application's state. For instance, assuming purchase orders are only =
reviewed=20
once, the <CODE class=3Dliteral>review</CODE> action will become =
unavailable and=20
the <CODE class=3Dliteral>pay</CODE> action will become available after =
an order=20
is reviewed.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e3191></A>10.1.2.&nbsp;Hypermedia by=20
Example</H3></DIV></DIV></DIV>
<P>The notion of action resources naturally leads to discussions about =
improved=20
client APIs to support them. Given that action resources are identified =
by URIs,=20
no additional API is really necessary, but the use of client-side =
proxies and=20
method invocations to trigger these actions seems quite natural. =
Additionally,=20
the use of client proxies introduces a level of indirection that enables =
better=20
support for <SPAN class=3Demphasis><EM>server evolution</EM></SPAN>, =
i.e. the=20
ability of a server's contract to support certain changes without =
breaking=20
existing clients. Finally, it has been argued that using client proxies =
is=20
simply more natural for developers and less error prone as fewer URIs =
need to be=20
constructed.</P>
<P>Rather than presenting all these extensions abstractly, we shall =
illustrate=20
their use via an example. The complete example can found in <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/experimental/hype=
rmedia-action/hypermedia-action-sample/"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">hypermedia-action-sample</A>=
. The=20
<SPAN class=3Demphasis><EM>Purchase Ordering System</EM></SPAN> =
exemplifies a=20
system in which customers can submit orders and where orders are guided =
by a=20
workflow that includes states like <CODE =
class=3Dliteral>REVIEWED</CODE>, <CODE=20
class=3Dliteral>PAYED</CODE> and <CODE class=3Dliteral>SHIPPED</CODE>. =
The system's=20
model is comprised of 4 entities: <CODE class=3Dliteral>Order</CODE>, =
<CODE=20
class=3Dliteral>Product</CODE>, <CODE class=3Dliteral>Customer</CODE> =
and <CODE=20
class=3Dliteral>Address</CODE>. These model entities are controlled by 3 =
resource=20
classes: <CODE class=3Dliteral>OrderResource</CODE>, <CODE=20
class=3Dliteral>CustomerResource</CODE> and <CODE=20
class=3Dliteral>ProductResource</CODE>. Addresses are sub-resources that =
are also=20
controlled by <CODE class=3Dliteral>CustomerResource</CODE>. An order =
instance=20
refers to a single customer, a single address (of that customer) and one =
or more=20
products. The XML representation (or view) of a sample order is shown =
below.=20
</P><PRE class=3Dprogramlisting>    &lt;<SPAN =
class=3DReservedWord>order</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>id</SPAN>&gt;1&lt;<SPAN =
class=3DReservedWord>/id</SPAN>&gt;
        &lt;<SPAN =
class=3DReservedWord>customer</SPAN>&gt;http://.../customers/21&lt;<SPAN =
class=3DReservedWord>/customer</SPAN>&gt;
        &lt;<SPAN =
class=3DReservedWord>shippingAddress</SPAN>&gt;http://.../customers/21/ad=
dress/1&lt;<SPAN class=3DReservedWord>/shippingAddress</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>orderItems</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>product</SPAN>&gt;http://.../products/3345&lt;<SPAN =
class=3DReservedWord>/product</SPAN>&gt;
            &lt;<SPAN class=3DReservedWord>quantity</SPAN>&gt;1&lt;<SPAN =
class=3DReservedWord>/quantity</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>/orderItems</SPAN>&gt;
        &lt;<SPAN =
class=3DReservedWord>status</SPAN>&gt;RECEIVED&lt;<SPAN =
class=3DReservedWord>/status</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>/order</SPAN>&gt;</PRE>
<P>Note the use of URIs to refer to each component of an order. This =
form of=20
<SPAN class=3Demphasis><EM>serialization by reference</EM></SPAN> is =
supported in=20
Jersey using JAXB beans and the <CODE =
class=3Dliteral>@XmlJavaTypeAdapter</CODE>=20
annotation. An <CODE class=3Dliteral>XmlAdapter</CODE> is capable of =
mapping an=20
object reference in the model to a URI. Refer to <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/experimental/hype=
rmedia-action/hypermedia-action-sample/"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">hypermedia-action-sample</A>=
 for more=20
information on how this mapping is implemented.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e3255></A>10.1.3.&nbsp;Server=20
API</H3></DIV></DIV></DIV>
<P>The server API introduces 3 new annotation types: <CODE=20
class=3Dliteral>@Action</CODE>, <CODE =
class=3Dliteral>@ContextualActionSet</CODE>=20
and <CODE class=3Dliteral>@HypermediaController</CODE>. The <CODE=20
class=3Dliteral>@Action</CODE> annotation identifies a sub-resource as a =
<SPAN=20
class=3Demphasis><EM>named action</EM></SPAN>. The <CODE=20
class=3Dliteral>@ContextualActionSet</CODE> is used to support =
contextual=20
contracts and must annotate a method that returns a set of action names. =

Finally, <CODE class=3Dliteral>@HypermediaController</CODE> marks a =
resource class=20
as a <SPAN class=3Demphasis><EM>hypermedia controller class</EM></SPAN>: =
a class=20
with one more methods annotated with <CODE =
class=3Dliteral>@Action</CODE> and at=20
most one method annotated with <CODE=20
class=3Dliteral>@ContextualActionSet</CODE>.</P>
<P>The following example illustrates the use of all these annotation =
types to=20
define the <CODE class=3Dliteral>OrderResource</CODE> =
controller.<SUP>[<A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#ftn.d0e3295"=20
name=3Dd0e3295>2</A>]</SUP> </P><PRE =
class=3Dprogramlisting>&nbsp;&nbsp;1     @Path(<SPAN =
class=3DString>"/orders/{id}"</SPAN>)
&nbsp;&nbsp;2     @HypermediaController(
&nbsp;&nbsp;3         model=3DOrder.<SPAN =
class=3DReservedWord>class</SPAN>,
&nbsp;&nbsp;4         linkType=3DLinkType.LINK_HEADERS)
&nbsp;&nbsp;5     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>class</SPAN> OrderResource {
&nbsp;&nbsp;6        =20
&nbsp;&nbsp;7         <SPAN class=3DReservedWord>private</SPAN> Order =
order;
&nbsp;&nbsp;8    =20
&nbsp;&nbsp;9         ...
&nbsp;10        =20
&nbsp;11         @GET @Produces(<SPAN =
class=3DString>"application/xml"</SPAN>)
&nbsp;12         <SPAN class=3DReservedWord>public</SPAN> Order =
getOrder(@PathParam(<SPAN class=3DString>"id"</SPAN>) String id) {     =20
&nbsp;13             <SPAN class=3DReservedWord>return</SPAN> order;
&nbsp;14         }
&nbsp;15        =20
&nbsp;16         @POST @Action(<SPAN class=3DString>"review"</SPAN>) =
@Path(<SPAN class=3DString>"review"</SPAN>)
&nbsp;17         <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> review(@HeaderParam(<SPAN =
class=3DString>"notes"</SPAN>) String notes) {
&nbsp;18             ...
&nbsp;19             order.setStatus(REVIEWED);
&nbsp;20         }
&nbsp;21        =20
&nbsp;22         @POST @Action(<SPAN class=3DString>"pay"</SPAN>) =
@Path(<SPAN class=3DString>"pay"</SPAN>)
&nbsp;23         <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> pay(@QueryParam(<SPAN =
class=3DString>"newCardNumber"</SPAN>) String newCardNumber) {
&nbsp;24             ...
&nbsp;25             order.setStatus(PAYED);
&nbsp;26         }
&nbsp;27        =20
&nbsp;28         @PUT @Action(<SPAN class=3DString>"ship"</SPAN>) =
@Path(<SPAN class=3DString>"ship"</SPAN>)
&nbsp;29         @Produces(<SPAN =
class=3DString>"application/xml"</SPAN>)
&nbsp;30         @Consumes(<SPAN =
class=3DString>"application/xml"</SPAN>)
&nbsp;31         <SPAN class=3DReservedWord>public</SPAN> Order =
ship(Address newShippingAddress) {
&nbsp;32             ...
&nbsp;33             order.setStatus(SHIPPED);
&nbsp;34             <SPAN class=3DReservedWord>return</SPAN> order;
&nbsp;35         }
&nbsp;36        =20
&nbsp;37         @POST @Action(<SPAN class=3DString>"cancel"</SPAN>) =
@Path(<SPAN class=3DString>"cancel"</SPAN>)
&nbsp;38         <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> cancel(@QueryParam(<SPAN =
class=3DString>"notes"</SPAN>) String notes) {
&nbsp;39             ...
&nbsp;40             order.setStatus(CANCELED);
&nbsp;41         }
&nbsp;42     }</PRE>
<P></P>
<P>The <CODE class=3Dliteral>@HypermediaController</CODE> annotation =
above=20
indicates that this resource class is a hypermedia controller for the =
<CODE=20
class=3Dliteral>Order</CODE> class. Each method annotated with <CODE=20
class=3Dliteral>@Action</CODE> defines a link relationship and =
associated action=20
resource. These methods are also annotated with <CODE =
class=3Dliteral>@Path</CODE>=20
to make a sub-resource. There does not appear to be a need to use <CODE=20
class=3Dliteral>@Action</CODE> and <CODE class=3Dliteral>@Path</CODE>=20
simultaneously, but without the latter some resource methods may become=20
ambiguous. In the future, we hope to eliminate the use of <CODE=20
class=3Dliteral>@Path</CODE> when <CODE class=3Dliteral>@Action</CODE> =
is present.=20
The element <CODE class=3Dliteral>linkType</CODE> selects the way in =
which URIs=20
corresponding to action resources are serialized: in this case, using =
link=20
headers. These link headers become part of the an order's =
representation. For=20
instance, an order in the <CODE class=3Dliteral>RECEIVED</CODE> state, =
i.e. an=20
order that can only be reviewed or canceled, will be represented as =
follows.=20
</P><PRE class=3Dprogramlisting>    Link: &lt;<SPAN =
class=3DReservedWord>http:</SPAN>//.../orders/1/review&gt;;rel=3Dreview;o=
p=3DPOST
    Link: &lt;<SPAN =
class=3DReservedWord>http:</SPAN>//.../orders/1/cancel&gt;;rel=3Dcancel;o=
p=3DPOST
    &lt;<SPAN class=3DReservedWord>order</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>id</SPAN>&gt;1&lt;<SPAN =
class=3DReservedWord>/id</SPAN>&gt;
        &lt;<SPAN =
class=3DReservedWord>customer</SPAN>&gt;http://.../customers/21&lt;<SPAN =
class=3DReservedWord>/customer</SPAN>&gt;
        &lt;<SPAN =
class=3DReservedWord>shippingAddress</SPAN>&gt;http://.../customers/21/ad=
dress/1&lt;<SPAN class=3DReservedWord>/shippingAddress</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>orderItems</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>product</SPAN>&gt;http://.../products/3345&lt;<SPAN =
class=3DReservedWord>/product</SPAN>&gt;
            &lt;<SPAN class=3DReservedWord>quantity</SPAN>&gt;1&lt;<SPAN =
class=3DReservedWord>/quantity</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>/orderItems</SPAN>&gt;
        &lt;<SPAN =
class=3DReservedWord>status</SPAN>&gt;RECEIVED&lt;<SPAN =
class=3DReservedWord>/status</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>/order</SPAN>&gt;</PRE>
<P></P>
<P>Without a method annotated with <CODE=20
class=3Dliteral>@ContextualActionSet</CODE>, all actions are available =
at all=20
times regardless of the state of an order. The following method can be =
provided=20
to define a contextual contract for this resource. </P><PRE =
class=3Dprogramlisting>&nbsp;&nbsp;1     @ContextualActionSet
&nbsp;&nbsp;2     <SPAN class=3DReservedWord>public</SPAN> =
Set&lt;String&gt; getContextualActionSet() {
&nbsp;&nbsp;3         Set&lt;String&gt; result =3D <SPAN =
class=3DReservedWord>new</SPAN> HashSet&lt;String&gt;();
&nbsp;&nbsp;4         <SPAN class=3DReservedWord>switch</SPAN> =
(order.getStatus()) {
&nbsp;&nbsp;5             <SPAN class=3DReservedWord>case</SPAN> =
RECEIVED:
&nbsp;&nbsp;6                 result.add(<SPAN =
class=3DString>"review"</SPAN>);
&nbsp;&nbsp;7                 result.add(<SPAN =
class=3DString>"cancel"</SPAN>);
&nbsp;&nbsp;8                 <SPAN class=3DReservedWord>break</SPAN>;
&nbsp;&nbsp;9             <SPAN class=3DReservedWord>case</SPAN> =
REVIEWED:
&nbsp;10                 result.add(<SPAN class=3DString>"pay"</SPAN>);
&nbsp;11                 result.add(<SPAN =
class=3DString>"cancel"</SPAN>);
&nbsp;12                 <SPAN class=3DReservedWord>break</SPAN>;
&nbsp;13             <SPAN class=3DReservedWord>case</SPAN> PAYED:
&nbsp;14                 result.add(<SPAN class=3DString>"ship"</SPAN>);
&nbsp;15                 <SPAN class=3DReservedWord>break</SPAN>;
&nbsp;16             <SPAN class=3DReservedWord>case</SPAN> CANCELED:
&nbsp;17             <SPAN class=3DReservedWord>case</SPAN> SHIPPED:
&nbsp;18                 <SPAN class=3DReservedWord>break</SPAN>;
&nbsp;19         }
&nbsp;20         <SPAN class=3DReservedWord>return</SPAN> result;
&nbsp;21     }</PRE>
<P></P>
<P>This method returns a set of action names based on the order's =
internal=20
state; the values returned in this set correspond to the <CODE=20
class=3Dliteral>@Action</CODE> annotations in the controller. For =
example, this=20
contextual contract prevents shipping an order that has not been payed =
by only=20
including the <CODE class=3Dliteral>ship</CODE> action in the <CODE=20
class=3Dliteral>PAYED</CODE> state.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e3356></A>10.1.4.&nbsp;Client=20
API</H3></DIV></DIV></DIV>
<P>Although action resources can be accessed using traditional APIs for =
REST,=20
including Jersey's client API, the use of client-side proxies and method =

invocations to trigger these actions seems quite natural. As we shall =
see, the=20
use of client proxies also introduces a level of indirection that =
enables better=20
support for server evolution, permitting the definition of contracts =
with=20
various degrees of coupling.</P>
<P>Client proxies are created based on <SPAN =
class=3Demphasis><EM>hypermedia=20
controller interfaces</EM></SPAN>. Hypermedia controller interfaces are =
Java=20
interfaces annotated by <CODE =
class=3Dliteral>@HypermediaController</CODE> that,=20
akin to the server side API, specify the name of a model class and the =
type of=20
serialization to use for action resource URIs. The client-side model =
class=20
should be based on the representation returned by the server; in =
particular, in=20
our example the client-side model for an <CODE =
class=3Dliteral>Order</CODE> uses=20
instances of <CODE class=3Dliteral>URI</CODE> to link an order to a =
customer, an=20
address and a list of products. </P><PRE =
class=3Dprogramlisting>&nbsp;&nbsp;1     @HypermediaController(
&nbsp;&nbsp;2         model=3DOrder.<SPAN =
class=3DReservedWord>class</SPAN>,
&nbsp;&nbsp;3         linkType=3DLinkType.LINK_HEADERS)
&nbsp;&nbsp;4     <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>interface</SPAN> OrderController {
&nbsp;&nbsp;5        =20
&nbsp;&nbsp;6         <SPAN class=3DReservedWord>public</SPAN> Order =
getModel();
&nbsp;&nbsp;7        =20
&nbsp;&nbsp;8         @Action(<SPAN class=3DString>"review"</SPAN>)
&nbsp;&nbsp;9         <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> review(@Name(<SPAN =
class=3DString>"notes"</SPAN>) String notes);
&nbsp;10        =20
&nbsp;11         @POST @Action(<SPAN class=3DString>"pay"</SPAN>)
&nbsp;12         <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> pay(@QueryParam(<SPAN =
class=3DString>"newCardNumber"</SPAN>) String newCardNumber);
&nbsp;13        =20
&nbsp;14         @Action(<SPAN class=3DString>"ship"</SPAN>)
&nbsp;15         <SPAN class=3DReservedWord>public</SPAN> Order =
ship(Address newShippingAddress);
&nbsp;16        =20
&nbsp;17         @Action(<SPAN class=3DString>"cancel"</SPAN>)
&nbsp;18         <SPAN class=3DReservedWord>public</SPAN> <SPAN =
class=3DReservedWord>void</SPAN> cancel(@Name(<SPAN =
class=3DString>"notes"</SPAN>) String notes);
&nbsp;19     }</PRE>
<P></P>
<P>The <CODE class=3Dliteral>@Action</CODE> annotation associates an =
interface=20
method with a link relation and hence an action resource on the server. =
Thus,=20
invoking a method on the generated proxy results in an interaction with =
the=20
corresponding action resource. The way in which the method invocation is =
mapped=20
to an HTTP request depends on the additional annotations specified in =
the=20
interface. For instance, the <CODE class=3Dliteral>pay</CODE> action in =
the=20
example above indicates that it must use a <CODE =
class=3Dliteral>POST</CODE> and=20
that the <CODE class=3Dliteral>String</CODE> parameter <CODE=20
class=3Dliteral>newCardNumber</CODE> must be passed as a query =
parameter. This is=20
an example of a <SPAN class=3Demphasis><EM>static</EM></SPAN> contract =
in which=20
the client has built-in knowledge of the way in which an action is =
defined by=20
the server.</P>
<P>In contrast, the <CODE class=3Dliteral>review</CODE> action only =
provides a=20
name for its parameter using the <CODE class=3Dliteral>@Name</CODE> =
annotation.=20
This is an example of a <SPAN class=3Demphasis><EM>dynamic</EM></SPAN> =
contract in=20
which the client is only coupled to the <CODE =
class=3Dliteral>review</CODE> link=20
relation and the knowledge that this relation requires <CODE=20
class=3Dliteral>notes</CODE> to be supplied. The exact interaction with =
the <CODE=20
class=3Dliteral>review</CODE> action must therefore be discovered =
dynamically and=20
the <CODE class=3Dliteral>notes</CODE> parameter mapped accordingly. The =
Jersey=20
client runtime uses WADL fragments that describe action resources to map =
these=20
method calls into HTTP requests.</P>
<P>The following sample shows how to use <CODE=20
class=3Dliteral>OrderController</CODE> to generate a proxy to review, =
pay and ship=20
an order. For the sake of the example, we assume the customer that =
submitted the=20
order has been suspended and needs to be activated before the order is =
reviewed.=20
For that purpose, the client code retrieves the customer URI from the =
order's=20
model and obtains an instance of <CODE=20
class=3Dliteral>CustomerController</CODE>.<SUP>[<A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#ftn.d0e3429"=20
name=3Dd0e3429>3</A>]</SUP> </P><PRE =
class=3Dprogramlisting>&nbsp;&nbsp;1     <SPAN class=3DComment>// =
Instantiate Jersey's Client class</SPAN>
&nbsp;&nbsp;2     Client client =3D <SPAN =
class=3DReservedWord>new</SPAN> Client();
&nbsp;&nbsp;3        =20
&nbsp;&nbsp;4     <SPAN class=3DComment>// Create proxy for order and =
retrieve model</SPAN>
&nbsp;&nbsp;5     OrderController orderCtrl =3D client.view(
&nbsp;&nbsp;6         <SPAN class=3DString>"http://.../orders/1"</SPAN>, =
OrderController.<SPAN class=3DReservedWord>class</SPAN>);
&nbsp;&nbsp;7        =20
&nbsp;&nbsp;8     <SPAN class=3DComment>// Create proxy for customer in =
order 1</SPAN>
&nbsp;&nbsp;9     CustomerController customerCtrl =3D client.view(
&nbsp;10         orderCtrl.getModel().getCustomer(),
&nbsp;11         CustomerController.<SPAN =
class=3DReservedWord>class</SPAN>);
&nbsp;12        =20
&nbsp;13     <SPAN class=3DComment>// Activate customer in order 1 =
</SPAN>
&nbsp;14     customerCtrl.activate();
&nbsp;15        =20
&nbsp;16     <SPAN class=3DComment>// Review and pay order </SPAN>
&nbsp;17     orderCtrl.review(<SPAN class=3DString>"approve"</SPAN>);
&nbsp;18     orderCtrl.pay(<SPAN class=3DString>"123456789"</SPAN>);
&nbsp;19        =20
&nbsp;20     <SPAN class=3DComment>// Ship order </SPAN>
&nbsp;21     Address newAddress =3D getNewAddress();
&nbsp;22     orderCtrl.ship(newAddress);</PRE>
<P></P>
<P>The client runtime will automatically update the action set =
throughout a=20
conversation: for example, even though the <CODE =
class=3Dliteral>review</CODE>=20
action does not produce a result, the HTTP response to that action still =

includes a list of link headers defining the contextual action set, =
which in=20
this case will consist of the <CODE class=3Dliteral>pay</CODE> and <CODE =

class=3Dliteral>cancel</CODE> actions but not the <CODE =
class=3Dliteral>ship</CODE>=20
action. An attempt to interact with any action not in the contextual =
action set=20
will result in a client-side exception if using proxies (as shown =
above), or a=20
server-side exception if using some other API.</P>
<P>The following annotations are allowed in hypermedia controller =
interfaces:=20
<CODE class=3Dliteral>@Name</CODE>, <CODE =
class=3Dliteral>@Consumes</CODE>, <CODE=20
class=3Dliteral>@Produces</CODE>, <CODE =
class=3Dliteral>@CookieParam</CODE>, <CODE=20
class=3Dliteral>@FormParam</CODE>, <CODE =
class=3Dliteral>@HeaderParam</CODE>, <CODE=20
class=3Dliteral>@QueryParam</CODE>, as well as any HTTP method =
annotation like=20
<CODE class=3Dliteral>@POST</CODE>, <CODE class=3Dliteral>@PUT</CODE>, =
etc. All=20
other annotations not listed here are unsupported at this time (of note, =
<CODE=20
class=3Dliteral>@MatrixParam</CODE> is not supported). The <CODE=20
class=3Dliteral>@Name</CODE> annotation used in Jersey is defined in =
<CODE=20
class=3Dliteral>com.sun.jersey.core.hypermedia</CODE>.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e3494></A>10.1.5.&nbsp;Server=20
Evolution</H3></DIV></DIV></DIV>
<P>In the last section, we have seen how the use of client proxies based =
on=20
<SPAN class=3Demphasis><EM>partially</EM></SPAN> annotated interfaces =
facilitates=20
server evolution. An interface method annotated with <CODE=20
class=3Dliteral>@Action</CODE> and <CODE class=3Dliteral>@Name</CODE> =
represents a=20
<SPAN class=3Demphasis><EM>loosely-coupled</EM></SPAN> contract with a =
server.=20
Changes to action resource URIs, HTTP methods and parameter types on the =
server=20
will not require a client re-spin. Naturally, as in all client-server=20
architectures, it is always possible to break backward compatibility, =
but the=20
ability to support more dynamic contracts --usually at the cost of =
additional=20
processing time-- is still an area of investigation.</P>
<P>We see this form of hypermedia support in Jersey as a small step in =
this=20
direction, showing the potential of using dynamic meta-data for the =
definition=20
of these type of contracts. The use of dynamic meta-data requires the =
server to=20
return WADL fragments when using <CODE class=3Dliteral>OPTIONS</CODE> on =
an action=20
resource URI. When dynamic meta-data is not available (for example if =
using an=20
older version of Jersey on the server) client interfaces should be fully =

annotated and a <SPAN class=3Demphasis><EM>tighly-coupled</EM></SPAN> =
contract=20
should be used instead.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e3519></A>10.1.6.&nbsp;Configuring =
Hypermedia in=20
Jersey</H3></DIV></DIV></DIV>
<P>There are a few configuration options in <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/experimental/hype=
rmedia-action/hypermedia-action-sample/"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">hypermedia-action-sample</A>=
 that are=20
worth highlighting. First, a special filter factory <CODE=20
class=3Dliteral>HypermediaFilterFactory</CODE> must be enabled. This can =
be done=20
programmatically by adding </P><PRE =
class=3Dprogramlisting>com.sun.jersey.server.hypermedia.filter.Hypermedia=
FilterFactory</PRE>
<P>to the list defined by </P><PRE =
class=3Dprogramlisting>com.sun.jersey.spi.container.ResourceFilters</PRE>=

<P>or declaratively in the application's <CODE =
class=3Dliteral>web.xml</CODE>=20
file. Refer to the Java class <CODE=20
class=3Dliteral>com.sun.jersey.samples.hypermedia.Main</CODE> in the =
hypermedia=20
sample for an example of how to do this using Grizzly (which can be =
executed=20
with <CODE class=3Dliteral>mvn install exec:java</CODE>). Second, =
hypermedia=20
applications must included the following Maven runtime dependencies: =
</P><PRE class=3Dprogramlisting>        &lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.experimental.hyperm=
edia-action&lt;<SPAN class=3DReservedWord>/groupId</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;hypermedia-action-server&lt;<SP=
AN class=3DReservedWord>/artifactId</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>version</SPAN>&gt;${jersey-version}&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>dependency</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.experimental.hyperm=
edia-action&lt;<SPAN class=3DReservedWord>/groupId</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;hypermedia-action-client&lt;<SP=
AN class=3DReservedWord>/artifactId</SPAN>&gt;
            &lt;<SPAN =
class=3DReservedWord>version</SPAN>&gt;${jersey-version}&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
        &lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>Last, even though the annotation <CODE=20
class=3Dliteral>@HypermediaController</CODE> has a <CODE=20
class=3Dliteral>linkType</CODE> element, only the <CODE=20
class=3Dliteral>LinkType.LINK_HEADERS</CODE> option is currently =
supported and=20
must be used by both clients and servers. </P></DIV></DIV>
<DIV class=3Dfootnotes><BR>
<HR align=3Dleft width=3D100>

<DIV class=3Dfootnote>
<P><SUP>[<A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3295"=20
name=3Dftn.d0e3295>2</A>] </SUP>Several details about this class are =
omitted for=20
clarity. The reader is referred to the hypermedia sample for more=20
details.</P></DIV>
<DIV class=3Dfootnote>
<P><SUP>[<A=20
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3429"=20
name=3Dftn.d0e3429>3</A>] </SUP><CODE =
class=3Dliteral>CustomerController</CODE> is a=20
hypermedia controller interface akin to <CODE=20
class=3Dliteral>OrderController</CODE> which is omitted since it does =
not=20
highlight any additional feature.</P></DIV></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A=20
name=3Dchapter_deps></A>Chapter&nbsp;11.&nbsp;Dependencies</H2></DIV></DI=
V></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#core_server">11.1.=20
  Core server</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#core_client">11.2.=20
  Core client</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3722">11.3.=20
  Container</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3725">11.3.1.=20
    Grizzly HTTP Web server</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3737">11.3.2.=20
    Simple HTTP Web server</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3745">11.3.3.=20
    Light weight HTTP server</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3750">11.3.4.=20
    Servlet</A></SPAN></DT></DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3777">11.4.=20
  Entity</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3780">11.4.1.=20
    JAXB</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3873">11.4.2.=20
    Atom</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3919">11.4.3.=20
    JSON</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3947">11.4.4.=20
    Mail and MIME multipart</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3987">11.4.5.=20
    Activation</A></SPAN></DT></DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e3995">11.5.=20
  Tools</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4002">11.6.=20
  Spring</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4017">11.7.=20
  Guice</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4055">11.8.=20
  Jersey Test Framework</A></SPAN></DT></DL></DIV>
<P>Jersey is built, assembled and installed using Maven. Jersey is =
deployed to=20
the Java.Net maven repository at the following location: <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/mav=
en/2/com/sun/jersey</A>.=20
The Jersey modules can be browsed at the following location: <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/mav=
en/2/com/sun/jersey</A>.=20
Jars, Jar sources, Jar JavaDoc and samples are all available on the =
java.net=20
maven repository.</P>
<P>A zip file containing all maven-based samples can be obtained <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/jersey-sa=
mples/1.4/jersey-samples-1.4-project.zip"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">here</A>. =
Individual zip=20
files for each sample may be found by browsing the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/samples/" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">samples</A> directory.</P>
<P>An application depending on Jersey requires that it in turn includes =
the set=20
of jars that Jersey depends on. Jersey has a pluggable component =
architecture so=20
the set of jars required to be include in the class path can be =
different for=20
each application.</P>
<P>All Jersey components are built using Java SE 6 compiler. It means, =
you will=20
also need at least Java SE 6 to be able to compile and run your =
application.=20
</P>
<P>Developers using maven are likely to find it easier to include and =
manage=20
dependencies of their applications than developers using ant or other =
build=20
technologies. This document will explain to both maven and non-maven =
developers=20
how to depend on Jersey for their application. Ant developers are likely =
to find=20
the <A href=3D"http://maven.apache.org/ant-tasks.html" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Ant Tasks for Maven</A> =
very useful.=20
For the convenience of non-maven developers the following are provided: =
</P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>
  <P>A <A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-archive/1.=
4/jersey-archive-1.4.zip"=20
  target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">zip of =
Jersey</A>=20
  containing the Jersey jars, core dependencies (it does not provide=20
  dependencies for third party jars beyond the those for JSON support) =
and=20
  JavaDoc.</P>
  <LI>
  <P>A <A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/1.4=
/jersey-bundle-1.4.jar"=20
  target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey =
bundle jar</A>=20
  to avoid the dependency management of multiple jersey-based=20
jars.</P></LI></UL></DIV>
<P>Jersey's runtime dependences are categorized into the following: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>
  <P>Core server. The minimum set of dependences that Jersey requires =
for the=20
  server.</P>
  <LI>
  <P>Core client. The minimum set of dependences that Jersey requires =
for the=20
  client.</P>
  <LI>
  <P>Container. The set of container dependences. Each container =
provider has=20
  it's own set of dependences.</P>
  <LI>
  <P>Entity. The set of entity dependencies. Each entity provider has =
it's own=20
  set of dependences.</P>
  <LI>
  <P>Tools. The set of dependencies required for runtime tooling.</P>
  <LI>
  <P>Spring. The set of dependencies required for Spring.</P>
  <LI>
  <P>Guice. The set of dependencies required for =
Guice.</P></LI></UL></DIV>
<P>All dependences in this documented are referenced by hyper-links</P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dcore_server></A>11.1.&nbsp;Core=20
server</H2></DIV></DIV></DIV>
<P>Maven developers require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-server/1.4=
/jersey-server-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-server</A> module.=20
The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-server&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>And the following repositories need to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>repository</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>id</SPAN>&gt;maven2-repository.dev.java.net&lt;<SPAN=
 class=3DReservedWord>/id</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>name</SPAN>&gt;Java.net Repository =
for Maven&lt;<SPAN class=3DReservedWord>/name</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>url</SPAN>&gt;http://download.java.net/maven/2/&lt;<=
SPAN class=3DReservedWord>/url</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>layout</SPAN>&gt;default&lt;<SPAN =
class=3DReservedWord>/layout</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/repository</SPAN>&gt;=20
&lt;<SPAN class=3DReservedWord>repository</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>id</SPAN>&gt;maven-repository.dev.java.net&lt;<SPAN =
class=3DReservedWord>/id</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>name</SPAN>&gt;Java.net Maven 1 =
Repository (legacy)&lt;<SPAN class=3DReservedWord>/name</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>url</SPAN>&gt;http://download.java.net/maven/1&lt;<S=
PAN class=3DReservedWord>/url</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>layout</SPAN>&gt;legacy&lt;<SPAN =
class=3DReservedWord>/layout</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/repository</SPAN>&gt;</PRE>
<P>Non-maven developers require: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-server/1.4=
/jersey-server-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-server.jar</A> ,=20

  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-core/1.4/j=
ersey-core-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-core.jar</A> ,=20
  <LI><A href=3D"http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">asm.jar</A></LI></UL></DIV>
<P>or, if using the jersey-bundle: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/1.4=
/jersey-bundle-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-bundle.jar</A> ,=20

  <LI><A href=3D"http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">asm.jar</A></LI></UL></DIV>
<P>For Ant developers the <A =
href=3D"http://maven.apache.org/ant-tasks.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Ant Tasks for =
Maven</A>=20
may be used to add the following to the ant document such that the =
dependencies=20
do not need to be downloaded explicitly: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>artifact:dependencies</SPAN> <SPAN =
class=3DIdentifier>pathId</SPAN>=3D<SPAN =
class=3DString>"dependency.classpath"</SPAN>&gt;
  &lt;<SPAN class=3DReservedWord>dependency</SPAN> <SPAN =
class=3DIdentifier>groupId</SPAN>=3D<SPAN =
class=3DString>"com.sun.jersey"</SPAN>=20
              <SPAN class=3DIdentifier>artifactId</SPAN>=3D<SPAN =
class=3DString>"jersey-server"</SPAN>
              <SPAN class=3DIdentifier>version</SPAN>=3D<SPAN =
class=3DString>"1.4"</SPAN>/&gt;
  &lt;<SPAN class=3DReservedWord>artifact:remoteRepository</SPAN> <SPAN =
class=3DIdentifier>id</SPAN>=3D<SPAN =
class=3DString>"maven2-repository.dev.java.net"</SPAN>
                             <SPAN class=3DIdentifier>url</SPAN>=3D<SPAN =
class=3DString>"http://download.java.net/maven/2/"</SPAN> /&gt;
  &lt;<SPAN class=3DReservedWord>artifact:remoteRepository</SPAN> <SPAN =
class=3DIdentifier>id</SPAN>=3D<SPAN =
class=3DString>"maven-repository.dev.java.net"</SPAN>
                             <SPAN class=3DIdentifier>url</SPAN>=3D<SPAN =
class=3DString>"http://download.java.net/maven/1"</SPAN>=20
                             <SPAN =
class=3DIdentifier>layout</SPAN>=3D<SPAN class=3DString>"legacy"</SPAN> =
/&gt;
&lt;<SPAN class=3DReservedWord>/artifact:dependencies</SPAN>&gt;</PRE>
<P>The path id =93dependency.classpath=94 may then be referenced as the =
classpath to=20
be used for compiling or executing. Specifically the <A=20
href=3D"http://repo1.maven.org/maven2/asm/asm/3.1/asm-3.1.jar" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">asm.jar</A> dependency is =
required=20
when either of the following <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/core/ResourceConfig.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">com.sun.jersey.api.core.Reso=
urceConfig</A>=20
implementations are utilized: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/core/ClasspathResourceConfig.html"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">com.sun.jersey.api.core.Clas=
spathResourceConfig</A>=20
  ; or=20
  <LI><A=20
  =
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/core/PackagesResourceConfig.html"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">com.sun.jersey.api.core.Pack=
agesResourceConfig</A></LI></UL></DIV>
<P>By default Jersey will utilize the <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/api/core/ClasspathResourceConfig.html"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">ClasspathResourceConfig</A> =
if an=20
alternative is not specified. If an alternative is specified that does =
not=20
depend on the asm.jar then it is no longer necessary to include the =
asm.jar in=20
the minimum set of required jars.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dcore_client></A>11.2.&nbsp;Core=20
client</H2></DIV></DIV></DIV>
<P>Maven developers require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-client/1.4=
/jersey-client-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-client</A> module.=20
The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-client&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>Non-maven developers require: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-client/1.4=
/jersey-client-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-client.jar</A> ,=20

  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-core/1.4/j=
ersey-core-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-core.jar</A> ,=20
  </LI></UL></DIV>
<P>or, if using the jersey-bundle: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/1.4=
/jersey-bundle-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-bundle.jar</A> ,=20
  </LI></UL></DIV>
<P>The use of client with the Apache HTTP client to make HTTP request =
and=20
receive HTTP responses requires a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-a=
pache-client/1.4/jersey-apache-client-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-apache-client</A>=20
module. The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.contribs&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-apache-client&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e3722></A>11.3.&nbsp;Container</H2></DIV></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e3725></A>11.3.1.&nbsp;Grizzly HTTP Web=20
server</H3></DIV></DIV></DIV>
<P>Maven developers, deploying an application using the Grizzly HTTP Web =
server,=20
require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-servlet-=
webserver/1.9.18-i/grizzly-servlet-webserver-1.9.18-i.pom"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-servlet-webserver</A=
>=20
module.</P>
<P>Non-maven developers require: <A=20
href=3D"http://download.java.net/maven/2/com/sun/grizzly/grizzly-servlet-=
webserver/1.9.18-i/grizzly-servlet-webserver-1.9.18-i.jar"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">grizzly-servlet-webserver.ja=
r</A></P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e3737></A>11.3.2.&nbsp;Simple HTTP Web=20
server</H3></DIV></DIV></DIV>
<P>Maven developers, deploying an application using the Simple HTTP Web =
server,=20
require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-s=
imple-server/1.4/jersey-simple-server-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-simple-server</A>=20
module.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e3745></A>11.3.3.&nbsp;Light weight HTTP=20
server</H3></DIV></DIV></DIV>
<P>Deploying an application using the light weight HTTP server requires =
no=20
additional dependences, as Java SE 6 already contains everything=20
needed.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A =
name=3Dd0e3750></A>11.3.4.&nbsp;Servlet</H3></DIV></DIV></DIV>
<P>Deploying an application on a servlet container requires a deployment =

dependency with that container.</P>
<P>See the Java documentation <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey/com/sun/jers=
ey/spi/container/servlet/package-summary.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">here</A> on =
how to=20
configure the servlet container.</P>
<P>Using servlet: <CODE=20
class=3Dcode>com.sun.jersey.spi.container.servlet.ServletContainer</CODE>=
 requires=20
no additional dependences.</P>
<P>Maven developers using servlet: <CODE=20
class=3Dcode>com.sun.jersey.server.impl.container.servlet.ServletAdaptor<=
/CODE> in=20
a non-EE 5 servlet require a dependency on the <A=20
href=3D"http://download.java.net/maven/1/javax.persistence/poms/persisten=
ce-api-1.0.2.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">persistence-api</A>=20
module.</P>
<P>Non-Maven developers require: <A=20
href=3D"http://download.java.net/maven/1/javax.persistence/jars/persisten=
ce-api-1.0.2.jar"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">persistence-api.jar</A></P><=
/DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e3777></A>11.4.&nbsp;Entity</H2></DIV></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A =
name=3Dd0e3780></A>11.4.1.&nbsp;JAXB</H3></DIV></DIV></DIV>
<P>XML serialization support of Java types that are JAXB beans requires =
a=20
dependency on the JAXB reference implementation version 2.x or higher =
(see later=20
for specific version constraints with respect to JSON support). =
Deploying an=20
application for XML serialization support requires no additional =
dependences,=20
since Java SE 6 ships with JAXB 2.x support.</P>
<P>Maven developers, using JSON serialization support of JAXB beans when =
using=20
the MIME media type <CODE class=3Dcode>application/json</CODE> require a =

dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-json/1.4/j=
ersey-json-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-json</A> module=20
(no explicit dependency on jaxb-impl is required). This module depends =
on the=20
JAXB reference implementation version 2.1.12 or greater, and such a =
version is=20
required when enabling support for the JAXB natural JSON convention. For =
all=20
other supported JSON conventions any JAXB 2.x version may be utilized. =
The=20
following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-json&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>Non-maven developers require: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://repository.codehaus.org/org/codehaus/jackson/jackson-core-=
asl/1.5.5/jackson-core-asl-1.5.5.jar"=20
  target=3D_top=20
  xmlns:xlink=3D"http://www.w3.org/1999/xlink">jackson-core-asl.jar</A> =
,=20
  <LI><A=20
  =
href=3D"http://repository.codehaus.org/org/codehaus/jackson/jackson-mappe=
r-asl/1.5.5/jackson-mapper-asl-1.5.5.jar"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jackson-mapper-asl.jar</A> =
,=20
  <LI><A=20
  =
href=3D"http://repository.codehaus.org/org/codehaus/jackson/jackson-jaxrs=
/1.5.5/jackson-jaxrs-1.5.5.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jackson-jaxrs.jar</A> ,=20

  <LI><A=20
  =
href=3D"http://repo1.maven.org/maven2/org/codehaus/jettison/jettison/1.1/=
jettison-1.1.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jettison.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/com.sun.xml.bind/jars/jaxb-impl-=
2.1.12.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jaxb-impl.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.xml.bind/jars/jaxb-api-2.1=
.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jaxb-api.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.activation/jars/activation=
-1.1.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">activation.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.xml.stream/jars/stax-api-1=
.0-2.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">stax-api.jar</A></LI></UL></=
DIV>
<P>and additionally, if not depending on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/1.4=
/jersey-bundle-1.4.jar"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-bundle.jar</A>,=20
non-maven developers require: <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-json/1.4/j=
ersey-json-1.4.jar"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-json.jar</A></P>
<P>Maven developers, using Fast Infoset serialization support of JAXB =
beans with=20
using the MIME media type <CODE =
class=3Dcode>application/fastinfoset</CODE>=20
require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-fastinfose=
t/1.4/jersey-fastinfoset-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-fastinfoset</A>=20
module (no dependency on jaxb-impl is required). The following =
dependency needs=20
to be added to the pom: </P><PRE class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-fastinfoset&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>Non-maven developers require: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/com.sun.xml.fastinfoset/jars/Fas=
tInfoset-1.2.2.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">FastInfoset.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/com.sun.xml.bind/jars/jaxb-impl-=
2.1.12.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jaxb-impl.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.xml.bind/jars/jaxb-api-2.1=
.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jaxb-api.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.activation/jars/activation=
-1.1.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">activation.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.xml.stream/jars/stax-api-1=
.0-2.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">stax-api.jar</A></LI></UL></=
DIV>
<P>and additionally, if not depending on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/1.4=
/jersey-bundle-1.4.jar"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-bundle.jar</A>,=20
non-maven developers require: <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-fastinfose=
t/1.4/jersey-fastinfoset-1.4.jar"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-fastinfoset.jar</A></=
P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A =
name=3Dd0e3873></A>11.4.2.&nbsp;Atom</H3></DIV></DIV></DIV>
<P>The use of the Java types <CODE=20
class=3Dcode>org.apache.abdera.model.{Categories, Entry, Feed, =
Service}</CODE>=20
requires a dependency on Apache Abdera.</P>
<P>Maven developers require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-a=
tom-abdera/1.4/jersey-atom-abdera-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-atom-abdera</A>=20
module. The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.contribs&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-atom-abdera&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>The use of the Java types <CODE=20
class=3Dcode>com.sun.syndication.feed.atom.Entry</CODE> and <CODE=20
class=3Dcode>com.sun.syndication.feed.atom.Feed</CODE> requires a =
dependency on=20
ROME version 0.9 or higher.</P>
<P>Maven developers require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-atom/1.4/j=
ersey-atom-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-atom</A> module.=20
The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-atom&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>Non-maven developers require: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A =
href=3D"http://download.java.net/maven/1/rome/jars/rome-0.9.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">rome.jar</A> ,=20
  <LI><A =
href=3D"http://repo1.maven.org/maven2/jdom/jdom/1.0/jdom-1.0.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jdom.jar</A></LI></UL></DIV>=

<P>and additionally, if not depending on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/1.4=
/jersey-bundle-1.4.jar"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-bundle.jar</A>,=20
non-maven developers require: <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-atom/1.4/j=
ersey-atom-1.4.jar"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-atom.jar</A></P></DIV=
>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A =
name=3Dd0e3919></A>11.4.3.&nbsp;JSON</H3></DIV></DIV></DIV>
<P>The use of the Java types <CODE=20
class=3Dcode>org.codehaus.jettison.json.JSONObject</CODE> and <CODE=20
class=3Dcode>org.codehaus.jettison.json.JSONArray</CODE> requires =
Jettison version=20
1.1 or higher.</P>
<P>Maven developers require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-json/1.4/j=
ersey-json-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-json</A> module.=20
The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-json&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>Non-maven developers require: <A=20
href=3D"http://repo1.maven.org/maven2/org/codehaus/jettison/jettison/1.1/=
jettison-1.1.jar"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jettison.jar</A> and=20
additionally, if not depending on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-bundle/1.4=
/jersey-bundle-1.4.jar"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-bundle.jar</A>,=20
non-maven developers require: <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-json/1.4/j=
ersey-json-1.4.jar"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-json.jar</A></P></DIV=
>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e3947></A>11.4.4.&nbsp;Mail and MIME=20
multipart</H3></DIV></DIV></DIV>
<P>The use of the Java type <CODE=20
class=3Dcode>javax.mail.internet.MimeMultipart</CODE> requires Java Mail =
version=20
1.4 or higher.</P>
<P>Maven developers require a dependency on the <A=20
href=3D"http://download.java.net/maven/1/javax.mail/poms/mail-1.4.pom" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">java-mail</A> module.</P>
<P>Non-maven developers require: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A =
href=3D"http://download.java.net/maven/1/javax.mail/jars/mail-1.4.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">mail.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/1/javax.activation/jars/activation=
-1.1.jar"=20
  target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">activation.jar</A></LI></UL>=
</DIV>
<P>Jersey ships with a high-level MIME multipart API. Maven developers =
requires=20
a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-m=
ultipart/1.4/jersey-multipart-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-multipart</A>=20
module. The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.contribs&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-multipart&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>Non-maven developers require: </P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/org/jvnet/mimepull/1.3/mimepull-=
1.3.jar"=20
  target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">mimepull.jar</A> ,=20
  <LI><A=20
  =
href=3D"http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-m=
ultipart/1.4/jersey-multipart-1.4.jar"=20
  target=3D_top=20
  =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-multipart.jar</A></LI=
></UL></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A=20
name=3Dd0e3987></A>11.4.5.&nbsp;Activation</H3></DIV></DIV></DIV>
<P>The use of the Java type <CODE =
class=3Dcode>javax.activation.DataSource</CODE>=20
requires no additional dependencies, as Java SE 6 ships everything=20
needed.</P></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e3995></A>11.5.&nbsp;Tools</H2></DIV></DIV></DIV>
<P>By default WADL for resource classes is generated dynamically at =
runtime.=20
WADL support requires a dependency on the JAXB reference implementation =
version=20
2.x or higher. Deploying an application for WADL support requires no =
additional=20
dependences, since Java SE 6 ships with JAXB 2.x support.</P>
<P>The WADL ant task requires the same set of dependences as those for =
runtime=20
WADL support.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e4002></A>11.6.&nbsp;Spring</H2></DIV></DIV></DIV>
<P>Maven developers, using Spring 2.0.x or Spring 2.5.x, require a =
dependency on=20
the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-s=
pring/1.4/jersey-spring-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-spring</A> module.=20
The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.contribs&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-spring&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>See the Java documentation <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/contribs/jersey-spr=
ing/com/sun/jersey/spi/spring/container/servlet/package-summary.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">here</A> on =
how to=20
integrate Jersey-based Web applications with Spring.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e4017></A>11.7.&nbsp;Guice</H2></DIV></DIV></DIV>
<P>Maven developers, using Guice 2.0, require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/contribs/jersey-g=
uice/1.4/jersey-guice-1.4.pom"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-guice</A> module.=20
The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.contribs&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-guice&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>See the Java documentation <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/contribs/jersey-gui=
ce/com/sun/jersey/guice/spi/container/servlet/package-summary.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">here</A> on =
how to=20
integrate Jersey-based Web applications with Guice.</P>
<P>The Jersey Guice support may also be used with <A=20
href=3D"http://code.google.com/p/guiceyfruit/" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">GuiceyFruit</A>, a set of =
extensions=20
on top of Guice 2.0, such as support for Java EE artifacts like <CODE=20
class=3Dcode>@PostConstruct</CODE>/<CODE =
class=3Dcode>@PreDestroy</CODE>, <CODE=20
class=3Dcode>@Resource</CODE> and <CODE =
class=3Dcode>@PersistenceContext</CODE>. To=20
avail of GuiceyFruit features exclude the guice dependency from the =
maven=20
central repo and add the following:</P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;org.guiceyfruit&lt;<SPAN =
class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;guiceyfruit&lt;<SPAN =
class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;2.0&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;
...
&lt;<SPAN class=3DReservedWord>repository</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>id</SPAN>&gt;guice-maven&lt;<SPAN =
class=3DReservedWord>/id</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>name</SPAN>&gt;guice maven&lt;<SPAN =
class=3DReservedWord>/name</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>url</SPAN>&gt;http://guiceyfruit.googlecode.com/svn/=
repo/releases&lt;<SPAN class=3DReservedWord>/url</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/repository</SPAN>&gt;</PRE></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e4055></A>11.8.&nbsp;Jersey Test=20
Framework</H2></DIV></DIV></DIV>
<P><SPAN class=3Demphasis><EM>NOTE that breaking changes have occurred =
between=20
1.1.1-ea and 1.1.2-ea. See the end of this section for =
details.</EM></SPAN></P>
<P>Jersey Test Framework allows you to test your RESTful Web Services on =
a wide=20
range of containers. It supports light-weight containers such as =
Grizzly,=20
Embedded GlassFish, and the Light Weight HTTP Server in addition to =
regular web=20
containers such as GlassFish and Tomcat. Developers may plug in their =
own=20
containers.</P>
<P>A developer may write tests using the Junit 4.x framework can extend =
from the=20
abstract <A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey-test-framewo=
rk/com/sun/jersey/test/framework/JerseyTest.html"=20
target=3D_top =
xmlns:xlink=3D"http://www.w3.org/1999/xlink">JerseyTest</A> class.</P>
<P>Maven developers require a dependency on the <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/jersey-test-frame=
work/jersey-test-framework-grizzly/1.4/jersey-test-framework-grizzly-1.4.=
pom"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">jersey-test-framework-grizzl=
y</A>=20
module. The following dependency needs to be added to the pom: </P><PRE =
class=3Dprogramlisting>&lt;<SPAN =
class=3DReservedWord>dependency</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>groupId</SPAN>&gt;com.sun.jersey.jersey-test-framewo=
rk&lt;<SPAN class=3DReservedWord>/groupId</SPAN>&gt;
    &lt;<SPAN =
class=3DReservedWord>artifactId</SPAN>&gt;jersey-test-framework-grizzly&l=
t;<SPAN class=3DReservedWord>/artifactId</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>version</SPAN>&gt;1.4&lt;<SPAN =
class=3DReservedWord>/version</SPAN>&gt;
    &lt;<SPAN class=3DReservedWord>scope</SPAN>&gt;test&lt;<SPAN =
class=3DReservedWord>/scope</SPAN>&gt;
&lt;<SPAN class=3DReservedWord>/dependency</SPAN>&gt;</PRE>
<P>When utilizing an embedded container this framework can manage =
deployment and=20
testing of your web services. However, the framework currently doesn't =
support=20
instantiating and deploying on external containers.</P>
<P>The test framework provides the following test container factories: =
</P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI><CODE=20
  =
class=3Dcode>com.sun.jersey.test.framework.spi.container.http.HTTPContain=
erFactory</CODE>=20
  for testing with the Light Weight HTTP server.=20
  <LI><CODE=20
  =
class=3Dcode>com.sun.jersey.test.framework.spi.container.inmemory.InMemor=
yTestContainerFactory</CODE>=20
  for testing in memory without using HTTP.=20
  <LI><CODE=20
  =
class=3Dcode>com.sun.jersey.test.framework.spi.container.grizzly.GrizzlyT=
estContainerFactory</CODE>=20
  for testing with low-level Grizzly.=20
  <LI><CODE=20
  =
class=3Dcode>com.sun.jersey.test.framework.spi.container.grizzly.web.Griz=
zlyWebTestContainerFactory</CODE>=20
  for testing with Web-based Grizzly.=20
  <LI><CODE=20
  =
class=3Dcode>com.sun.jersey.test.framework.spi.container.embedded.glassfi=
sh.EmbeddedGlassFishTestContainerFactory</CODE>=20
  for testing with embedded GlassFish v3=20
  <LI><CODE=20
  =
class=3Dcode>com.sun.jersey.test.framework.spi.container.external.Externa=
lTestContainerFactory</CODE>=20
  for testing with application deployed externally, for example to =
GlassFish or=20
  Tomcat. </LI></UL></DIV>
<P>The system property <CODE =
class=3Dcode>jersey.test.containerFactory</CODE> is=20
utilized to declare the default test container factory that shall be =
used for=20
testing, the value of which is the fully qualified class name of a test=20
container factory class. If the property is not declared then the=20
GrizzlyWebTestContainerFactory is utilized as default test container=20
factory.</P>
<P>To test a maven-based web project with an external container such as=20
GlassFish, create the war file then deploy as follows (assuming that the =
pom=20
file is set up for deployment): </P><PRE class=3Dprogramlisting>mvn =
clean package -Dmaven.test.skip=3Dtrue
</PRE>
<P>Then execute the tests as follows: </P><PRE =
class=3Dprogramlisting>mvn test \ =
-Djersey.test.containerFactory=3Dcom.sun.jersey.test.framework.spi.contai=
ner.embedded.glassfish.external.ExternalTestContainerFactory \
-DJERSEY_HTTP_PORT=3D&amp;lt;HTTP_PORT&amp;gt;
</PRE>
<P><SPAN class=3Demphasis><EM>Breaking changes from 1.1.1-ea to=20
1.1.2-ea</EM></SPAN></P>
<P>The maven project groupId has changed from <CODE=20
class=3Dcode>com.sun.jersey.test.framework</CODE> to <CODE=20
class=3Dcode>com.sun.jersey</CODE></P>
<P>The extending of Jersey unit test and configuration has changed. See =
<A=20
href=3D"https://jersey.dev.java.net/nonav/apidocs/1.4/jersey-test-framewo=
rk/com/sun/jersey/test/framework/package-summary.html"=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">here</A> for =
an=20
example.</P>
<P>See the blog entry on <A=20
href=3D"http://blogs.sun.com/naresh/entry/jersey_test_framework_makes_it"=
=20
target=3D_top xmlns:xlink=3D"http://www.w3.org/1999/xlink">Jersey Test =
Framework</A>=20
for detailed instructions on how to use 1.1.1-ea version of the =
framework in=20
your application.</P></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A name=3Dglassfish></A>Chapter&nbsp;12.&nbsp;Jersey =
with=20
GlassFish</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4142">12.1.=20
  Overriding Jersey with war files</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4157">12.2.=20
  Upgrading Jersey in GlassFish</A></SPAN>
  <DD>
  <DL>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4160">12.2.1.=20
    GlassFish v3.0 and 3.0.1</A></SPAN>
    <DT><SPAN class=3Dsection><A=20
    =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4204">12.2.2.=20
    GlassFish v3.1</A></SPAN></DT></DL></DD></DL></DIV>
<P>This chapter will present instructions on how to use Jersey with =
Glassfish=20
when Jersey is distributed in the war and to manually upgrade the Jersey =
version=20
bundled with a GlassFish installation. </P>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e4142></A>12.1.&nbsp;Overriding=20
Jersey with war files</H2></DIV></DIV></DIV>
<P>To override the version of Jersey distributed in GlassFish with a =
version of=20
Jersey distributed in a war file ensure that class loader delegation is =
set to=20
false in WEB-INF/sun-web.xml or WEB-INF/glassfish-web.xml. For example: =
</P><PRE class=3Dprogramlisting>&lt;sun-web-app error-url=3D""&gt;
    &lt;context-root&gt;/context&lt;/context-root&gt;
    &lt;class-loader delegate=3D"false"/&gt;
&lt;/sun-web-app&gt;</PRE>
<P></P>
<P>In the GlassFish admin console, go to Configuration-&gt;JVM Settings, =
switch=20
to the JVM Options tab and add the following option: </P><PRE =
class=3Dprogramlisting>-Dcom.sun.enterprise.overrideablejavaxpackages=3Dj=
avax.ws.rs,javax.ws.rs.core,javax.ws.rs.ext</PRE>
<P></P>
<P>Restart GlassFish for new JVM settings to take effect.</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e4157></A>12.2.&nbsp;Upgrading=20
Jersey in GlassFish</H2></DIV></DIV></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e4160></A>12.2.1.&nbsp;GlassFish v3.0 and=20
3.0.1</H3></DIV></DIV></DIV>
<P>GlassFish v3.0 comes up with Jersey version 1.1.4.1. GlassFish v3.0.1 =
with=20
Jersey version 1.1.5. To upgrade these to 1.4 you will need to replace =
certain=20
files manually. </P>
<P>GlassFish uses Jersey internally in it's REST administration API, and =
the=20
Update Center client would not allow you to upgrade in order to prevent =
this=20
functionality. The workaround described in this section is known to =
work, but it=20
is not currently a tested and supported scenario. Please keep in mind =
things=20
could break. It is recommended to back up all all impacted files. The =
actual=20
replace steps follow. </P>
<P>Remove the existing Jersey files: Stop all running server instances. =
Then=20
remove the following files from the GlassFish installation directory: =
</P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>glassfish/modules/jsr311-api.jar
  <LI>glassfish/modules/jersey-gf-bundle.jar
  <LI>glassfish/modules/jersey-gf-statsproviders.jar
  <LI>glassfish/modules/jersey-multipart.jar
  <LI>glassfish/modules/jackson-core-asl.jar
  <LI>glassfish/modules/jettison.jar
  <LI>glassfish/modules/mimepull.jar</LI></UL></DIV>
<P>Download the new Jersey version archive from <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/glassfish/v3/jers=
ey-gfv3-core/1.4/jersey-gfv3-core-1.4-project.zip"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/mav=
en/2/com/sun/jersey/glassfish/v3/jersey-gfv3-core/1.4/jersey-gfv3-core-1.=
4-project.zip</A>and=20
unzip it's <CODE class=3Dliteral>glassfish/modules</CODE> content into =
the=20
GlassFish installation directory (to the <CODE=20
class=3Dliteral>glassfish/modules</CODE> subdirectory there). </P>
<P>To install also Jersey examples in addition, download <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/glassfish/v3/jers=
ey-gfv3-docs-and-samples/1.4/jersey-gfv3-docs-and-samples-1.4-project.zip=
"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/mav=
en/2/com/sun/jersey/glassfish/v3/jersey-gfv3-docs-and-samples/1.4/jersey-=
gfv3-docs-and-samples-1.4-project.zip</A>and=20
unzip it's content into the GlassFish installation directory. </P>
<P>To be 100 % sure the changes take effect, you might also want to =
remove the=20
felix cache, which is located in <CODE=20
class=3Dliteral>glassfish/domains/domain1/osgi-cache</CODE> directory. =
This=20
directory gets created upon the first start of the GlassFish instance.=20
</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H3 class=3Dtitle><A name=3Dd0e4204></A>12.2.2.&nbsp;GlassFish=20
v3.1</H3></DIV></DIV></DIV>
<P>GlassFish v3.1 is still a work in progress. We try to integrate =
Jersey=20
promoted builds there on a weekly basis, so that GlassFish v3.1 =
nightlies always=20
contain fresh Jersey bits. GlassFish v3.1 nightly builds could be =
downloaded=20
from <A href=3D"http://download.java.net/glassfish/v3.1/nightly/" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/gla=
ssfish/v3.1/nightly/</A>=20
GlassFish v3.1 promoted builds are available at <A=20
href=3D"http://download.java.net/glassfish/v3.1/promoted/" target=3D_top =

xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/gla=
ssfish/v3.1/promoted/</A>=20
</P>
<P>If you want to update the Jersey bits in GlassFish with the latest =
Jersey=20
snapshot version, or if you want to install Jersey documentation and =
examples,=20
you would need to do the following steps: </P>
<P>Remove the existing Jersey files: Stop all running server instances. =
Then=20
remove the following files from the GlassFish installation directory: =
</P>
<DIV class=3Ditemizedlist>
<UL type=3Ddisc>
  <LI>glassfish/modules/jersey-core.jar
  <LI>glassfish/modules/jersey-client.jar
  <LI>glassfish/modules/jersey-gf-server.jar
  <LI>glassfish/modules/jersey-json.jar
  <LI>glassfish/modules/jersey-multipart.jar
  <LI>glassfish/modules/jersey-gf-statsproviders.jar
  <LI>glassfish/modules/jackson-core-asl.jar
  <LI>glassfish/modules/jackson-mapper-asl.jar
  <LI>glassfish/modules/jackson-jaxrs.jar
  <LI>glassfish/modules/jettison.jar
  <LI>glassfish/modules/mimepull.jar</LI></UL></DIV>
<P>Download the new Jersey version archive from <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/glassfish/v3/jers=
ey-gfv3-core/1.4/jersey-gfv3-core-1.4-project.zip"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/mav=
en/2/com/sun/jersey/glassfish/v3/jersey-gfv3-core/1.4/jersey-gfv3-core-1.=
4-project.zip</A>and=20
unzip it's <CODE class=3Dliteral>glassfish/modules</CODE> content into =
the=20
GlassFish installation directory (to the <CODE=20
class=3Dliteral>glassfish/modules</CODE> subdirectory there). </P>
<P>To install also Jersey examples in addition, download (you can change =
the=20
version in the link to get another non-snapshot version of Jersey) <A=20
href=3D"http://download.java.net/maven/2/com/sun/jersey/glassfish/v3/jers=
ey-gfv3-docs-and-samples/1.4/jersey-gfv3-docs-and-samples-1.4-project.zip=
"=20
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://download.java.net/mav=
en/2/com/sun/jersey/glassfish/v3/jersey-gfv3-docs-and-samples/1.4/jersey-=
gfv3-docs-and-samples-1.4-project.zip</A>and=20
unzip it's content into the GlassFish installation directory. </P>
<P>To be 100 % sure the changes take effect, you might also want to =
remove the=20
felix cache, which is located in <CODE=20
class=3Dliteral>glassfish/domains/domain1/osgi-cache</CODE> directory. =
This=20
directory gets created upon the first start of the GlassFish instance.=20
</P></DIV></DIV></DIV>
<DIV lang=3Den class=3Dchapter>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 class=3Dtitle><A =
name=3Dhow-to-build></A>Chapter&nbsp;13.&nbsp;Building and=20
testing Jersey</H2></DIV></DIV></DIV>
<DIV class=3Dtoc>
<P><B>Table of Contents</B></P>
<DL>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4266">13.1.=20
  Checking out the source</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4302">13.2.=20
  Building using Maven</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4331">13.3.=20
  Testing</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4344">13.4.=20
  Continuous building and testing with Hudson</A></SPAN>
  <DT><SPAN class=3Dsection><A=20
  =
href=3D"http://jersey.java.net/nonav/documentation/latest/user-guide.html=
#d0e4352">13.5.=20
  Using NetBeans</A></SPAN></DT></DL></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e4266></A>13.1.&nbsp;Checking out=20
the source</H2></DIV></DIV></DIV>
<P>The Jersey source code is available from the Subversion repository =
located at=20
<A href=3D"https://jersey.dev.java.net/svn/jersey" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">https://jersey.dev.java.net/=
svn/jersey</A>.=20
</P>
<P>To check out the trunk where active development on the next release =
occurs=20
use the following command: </P><PRE class=3Dprogramlisting>svn checkout =
https://jersey.dev.java.net/svn/jersey/trunk/jersey jersey --username =
&lt;username&gt;
</PRE>
<P></P>
<P>If you are new to Subversion, you may want to visit the <A=20
href=3D"http://subversion.tigris.org/" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Subversion Project =
website</A> and=20
read <A href=3D"http://svnbook.red-bean.com/" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Version Control with =
Subversion</A>.=20
</P>
<P><A href=3D"https://jersey.dev.java.net/servlets/ProjectSource" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">Read more about how to =
checkout this=20
project's repository...</A> </P>
<P>Stable releases of Jersey are tagged in the location <A=20
href=3D"https://jersey.dev.java.net/svn/jersey/tags" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">https://jersey.dev.java.net/=
svn/jersey/tags</A>.=20
</P>
<P>The source code may be browsed using <A=20
href=3D"http://fisheye4.atlassian.com/browse/jersey" target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">FishEye</A>. </P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e4302></A>13.2.&nbsp;Building=20
using Maven</H2></DIV></DIV></DIV>
<P>Java SE 6 or greater is required. Maven 2.2.1 or greater is =
recommended. </P>
<P>It is recommended to build the whole of Jersey after you have =
initially=20
checked out the source code. To build all of Jersey use the following =
command=20
from the checked out <CODE class=3Dliteral>jersey</CODE> directory: =
</P><PRE class=3Dprogramlisting>mvn clean install
</PRE>
<P>To skip all the tests do: </P><PRE class=3Dprogramlisting>mvn =
-Dmaven.test.skip=3Dtrue clean install
</PRE>
<P>The following maven options are recommended: </P><PRE =
class=3Dprogramlisting>-Xmx1048m -XX:PermSize=3D64M =
-XX:MaxPermSize=3D128M
</PRE>
<P></P>
<P>Building the whole Jersey project including tests could take about an =
hour,=20
depending on your system performance of course. Even if you have a =
pretty fast=20
performant machine, this could be quite annoying. Especially if you just =
want to=20
experiment with a limited amount of code. To avoid building the whole =
Jersey=20
project tree, you can easily utilize the maven reactor plugin. </P>
<P>To build only the modules needed for the helloworld example, you can =
launch:=20
</P><PRE class=3Dprogramlisting>mvn reactor:make =
-Dmake.goals=3Dclean,install -Dmake.folders=3Dsamples/helloworld
</PRE>
<P>which takes less then 2 minutes on my machine. To switch testing off, =
when=20
building the same set of modules, you will use: </P><PRE =
class=3Dprogramlisting>mvn reactor:make =
-Dmake.goals=3D-Dmaven.test.skip,clean,install =
-Dmake.folders=3Dsamples/helloworld
</PRE>
<P></P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A=20
name=3Dd0e4331></A>13.3.&nbsp;Testing</H2></DIV></DIV></DIV>
<P>Jersey contains many unit tests. Most of these are not really unit =
tests=20
per-say and are functional tests using the JUnit test framework because =
it is=20
very convientient for execution and reporting. </P>
<P>Some modules have specific tests but most tests associated with =
testing the=20
jersey-core, jersey-client and jersey-server modules are located in the=20
jersey-test module. This module can take some time to execute all the =
tests so=20
it is recommended that you pick the appropriate tests to run related to =
the=20
particular area that is being investigated. For example, using: </P><PRE =
class=3Dprogramlisting>mvn -Dtest=3D&lt;pattern&gt; test
</PRE>
<P>where <CODE class=3Dliteral>pattern</CODE> may be a comma separated =
set of=20
names matching tests. </P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e4344></A>13.4.&nbsp;Continuous=20
building and testing with Hudson</H2></DIV></DIV></DIV>
<P>Jersey is built, tested and deployed on Solaris, Windows and Linux =
using an=20
interal Hudson server. The Jersey Hudson jobs are available publically =
at <A=20
href=3D"http://hudson.glassfish.org/job/Jersey-trunk-multiplatform/" =
target=3D_top=20
xmlns:xlink=3D"http://www.w3.org/1999/xlink">http://hudson.glassfish.org/=
job/Jersey-trunk-multiplatform/</A>.=20
</P></DIV>
<DIV lang=3Den class=3Dsection>
<DIV class=3Dtitlepage>
<DIV>
<DIV>
<H2 style=3D"CLEAR: both" class=3Dtitle><A =
name=3Dd0e4352></A>13.5.&nbsp;Using=20
NetBeans</H2></DIV></DIV></DIV>
<P>NetBeans 6.8 or greater has excellent maven support. The Jersey maven =
modules=20
can be loaded, built and tested in NetBeans without any additional=20
project-specific requirements. </P></DIV></DIV></DIV></BODY></HTML>

------=_NextPart_000_0000_01CB9AE2.FC53AE20
Content-Type: image/png
Content-Transfer-Encoding: base64
Content-Location: https://jersey.dev.java.net/images/Jersey_yellow.png

iVBORw0KGgoAAAANSUhEUgAAAEAAAAA0CAYAAAA62j4JAAAABmJLR0QA/wD/AP+gvaeTAAAACXBI
WXMAAA7EAAAOxAGVKw4bAAAAB3RJTUUH1wYUBh0lIzF3tgAABelJREFUaN7tmn1sE3UYxz93bbdu
dC8wpktExJcYjIhTZlBRUVEkjBdFjcIIaDCgJogEkMTFqERMMCwhKsY5BiwqMGGIZAQSJ0iEBSIz
oCaMuM3NdKyzHWvXWvpy1/rHtayMttvs9VZwT9Lkrve73/O77+/7PM/3nhaG7f9tQoL3vwgYY1yT
gD2AJ0EfRuA5QB/juifkR9ISuDGjR3IYCMb7ZBjpABbGWXx/NivDyB/9+cnN4jQwTisGzDKms9vj
xTjtQVgwN/qg+gaorgWXG4zpdHi8fATsA1r7md8ELDSm85bHy816HUwpgkXzog8+XK/4EUV8wQCv
+WW2JgsA0+iRVNu6mVmQDzWfweTC+DfYuuGT7VC+UzkGyMmi2eujzuOlCbCFhuamG7gpM5NHnC4m
SjJ6Yzq8UAzvvAHjbojv58xZKHkTGlsgN4tjdifPRMytCgAPZZuo7XGRs2w+rF8NudkDR87jheMN
sL8Oag6BxRp9XG42FD8Gc56AKZOgIH9wPt7dBGVbIDMDt/siJSHGJQSAPjeHcqeLl/NHIZSvVxaY
qFms0GkDe0+IWplwfb7ywHpdYnMfPQlL1kJrO+SPYq/1AksA+38BoCg3mxp7D2OfnQFlpTCm4Ooo
bS43rHgfqvaCKROry80CoC7a2Gh4602ZvCcIbDPoGVVWCh+sGhzlh9rSDDD3Sbj7Djh0lBFuD4tM
meT5/BzpWy77MmB8fh5fWbuYNHUybF4H42+5uoWOxQrLSuHAEcjK5E+nm3nA6SsYYMpguaijxudj
7NuvwxcfwnV5V7/SM42A+bOVHPP9MUZKMkuNBnySzAkgEGbA08C3AA37Fepci9baDrc9eul0PrBL
DJ3UAraiiUjX6sODoiemTsYvCDjCJVKM0O3bT/2KvrFlcJNu/lKJL63t+Cml5kvywO9paoOffkYX
DLIt/I4iRlwvFwTkip0Dm8xsgQlPwYp1vSpPazqv3QDjHlaOB2IVuyAQQATKw99FAtAUDHKkai+S
xxt/oppDcP88RXqGM63WZrb0+i6aA19/F3+8JMPW3cjAMaAxGgAAlfYe9NUHYguMJWsV3X3RwwW9
yCqA853aA/B3r9JfLkDH4tVQsrJXXV6xaQeh24EOqIz8vi8Ae3Q6uiu/IRgt5gpnKurKYGCHw8mt
UoAdkbsxFAwA9nX3cLvBQEV1LRQWK3K4r23dDTod3cCueABIskxlfQNCmN6SDKUbYfpigu2dOIDn
L3ooCelrCyANRQhE5B0L4PL7WQrM7rTRNW2hkh/CodzUBj+eJCjLVPVt0IhR5r6UDBtb4L65yBvK
QZI56JcoDHVfLtuMzqEDwN5H2tb6JcYLAgfKtsA9xUhnzirJT5YRIpNf3JchnY4fZJnHI0rkSuDz
GG2n33KyuLPrl4Tba4OyvHsJOpycA2Ipl1cEgU3BICMADHpO+CUe6DsoGgOQZSoi6HUX8GmcnpvZ
4URwubV7eI8XHE4EwBxn2JZgkAnA7wB+6crdjwlAiOZrgBsjS0YsALROhBG++vPaGtrANbGaI7EA
kICNA+y0tgNomQcifLUO8JaNsZoiohr9B4hdf5Nhduelw38SnUsNAIYyBMwpA4CWavD8wHOAJgC0
as0Ai23QOSCpAFi0BiAi37hSAQBJFPH19wapNgMEATlVQgC9jo52DRnQaQWdiCqFVxUA5ADNZsvg
ujMJJR0zpKUlXgHUA0DmvFaNEYtVAdrjpTllAAjHohZqsDNUAQIBOlIJAEcfhaZFBXCkEgCt4djU
IgTUEkFqAmAG0KISRLDMlUoAuAAcGoTAX+3qqUA1AbCBNr8PpGoI2ESRgBZlMAJkW0qFgF6Hva09
+QA0t0F6Gk7i/OtjKABAp6NHi76gyw2iqE4JVBuANotVWWCyc4AgYEk5ACS/UgqTmQfsPYoM9vnp
TjkAPD7l7ayrO7nxDyBJnFNrTr2K6+sC+LgKprckB4DD9Zf7SjV7iX7+06vi51W1Fq3mz1kFwAyN
wK4DzAzbsA1bovYvwhNmXa8+5zAAAAAASUVORK5CYII=

------=_NextPart_000_0000_01CB9AE2.FC53AE20
Content-Type: text/css;
	charset="ks_c_5601-1987"
Content-Transfer-Encoding: quoted-printable
Content-Location: https://jersey.dev.java.net/documentation.css

BODY {
	COLOR: #333
}
H1 {
	FONT-FAMILY: Arial,Helvetica,sans-serif !important
}
H2 {
	FONT-FAMILY: Arial,Helvetica,sans-serif !important
}
H3 {
	FONT-FAMILY: Arial,Helvetica,sans-serif !important
}
H4 {
	FONT-FAMILY: Arial,Helvetica,sans-serif !important
}
H5 {
	FONT-FAMILY: Arial,Helvetica,sans-serif !important
}
H6 {
	FONT-FAMILY: Arial,Helvetica,sans-serif !important
}
H1 {
	COLOR: #e76f00; FONT-SIZE: 1.5em; FONT-WEIGHT: bold
}
H2 {
	BACKGROUND-COLOR: transparent; COLOR: #e76f00; FONT-SIZE: 1.4em
}
H3 {
	BACKGROUND-COLOR: transparent; COLOR: #e76f00; FONT-SIZE: 1.3em
}
H4 {
	MARGIN-TOP: 0.3em; MARGIN-BOTTOM: 0.3em
}
A:link {
	COLOR: #069 !important; TEXT-DECORATION: none
}
A:hover {
	COLOR: #363 !important; TEXT-DECORATION: none
}
A.selfref:link {
	COLOR: #363 !important; TEXT-DECORATION: none !important
}
A.selfref:visited {
	COLOR: #363 !important; TEXT-DECORATION: none !important
}
A:visited {
	COLOR: #003366; TEXT-DECORATION: none
}
BODY {
	FONT-FAMILY: lucida,arial,sans-serif !important
}
TH {
	FONT-FAMILY: lucida,arial,sans-serif !important
}
TD {
	FONT-FAMILY: lucida,arial,sans-serif !important
}
P {
	FONT-FAMILY: lucida,arial,sans-serif !important
}
LI {
	FONT-FAMILY: lucida,arial,sans-serif !important
}
BODY {
	FONT-FAMILY: Verdana, Helvetica, Arial, sans-serif
}
INPUT {
	FONT-FAMILY: Verdana, Helvetica, Arial, sans-serif
}
SELECT {
	FONT-FAMILY: Verdana, Helvetica, Arial, sans-serif
}
CODE {
	FONT-FAMILY: 'Andale Mono', Courier, monospace
}
PRE {
	FONT-FAMILY: 'Andale Mono', Courier, monospace
}
BODY {
	FONT-SIZE: small; voice-family: inherit
}
PRE {
	FONT-SIZE: small; voice-family: inherit
}
CODE {
	FONT-SIZE: small; voice-family: inherit
}
PRE.programlisting {
	BORDER-BOTTOM: 1px dashed; BORDER-LEFT: 1px dashed; PADDING-BOTTOM: =
10px; BACKGROUND-COLOR: #ffffd0; PADDING-LEFT: 10px; PADDING-RIGHT: =
10px; BORDER-TOP: 1px dashed; BORDER-RIGHT: 1px dashed; PADDING-TOP: =
10px
}
SPAN.Comment {
	COLOR: rgb(150,150,150); FONT-WEIGHT: normal
}
SPAN.DocComment {
	COLOR: rgb(150,150,150); FONT-WEIGHT: normal
}
SPAN.String {
	COLOR: rgb(206,123,0); FONT-WEIGHT: normal
}
SPAN.EscString {
	COLOR: rgb(206,123,0); FONT-WEIGHT: bold
}
SPAN.Character {
	COLOR: rgb(206,123,0); FONT-WEIGHT: normal
}
SPAN.EscCharacter {
	COLOR: rgb(206,123,0); FONT-WEIGHT: bold
}
SPAN.Numeric {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.Identifier {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.PredefinedIdentifier {
	COLOR: rgb(0,0,230); FONT-WEIGHT: normal
}
SPAN.Type {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.ReservedWord {
	COLOR: rgb(0,0,230); FONT-WEIGHT: normal
}
SPAN.LibraryFunction {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.Include {
	COLOR: rgb(0,155,0); FONT-WEIGHT: normal
}
SPAN.Preprocessor {
	COLOR: rgb(0,155,0); FONT-WEIGHT: normal
}
SPAN.Braces {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.Symbol {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.FunctionHeader {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.FunctionHeaderName {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.FunctionHeaderArgs {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.RegEx {
	COLOR: rgb(0,111,0); FONT-WEIGHT: bold
}
SPAN.Text {
	COLOR: rgb(206,123,0); FONT-WEIGHT: normal
}
SPAN.Entity {
	COLOR: black; FONT-WEIGHT: bold
}
SPAN.Assignment {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.DependencyLine {
	COLOR: black; FONT-WEIGHT: normal
}
SPAN.DependencyTarget {
	COLOR: black; FONT-WEIGHT: bold
}
SPAN.DependencyContinuation {
	COLOR: black; FONT-WEIGHT: bold
}
SPAN.Continuation {
	COLOR: black; FONT-WEIGHT: bold
}
SPAN.Macro {
	COLOR: rgb(0,153,0); FONT-WEIGHT: normal
}
SPAN.IntMacro {
	COLOR: rgb(0,153,0); FONT-WEIGHT: normal
}
SPAN.EscVar {
	COLOR: black; FONT-WEIGHT: bold
}
SPAN.PredefinedIdentifier > SPAN.Braces {
	COLOR: rgb(0,0,230); FONT-WEIGHT: normal
}
SPAN.PredefinedIdentifier > SPAN.Identifier {
	COLOR: rgb(0,153,0); FONT-WEIGHT: normal
}

------=_NextPart_000_0000_01CB9AE2.FC53AE20--
